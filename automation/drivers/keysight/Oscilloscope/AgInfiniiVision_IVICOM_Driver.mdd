<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.43</FileVersion>
   <DriverName>AgInfiniiVision.AgInfiniiVision</DriverName>
   <DriverType>MATLAB IVI-COM</DriverType>
   <InstrumentType>IAgInfiniiVision5</InstrumentType>
   <InstrumentManufacturer>Manufacturer</InstrumentManufacturer>
   <InstrumentModel>Model</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST</Reset>
   <Selftest>*TST?</Selftest>
   <Error>System:Error?</Error>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
ictver = ver('instrument');
splittedVer = regexp (ictver.Version , '\.', 'split');
if (~isempty(splittedVer) &amp;&amp; (str2num(char(splittedVer(1))) &lt; 2 || (str2num(char(splittedVer(1))) == 2 &amp;&amp; str2num(char(splittedVer(2))) &lt;= 6)))
   error('instrument:icdevice:newerdriver','This driver requires Instrument Control ToolBox version 2.7.0 (R2008B) or later');
end
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% NOTE: This code is required to support driver interfaces that are collections.
%       Deleting or altering this code may prevent device objects using this
%       driver from operating correctly.

comobj = get(obj, 'Interface');

warning off backtrace
try
	collection = comobj;
	collection = get(collection, 'MathFunctions2');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Mathfunctions2');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2average');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2bus');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2fft');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2filter');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2integrate');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2linear');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2measurementtrend');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2fft2');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2smoothing');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2measurementtrend2');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2average');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2bus');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2fft');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2filter');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2integrate');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2linear');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2measurementtrend');

try
	collection = comobj;
	collection = get(collection, 'MathFunctions');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Mathfunctions');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionaverage');

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionbus');

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionfft');

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionfilter');

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionintegrate');

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionlinear');

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionmeasurementtrend');

try
	collection = comobj;
	collection = get(collection, 'WaveGens');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Wavegens');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

collection = comobj;
collection = get(collection, 'WaveGens');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'WaveGens' , 'WaveGentracking');

collection = comobj;
collection = get(collection, 'WaveGens');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'WaveGens' , 'WaveGenarbitrary');

collection = comobj;
collection = get(collection, 'WaveGens');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'WaveGens' , 'WaveGenmodulation');

try
	collection = comobj;
	collection = get(collection, 'SerialBuses');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Serialbuses');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBusecan');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBusei2s');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBuseiic');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBuselin');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBusespi');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBuseuart');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBusearinc429');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBusem1553');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBuseflexray');

try
	collection = comobj;
	collection = get(collection, 'Measurements2');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Measurements2');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

try
	collection = comobj;
	collection = get(collection, 'Channels');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Channels');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

try
	collection = comobj;
	collection = get(collection, 'Measurements');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Measurements');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

try
	collection = comobj;
	collection = get(collection, 'DigitalChannels');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Digitalchannels');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

try
	collection = comobj;
	collection = get(collection, 'MathFunctions2');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Mathfunctions2');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2average');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2bus');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2fft');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2filter');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2integrate');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2linear');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2measurementtrend');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2fft2');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2smoothing');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2measurementtrend2');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2average');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2bus');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2fft');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2filter');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2integrate');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2linear');

collection = comobj;
collection = get(collection, 'MathFunctions2');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions2' , 'MathFunction2measurementtrend');

try
	collection = comobj;
	collection = get(collection, 'MathFunctions');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Mathfunctions');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionaverage');

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionbus');

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionfft');

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionfilter');

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionintegrate');

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionlinear');

collection = comobj;
collection = get(collection, 'MathFunctions');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'MathFunctions' , 'MathFunctionmeasurementtrend');

try
	collection = comobj;
	collection = get(collection, 'WaveGens');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Wavegens');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

collection = comobj;
collection = get(collection, 'WaveGens');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'WaveGens' , 'WaveGentracking');

collection = comobj;
collection = get(collection, 'WaveGens');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'WaveGens' , 'WaveGenarbitrary');

collection = comobj;
collection = get(collection, 'WaveGens');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'WaveGens' , 'WaveGenmodulation');

try
	collection = comobj;
	collection = get(collection, 'SerialBuses');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Serialbuses');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBusecan');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBusei2s');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBuseiic');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBuselin');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBusespi');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBuseuart');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBusearinc429');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBusem1553');

collection = comobj;
collection = get(collection, 'SerialBuses');
instrgate('privateIviComDriverHelper', 'nestedgroup', obj, collection, 'SerialBuses' , 'SerialBuseflexray');

try
	collection = comobj;
	collection = get(collection, 'Measurements2');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Measurements2');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

try
	collection = comobj;
	collection = get(collection, 'Channels');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Channels');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

try
	collection = comobj;
	collection = get(collection, 'Measurements');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Measurements');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

try
	collection = comobj;
	collection = get(collection, 'DigitalChannels');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Digitalchannels');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

warning on backtrace
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>InstrumentCommand</Type>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Initialized</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Interface;
	propertyValue = comobj.Initialized;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Initialized is True between a successful call to the Initialize method and a successful call to the Close method, and False at all other times.</Description>
            </Property>
            <Property>
               <Name>Initialized</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Interface;
	propertyValue = comobj.Initialized;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Initialized is True between a successful call to the Initialize method and a successful call to the Close method, and False at all other times.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Close</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Close(obj)

comobj = obj.Interface;
feature('COM_SafeArraySingleDim',1);
comobj.Close();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Closes the I/O session to the instrument.  Driver methods and properties that access the instrument are not accessible after Close is called.</Description>
            </Method>
            <Method>
               <Name>Close</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Close(obj)

comobj = obj.Interface;
feature('COM_SafeArraySingleDim',1);
comobj.Close();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Closes the I/O session to the instrument.  Driver methods and properties that access the instrument are not accessible after Close is called.</Description>
            </Method>
            <Method>
               <Name>Initialize</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initialize(obj, ResourceName, IdQuery, Reset, OptionString)

comobj = obj.Interface;
feature('COM_SafeArraySingleDim',1);
comobj.Initialize(ResourceName, logical(IdQuery), logical(Reset), OptionString);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Opens the I/O session to the instrument.  Driver methods and properties that access the instrument are only accessible after Initialize is called.  Initialize optionally performs a Reset and queries the instrument to validate the instrument model.</Description>
            </Method>
            <Method>
               <Name>Initialize</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initialize(obj, ResourceName, IdQuery, Reset, OptionString)

comobj = obj.Interface;
feature('COM_SafeArraySingleDim',1);
comobj.Initialize(ResourceName, logical(IdQuery), logical(Reset), OptionString);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Opens the I/O session to the instrument.  Driver methods and properties that access the instrument are only accessible after Initialize is called.  Initialize optionally performs a Reset and queries the instrument to validate the instrument model.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Acquisition</Name>
         <Description>IVI Scope class-compliant acquisition interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AcquisitionType</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeNormal" Value="AgInfiniiVisionAcquisitionTypeNormal"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypePeakDetect" Value="AgInfiniiVisionAcquisitionTypePeakDetect"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeHiRes" Value="AgInfiniiVisionAcquisitionTypeHiRes"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeAverage" Value="AgInfiniiVisionAcquisitionTypeAverage"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of acquisition data oscilloscope uses to fill the waveform record.</Description>
            </Property>
            <Property>
               <Name>Interpolation</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.Interpolation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.Interpolation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionInterpolationSineX" Value="AgInfiniiVisionInterpolationSineX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The Oscilloscope uses the interpolation method when it cannot resolve a voltage for every point in the waveform record.</Description>
            </Property>
            <Property>
               <Name>NumberOfAverages</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.NumberOfAverages;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.NumberOfAverages = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of values (in averaging mode) to be averaged for each time bucket before the acquisition is considered to be complete for that time bucket. The count can be set to any value from 2 to 65536.</Description>
            </Property>
            <Property>
               <Name>NumberOfPointsMin</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.NumberOfPointsMin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.NumberOfPointsMin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The minimum number of points which can be in a waveform record for each channel.</Description>
            </Property>
            <Property>
               <Name>RecordLength</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.RecordLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The actual number of points the oscilloscope acquires for each channel. It is equal to or greater than the minimum number of points specified with the NumberOfPointsMin property."</Description>
            </Property>
            <Property>
               <Name>SampleMode</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.SampleMode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSampleModeRealTime" Value="AgInfiniiVisionSampleModeRealTime"/>
                     <Enum Name="AgInfiniiVisionSampleModeSegmented" Value="AgInfiniiVisionSampleModeSegmented"/>
                     <Enum Name="AgInfiniiVisionSampleModeEquivalentTime" Value="AgInfiniiVisionSampleModeEquivalentTime"/>
                     <Enum Name="AgInfiniiVisionSampleModeMaxRealTime" Value="AgInfiniiVisionSampleModeMaxRealTime"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the current acquisition sample mode setting.</Description>
            </Property>
            <Property>
               <Name>SampleRate</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.SampleRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the current oscilloscope acquisition sample rate in samples/sec. The sample rate is not directly controllable.</Description>
            </Property>
            <Property>
               <Name>StartTime</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.StartTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.StartTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time from the trigger event to the first point in the waveform record. If positive, the first point in the waveform occurs after the trigger. If negative, the first point in the waveform occurs before the trigger. The units are seconds.</Description>
            </Property>
            <Property>
               <Name>TimePerRecord</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.TimePerRecord;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.TimePerRecord = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The time in seconds that corresponds to the record length.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ConfigureRecord</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureRecord(obj, TimePerRecord, NumberOfPointsMin, StartTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureRecord(double(TimePerRecord), int32(NumberOfPointsMin), double(StartTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the most commonly used properties of the oscilloscope's acquisition subsystem: time per record, minimum record length, and the acquisition start time.</Description>
            </Method>
            <Method>
               <Name>SingleAcquisition</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SingleAcquisition(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition;
feature('COM_SafeArraySingleDim',1);
comobj.SingleAcquisition();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Acquires a single trigger of data.</Description>
            </Method>
            <Method>
               <Name>Stop</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Stop(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition;
feature('COM_SafeArraySingleDim',1);
comobj.Stop();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Stops the acquisition.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Acquisition2</Name>
         <Description>IAgInfiniiVisionAcquisition2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Acquisition2Type</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeNormal" Value="AgInfiniiVisionAcquisitionTypeNormal"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypePeakDetect" Value="AgInfiniiVisionAcquisitionTypePeakDetect"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeHiRes" Value="AgInfiniiVisionAcquisitionTypeHiRes"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeAverage" Value="AgInfiniiVisionAcquisitionTypeAverage"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of acquisition data oscilloscope uses to fill the waveform record.</Description>
            </Property>
            <Property>
               <Name>Acquisition2Type</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeNormal" Value="AgInfiniiVisionAcquisitionTypeNormal"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypePeakDetect" Value="AgInfiniiVisionAcquisitionTypePeakDetect"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeHiRes" Value="AgInfiniiVisionAcquisitionTypeHiRes"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeAverage" Value="AgInfiniiVisionAcquisitionTypeAverage"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of acquisition data oscilloscope uses to fill the waveform record.</Description>
            </Property>
            <Property>
               <Name>Interpolation</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.Interpolation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.Interpolation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionInterpolationSineX" Value="AgInfiniiVisionInterpolationSineX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The Oscilloscope uses the interpolation method when it cannot resolve a voltage for every point in the waveform record.</Description>
            </Property>
            <Property>
               <Name>Interpolation</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.Interpolation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.Interpolation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionInterpolationSineX" Value="AgInfiniiVisionInterpolationSineX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The Oscilloscope uses the interpolation method when it cannot resolve a voltage for every point in the waveform record.</Description>
            </Property>
            <Property>
               <Name>NumberOfAverages</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.NumberOfAverages;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.NumberOfAverages = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of values (in averaging mode) to be averaged for each time bucket before the acquisition is considered to be complete for that time bucket. The count can be set to any value from 2 to 65536.</Description>
            </Property>
            <Property>
               <Name>NumberOfAverages</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.NumberOfAverages;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.NumberOfAverages = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of values (in averaging mode) to be averaged for each time bucket before the acquisition is considered to be complete for that time bucket. The count can be set to any value from 2 to 65536.</Description>
            </Property>
            <Property>
               <Name>NumberOfPointsMin</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.NumberOfPointsMin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.NumberOfPointsMin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The minimum number of points which can be in a waveform record for each channel.</Description>
            </Property>
            <Property>
               <Name>NumberOfPointsMin</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.NumberOfPointsMin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.NumberOfPointsMin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The minimum number of points which can be in a waveform record for each channel.</Description>
            </Property>
            <Property>
               <Name>RecordLength</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.RecordLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The actual number of points the oscilloscope acquires for each channel. It is equal to or greater than the minimum number of points specified with the NumberOfPointsMin property."</Description>
            </Property>
            <Property>
               <Name>RecordLength</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.RecordLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The actual number of points the oscilloscope acquires for each channel. It is equal to or greater than the minimum number of points specified with the NumberOfPointsMin property."</Description>
            </Property>
            <Property>
               <Name>ReferenceSignal</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.ReferenceSignal;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.ReferenceSignal = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionAcquisitionReferenceSignalModeIn" Value="AgInfiniiVisionAcquisitionReferenceSignalModeIn"/>
                     <Enum Name="AgInfiniiVisionAcquisitionReferenceSignalModeOut" Value="AgInfiniiVisionAcquisitionReferenceSignalModeOut"/>
                     <Enum Name="AgInfiniiVisionAcquisitionReferenceSignalModeOff" Value="AgInfiniiVisionAcquisitionReferenceSignalModeOff"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the 10 MHz Reference Signal Mode.</Description>
            </Property>
            <Property>
               <Name>SampleMode</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.SampleMode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSampleModeRealTime" Value="AgInfiniiVisionSampleModeRealTime"/>
                     <Enum Name="AgInfiniiVisionSampleModeSegmented" Value="AgInfiniiVisionSampleModeSegmented"/>
                     <Enum Name="AgInfiniiVisionSampleModeEquivalentTime" Value="AgInfiniiVisionSampleModeEquivalentTime"/>
                     <Enum Name="AgInfiniiVisionSampleModeMaxRealTime" Value="AgInfiniiVisionSampleModeMaxRealTime"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the current acquisition sample mode setting.</Description>
            </Property>
            <Property>
               <Name>SampleMode</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.SampleMode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSampleModeRealTime" Value="AgInfiniiVisionSampleModeRealTime"/>
                     <Enum Name="AgInfiniiVisionSampleModeSegmented" Value="AgInfiniiVisionSampleModeSegmented"/>
                     <Enum Name="AgInfiniiVisionSampleModeEquivalentTime" Value="AgInfiniiVisionSampleModeEquivalentTime"/>
                     <Enum Name="AgInfiniiVisionSampleModeMaxRealTime" Value="AgInfiniiVisionSampleModeMaxRealTime"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the current acquisition sample mode setting.</Description>
            </Property>
            <Property>
               <Name>SampleRate</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.SampleRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the current oscilloscope acquisition sample rate in samples/sec. The sample rate is not directly controllable.</Description>
            </Property>
            <Property>
               <Name>SampleRate</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.SampleRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the current oscilloscope acquisition sample rate in samples/sec. The sample rate is not directly controllable.</Description>
            </Property>
            <Property>
               <Name>StartTime</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.StartTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.StartTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time from the trigger event to the first point in the waveform record. If positive, the first point in the waveform occurs after the trigger. If negative, the first point in the waveform occurs before the trigger. The units are seconds.</Description>
            </Property>
            <Property>
               <Name>StartTime</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.StartTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.StartTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time from the trigger event to the first point in the waveform record. If positive, the first point in the waveform occurs after the trigger. If negative, the first point in the waveform occurs before the trigger. The units are seconds.</Description>
            </Property>
            <Property>
               <Name>TimePerRecord</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.TimePerRecord;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.TimePerRecord = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The time in seconds that corresponds to the record length.</Description>
            </Property>
            <Property>
               <Name>TimePerRecord</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.TimePerRecord;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.TimePerRecord = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The time in seconds that corresponds to the record length.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ConfigureRecord</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureRecord(obj, TimePerRecord, NumberOfPointsMin, StartTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition2;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureRecord(double(TimePerRecord), int32(NumberOfPointsMin), double(StartTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the most commonly used properties of the oscilloscope's acquisition subsystem: time per record, minimum record length, and the acquisition start time.</Description>
            </Method>
            <Method>
               <Name>ConfigureRecord</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureRecord(obj, TimePerRecord, NumberOfPointsMin, StartTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition2;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureRecord(double(TimePerRecord), int32(NumberOfPointsMin), double(StartTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the most commonly used properties of the oscilloscope's acquisition subsystem: time per record, minimum record length, and the acquisition start time.</Description>
            </Method>
            <Method>
               <Name>SingleAcquisition</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SingleAcquisition(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition2;
feature('COM_SafeArraySingleDim',1);
comobj.SingleAcquisition();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Acquires a single trigger of data.</Description>
            </Method>
            <Method>
               <Name>SingleAcquisition</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SingleAcquisition(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition2;
feature('COM_SafeArraySingleDim',1);
comobj.SingleAcquisition();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Acquires a single trigger of data.</Description>
            </Method>
            <Method>
               <Name>Stop</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Stop(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition2;
feature('COM_SafeArraySingleDim',1);
comobj.Stop();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Stops the acquisition.</Description>
            </Method>
            <Method>
               <Name>Stop</Name>
               <Location>Acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Stop(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition2;
feature('COM_SafeArraySingleDim',1);
comobj.Stop();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Stops the acquisition.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Acquisition3</Name>
         <Description>IAgInfiniiVisionAcquisition3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition31" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Acquisition3Type</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeNormal" Value="AgInfiniiVisionAcquisitionTypeNormal"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypePeakDetect" Value="AgInfiniiVisionAcquisitionTypePeakDetect"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeHiRes" Value="AgInfiniiVisionAcquisitionTypeHiRes"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeAverage" Value="AgInfiniiVisionAcquisitionTypeAverage"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of acquisition data oscilloscope uses to fill the waveform record.</Description>
            </Property>
            <Property>
               <Name>Acquisition3Type</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeNormal" Value="AgInfiniiVisionAcquisitionTypeNormal"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypePeakDetect" Value="AgInfiniiVisionAcquisitionTypePeakDetect"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeHiRes" Value="AgInfiniiVisionAcquisitionTypeHiRes"/>
                     <Enum Name="AgInfiniiVisionAcquisitionTypeAverage" Value="AgInfiniiVisionAcquisitionTypeAverage"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of acquisition data oscilloscope uses to fill the waveform record.</Description>
            </Property>
            <Property>
               <Name>Interpolation</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.Interpolation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.Interpolation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionInterpolationSineX" Value="AgInfiniiVisionInterpolationSineX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The Oscilloscope uses the interpolation method when it cannot resolve a voltage for every point in the waveform record.</Description>
            </Property>
            <Property>
               <Name>Interpolation</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.Interpolation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.Interpolation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionInterpolationSineX" Value="AgInfiniiVisionInterpolationSineX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The Oscilloscope uses the interpolation method when it cannot resolve a voltage for every point in the waveform record.</Description>
            </Property>
            <Property>
               <Name>NumberOfAverages</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.NumberOfAverages;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.NumberOfAverages = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of values (in averaging mode) to be averaged for each time bucket before the acquisition is considered to be complete for that time bucket. The count can be set to any value from 2 to 65536.</Description>
            </Property>
            <Property>
               <Name>NumberOfAverages</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.NumberOfAverages;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.NumberOfAverages = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of values (in averaging mode) to be averaged for each time bucket before the acquisition is considered to be complete for that time bucket. The count can be set to any value from 2 to 65536.</Description>
            </Property>
            <Property>
               <Name>NumberOfPointsMin</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.NumberOfPointsMin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.NumberOfPointsMin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The minimum number of points which can be in a waveform record for each channel.</Description>
            </Property>
            <Property>
               <Name>NumberOfPointsMin</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.NumberOfPointsMin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.NumberOfPointsMin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The minimum number of points which can be in a waveform record for each channel.</Description>
            </Property>
            <Property>
               <Name>RecordLength</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.RecordLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The actual number of points the oscilloscope acquires for each channel. It is equal to or greater than the minimum number of points specified with the NumberOfPointsMin property."</Description>
            </Property>
            <Property>
               <Name>RecordLength</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.RecordLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The actual number of points the oscilloscope acquires for each channel. It is equal to or greater than the minimum number of points specified with the NumberOfPointsMin property."</Description>
            </Property>
            <Property>
               <Name>ReferenceSignal</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.ReferenceSignal;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.ReferenceSignal = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionAcquisitionReferenceSignalModeIn" Value="AgInfiniiVisionAcquisitionReferenceSignalModeIn"/>
                     <Enum Name="AgInfiniiVisionAcquisitionReferenceSignalModeOut" Value="AgInfiniiVisionAcquisitionReferenceSignalModeOut"/>
                     <Enum Name="AgInfiniiVisionAcquisitionReferenceSignalModeOff" Value="AgInfiniiVisionAcquisitionReferenceSignalModeOff"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the 10 MHz Reference Signal Mode.</Description>
            </Property>
            <Property>
               <Name>ReferenceSignal</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.ReferenceSignal;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.ReferenceSignal = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionAcquisitionReferenceSignalModeIn" Value="AgInfiniiVisionAcquisitionReferenceSignalModeIn"/>
                     <Enum Name="AgInfiniiVisionAcquisitionReferenceSignalModeOut" Value="AgInfiniiVisionAcquisitionReferenceSignalModeOut"/>
                     <Enum Name="AgInfiniiVisionAcquisitionReferenceSignalModeOff" Value="AgInfiniiVisionAcquisitionReferenceSignalModeOff"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the 10 MHz Reference Signal Mode.</Description>
            </Property>
            <Property>
               <Name>SampleMode</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.SampleMode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSampleModeRealTime" Value="AgInfiniiVisionSampleModeRealTime"/>
                     <Enum Name="AgInfiniiVisionSampleModeSegmented" Value="AgInfiniiVisionSampleModeSegmented"/>
                     <Enum Name="AgInfiniiVisionSampleModeEquivalentTime" Value="AgInfiniiVisionSampleModeEquivalentTime"/>
                     <Enum Name="AgInfiniiVisionSampleModeMaxRealTime" Value="AgInfiniiVisionSampleModeMaxRealTime"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the current acquisition sample mode setting.</Description>
            </Property>
            <Property>
               <Name>SampleMode</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.SampleMode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSampleModeRealTime" Value="AgInfiniiVisionSampleModeRealTime"/>
                     <Enum Name="AgInfiniiVisionSampleModeSegmented" Value="AgInfiniiVisionSampleModeSegmented"/>
                     <Enum Name="AgInfiniiVisionSampleModeEquivalentTime" Value="AgInfiniiVisionSampleModeEquivalentTime"/>
                     <Enum Name="AgInfiniiVisionSampleModeMaxRealTime" Value="AgInfiniiVisionSampleModeMaxRealTime"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the current acquisition sample mode setting.</Description>
            </Property>
            <Property>
               <Name>SampleRate</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.SampleRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the current oscilloscope acquisition sample rate in samples/sec. The sample rate is not directly controllable.</Description>
            </Property>
            <Property>
               <Name>SampleRate</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.SampleRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the current oscilloscope acquisition sample rate in samples/sec. The sample rate is not directly controllable.</Description>
            </Property>
            <Property>
               <Name>StartTime</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.StartTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.StartTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time from the trigger event to the first point in the waveform record. If positive, the first point in the waveform occurs after the trigger. If negative, the first point in the waveform occurs before the trigger. The units are seconds.</Description>
            </Property>
            <Property>
               <Name>StartTime</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.StartTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.StartTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time from the trigger event to the first point in the waveform record. If positive, the first point in the waveform occurs after the trigger. If negative, the first point in the waveform occurs before the trigger. The units are seconds.</Description>
            </Property>
            <Property>
               <Name>TimePerRecord</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.TimePerRecord;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.TimePerRecord = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The time in seconds that corresponds to the record length.</Description>
            </Property>
            <Property>
               <Name>TimePerRecord</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	propertyValue = comobj.TimePerRecord;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj.TimePerRecord = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The time in seconds that corresponds to the record length.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ConfigureRecord</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureRecord(obj, TimePerRecord, NumberOfPointsMin, StartTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition3;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureRecord(double(TimePerRecord), int32(NumberOfPointsMin), double(StartTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the most commonly used properties of the oscilloscope's acquisition subsystem: time per record, minimum record length, and the acquisition start time.</Description>
            </Method>
            <Method>
               <Name>ConfigureRecord</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureRecord(obj, TimePerRecord, NumberOfPointsMin, StartTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition3;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureRecord(double(TimePerRecord), int32(NumberOfPointsMin), double(StartTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the most commonly used properties of the oscilloscope's acquisition subsystem: time per record, minimum record length, and the acquisition start time.</Description>
            </Method>
            <Method>
               <Name>SetSampleMode</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetSampleMode(obj, Mode)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition3;
feature('COM_SafeArraySingleDim',1);
comobj.SetSampleMode(Mode);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the acquisition mode of the oscilloscope.</Description>
            </Method>
            <Method>
               <Name>SingleAcquisition</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SingleAcquisition(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition3;
feature('COM_SafeArraySingleDim',1);
comobj.SingleAcquisition();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Acquires a single trigger of data.</Description>
            </Method>
            <Method>
               <Name>SingleAcquisition</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SingleAcquisition(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition3;
feature('COM_SafeArraySingleDim',1);
comobj.SingleAcquisition();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Acquires a single trigger of data.</Description>
            </Method>
            <Method>
               <Name>Stop</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Stop(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition3;
feature('COM_SafeArraySingleDim',1);
comobj.Stop();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Stops the acquisition.</Description>
            </Method>
            <Method>
               <Name>Stop</Name>
               <Location>Acquisition3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Stop(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition3;
feature('COM_SafeArraySingleDim',1);
comobj.Stop();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Stops the acquisition.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Acquisition3SegmentedMemory</Name>
         <Description>IAgInfiniiVisionSegmentedMemory interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition3SegmentedMemory1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Acquisition3SegmentedMemory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj = comobj.SegmentedMemory;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj = comobj.SegmentedMemory;
	comobj.Count = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of memory segments to acquire.</Description>
            </Property>
            <Property>
               <Name>Index</Name>
               <Location>Acquisition3SegmentedMemory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj = comobj.SegmentedMemory;
	propertyValue = comobj.Index;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj = comobj.SegmentedMemory;
	comobj.Index = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The index into the memory segments that have been acquired. Allowed values are from 1 to 1000 (w/4M memory).</Description>
            </Property>
            <Property>
               <Name>SaveOption</Name>
               <Location>Acquisition3SegmentedMemory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj = comobj.SegmentedMemory;
	propertyValue = comobj.SaveOption;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj = comobj.SegmentedMemory;
	comobj.SaveOption = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMemorySegmentOptionAll" Value="AgInfiniiVisionMemorySegmentOptionAll"/>
                     <Enum Name="AgInfiniiVisionMemorySegmentOptionCurrent" Value="AgInfiniiVisionMemorySegmentOptionCurrent"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The segments to be included when the waveform is saved.</Description>
            </Property>
            <Property>
               <Name>TimeTag</Name>
               <Location>Acquisition3SegmentedMemory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition3;
	comobj = comobj.SegmentedMemory;
	propertyValue = comobj.TimeTag;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the time tag of the currently selected segmented memory index.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Analyze</Name>
               <Location>Acquisition3SegmentedMemory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Analyze(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition3;
comobj = comobj.SegmentedMemory;
feature('COM_SafeArraySingleDim',1);
comobj.Analyze();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Calculates measurement statistics and/or infinite persistence over all segments that have been acquired. The oscilloscope must be stopped and in segmented acquisition mode, with either quick measurements or infinite persistence on.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Calibration</Name>
         <Description>IAgInfiniiVisionCalibration interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Date</Name>
               <Location>Calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	propertyValue = comobj.Date;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the date of the last calibration.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>Calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionCalibrationProtectionEnabled" Value="AgInfiniiVisionCalibrationProtectionEnabled"/>
                     <Enum Name="AgInfiniiVisionCalibrationProtectionDisabled" Value="AgInfiniiVisionCalibrationProtectionDisabled"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the rear-panel calibration protect (CAL PROTECT) button state.</Description>
            </Property>
            <Property>
               <Name>Label</Name>
               <Location>Calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	propertyValue = comobj.Label;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	comobj.Label = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Calibration string(up to 32 characters not including the quotes).</Description>
            </Property>
            <Property>
               <Name>SignalSource</Name>
               <Location>Calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	propertyValue = comobj.SignalSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	comobj.SignalSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionCalibrationSignalSourceTriggers" Value="AgInfiniiVisionCalibrationSignalSourceTriggers"/>
                     <Enum Name="AgInfiniiVisionCalibrationSignalSourceMask" Value="AgInfiniiVisionCalibrationSignalSourceMask"/>
                     <Enum Name="AgInfiniiVisionCalibrationSignalSourceWaveGen" Value="AgInfiniiVisionCalibrationSignalSourceWaveGen"/>
                     <Enum Name="AgInfiniiVisionCalibrationSignalSourceWaveGen2" Value="AgInfiniiVisionCalibrationSignalSourceWaveGen2"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Signal on the rear panel trigger out BNC.</Description>
            </Property>
            <Property>
               <Name>Temperature</Name>
               <Location>Calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	propertyValue = comobj.Temperature;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Change in temperature since the last user calibration procedure.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>Calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	propertyValue = comobj.Time;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Time of the last calibration.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Calibrate</Name>
               <Location>Calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Calibrate(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration;
feature('COM_SafeArraySingleDim',1);
comobj.Calibrate();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Starts the user calibration procedure. See the User's Guide for details.</Description>
            </Method>
            <Method>
               <Name>Result</Name>
               <Location>Calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [StatusCode, StatusString] = Result(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration;
feature('COM_SafeArraySingleDim',1);
[StatusCode, StatusString] = comobj.Result(0, '');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read Only- Summary results of the last user calibration procedure.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Channel</Name>
         <Description>IAgInfiniiVisionChannel Interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Coupling</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionVerticalCouplingAC" Value="AgInfiniiVisionVerticalCouplingAC"/>
                     <Enum Name="AgInfiniiVisionVerticalCouplingDC" Value="AgInfiniiVisionVerticalCouplingDC"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Coupling of the input signal.</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionVerticalCouplingAC" Value="AgInfiniiVisionVerticalCouplingAC"/>
                     <Enum Name="AgInfiniiVisionVerticalCouplingDC" Value="AgInfiniiVisionVerticalCouplingDC"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Coupling of the input signal.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope acquires a waveform for this channel when the Initiate Acquisition, Read Waveform, Read Min Max Waveform, or Read Waveform Measurement methods are called.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope acquires a waveform for this channel when the Initiate Acquisition, Read Waveform, Read Min Max Waveform, or Read Waveform Measurement methods are called.</Description>
            </Property>
            <Property>
               <Name>InputFrequencyMax</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputFrequencyMax;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputFrequencyMax = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The maximum input frequency of the channel. It is the frequency at which the input circuitry attenuates the input signal by 3 dB. The units are hertz.</Description>
            </Property>
            <Property>
               <Name>InputFrequencyMax</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputFrequencyMax;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputFrequencyMax = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The maximum input frequency of the channel. It is the frequency at which the input circuitry attenuates the input signal by 3 dB. The units are hertz.</Description>
            </Property>
            <Property>
               <Name>InputImpedance</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputImpedance;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputImpedance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The input impedance of the channel. The units are ohms.</Description>
            </Property>
            <Property>
               <Name>InputImpedance</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputImpedance;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputImpedance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The input impedance of the channel. The units are ohms.</Description>
            </Property>
            <Property>
               <Name>Invert</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Invert;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Invert = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Inverts the input signal for the specified channel.</Description>
            </Property>
            <Property>
               <Name>Invert</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Invert;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Invert = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Inverts the input signal for the specified channel.</Description>
            </Property>
            <Property>
               <Name>Label</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Label;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Label = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The analog channel label.</Description>
            </Property>
            <Property>
               <Name>Label</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Label;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Label = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The analog channel label.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The location of the center of the range that you specify with the Range property.  The units are volts, with respect to ground. For example, to acquire a sine wave spanning 0.0 to 10.0 volts, set Offset to 5.0 volts.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The location of the center of the range that you specify with the Range property.  The units are volts, with respect to ground. For example, to acquire a sine wave spanning 0.0 to 10.0 volts, set Offset to 5.0 volts.</Description>
            </Property>
            <Property>
               <Name>ProbeAttenuation</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeAttenuation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ProbeAttenuation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The scaling factor by which the probe attenuates the input signal. For example, with a 10:1 probe, the value is 10.0.</Description>
            </Property>
            <Property>
               <Name>ProbeAttenuation</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeAttenuation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ProbeAttenuation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The scaling factor by which the probe attenuates the input signal. For example, with a 10:1 probe, the value is 10.0.</Description>
            </Property>
            <Property>
               <Name>ProbeID</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Type of probe attached to the specified oscilloscope channel.</Description>
            </Property>
            <Property>
               <Name>ProbeID</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Type of probe attached to the specified oscilloscope channel.</Description>
            </Property>
            <Property>
               <Name>ProbeSense</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeSense;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The probe attenuation value the oscilloscope automatically senses. If the automatic probe sense is disabled, its value is the manual probe attenuation setting.</Description>
            </Property>
            <Property>
               <Name>ProbeSense</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeSense;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The probe attenuation value the oscilloscope automatically senses. If the automatic probe sense is disabled, its value is the manual probe attenuation setting.</Description>
            </Property>
            <Property>
               <Name>ProbeSkew</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeSkew;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ProbeSkew = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Channel-to-channel skew factor for the specified channel. Each analog channel can be adjusted + or -100 ns for a total of 200 ns difference between channels.</Description>
            </Property>
            <Property>
               <Name>ProbeSkew</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeSkew;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ProbeSkew = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Channel-to-channel skew factor for the specified channel. Each analog channel can be adjusted + or -100 ns for a total of 200 ns difference between channels.</Description>
            </Property>
            <Property>
               <Name>Protection</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Protection;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionChannelProtectionOK" Value="AgInfiniiVisionChannelProtectionOK"/>
                     <Enum Name="AgInfiniiVisionChannelProtectionTripped" Value="AgInfiniiVisionChannelProtectionTripped"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - State of the input protection for specified channel. If a channel input has experienced an overload, TRIP (tripped) will be returned otherwise NORM (normal).</Description>
            </Property>
            <Property>
               <Name>Protection</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Protection;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionChannelProtectionOK" Value="AgInfiniiVisionChannelProtectionOK"/>
                     <Enum Name="AgInfiniiVisionChannelProtectionTripped" Value="AgInfiniiVisionChannelProtectionTripped"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - State of the input protection for specified channel. If a channel input has experienced an overload, TRIP (tripped) will be returned otherwise NORM (normal).</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The absolute value of the input range the oscilloscope can acquire for the channel. The units are volts. For example, to acquire a sine wave spanning -5.0 to 5.0 volts, set Range to 10.0 volts.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The absolute value of the input range the oscilloscope can acquire for the channel. The units are volts. For example, to acquire a sine wave spanning -5.0 to 5.0 volts, set Range to 10.0 volts.</Description>
            </Property>
            <Property>
               <Name>Scale</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Scale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Scale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Vertical scale, or units per division, of the selected channel.</Description>
            </Property>
            <Property>
               <Name>Scale</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Scale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Scale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Vertical scale, or units per division, of the selected channel.</Description>
            </Property>
            <Property>
               <Name>Units</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Units;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Units = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionChannelUnitsVolt" Value="AgInfiniiVisionChannelUnitsVolt"/>
                     <Enum Name="AgInfiniiVisionChannelUnitsAmpere" Value="AgInfiniiVisionChannelUnitsAmpere"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Measurement units for the connected probe.</Description>
            </Property>
            <Property>
               <Name>Units</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Units;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Units = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionChannelUnitsVolt" Value="AgInfiniiVisionChannelUnitsVolt"/>
                     <Enum Name="AgInfiniiVisionChannelUnitsAmpere" Value="AgInfiniiVisionChannelUnitsAmpere"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Measurement units for the connected probe.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearProtection</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearProtection(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.ClearProtection();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reset the analog channel input impedance to 50 Ohms after clearing the overvoltage protection.</Description>
            </Method>
            <Method>
               <Name>ClearProtection</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearProtection(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.ClearProtection();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reset the analog channel input impedance to 50 Ohms after clearing the overvoltage protection.</Description>
            </Method>
            <Method>
               <Name>Configure</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Range, Offset, Coupling, ProbeAttenuation, Enabled)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Range), double(Offset), Coupling, double(ProbeAttenuation), logical(Enabled));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the range, offset, coupling, probe attenuation, and channel enabled state of the oscilloscope.</Description>
            </Method>
            <Method>
               <Name>Configure</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Range, Offset, Coupling, ProbeAttenuation, Enabled)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Range), double(Offset), Coupling, double(ProbeAttenuation), logical(Enabled));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the range, offset, coupling, probe attenuation, and channel enabled state of the oscilloscope.</Description>
            </Method>
            <Method>
               <Name>ConfigureCharacteristics</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureCharacteristics(obj, InputImpedance, InputFrequencyMax)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureCharacteristics(double(InputImpedance), double(InputFrequencyMax));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the input impedance and the maximum frequency of the input signal which control the electrical characteristics of the channel.</Description>
            </Method>
            <Method>
               <Name>ConfigureCharacteristics</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureCharacteristics(obj, InputImpedance, InputFrequencyMax)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureCharacteristics(double(InputImpedance), double(InputFrequencyMax));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the input impedance and the maximum frequency of the input signal which control the electrical characteristics of the channel.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Channels</Name>
         <Description>IAgInfiniiVisionChannels Interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channels1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Channels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the number of Channels.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>Channels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionChannel interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>Channels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Read Only - Returns the Channel name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ClockRecovery</Name>
         <Description>IAgInfiniiVision4ClockRecovery interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ClockRecovery1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DisplayEnabled</Name>
               <Location>ClockRecovery</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ClockRecovery;
	propertyValue = comobj.DisplayEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ClockRecovery;
	comobj.DisplayEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable the display of the recovered clock.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>GetMethod</Name>
               <Location>ClockRecovery</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ClockMethod, DataRate, LoopBandwidth, DampingFactor, Source, Slope, Multiplier] = GetMethod(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ClockRecovery;
feature('COM_SafeArraySingleDim',1);
[ClockMethod, DataRate, LoopBandwidth, DampingFactor, Source, Slope, Multiplier] = comobj.GetMethod(0, 0, 0, 0, '', 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the currently selected clock recovery method.</Description>
            </Method>
            <Method>
               <Name>SetMethod</Name>
               <Location>ClockRecovery</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetMethod(obj, ClockMethod, DataRate, LoopBandwidth, DampingFactor, Source, Slope, Multiplier)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ClockRecovery;
feature('COM_SafeArraySingleDim',1);
comobj.SetMethod(ClockMethod, double(DataRate), double(LoopBandwidth), double(DampingFactor), Source, Slope, int32(Multiplier));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the clock recovery method.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Counter</Name>
         <Description>IAgInfiniiVision4Counter interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Counter1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Current</Name>
               <Location>Counter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	propertyValue = comobj.Current;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - the current counter value.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>Counter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the counter feature.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Counter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionCounterModeFrequency" Value="AgInfiniiVisionCounterModeFrequency"/>
                     <Enum Name="AgInfiniiVisionCounterModePeriod" Value="AgInfiniiVisionCounterModePeriod"/>
                     <Enum Name="AgInfiniiVisionCounterModeTotalize" Value="AgInfiniiVisionCounterModeTotalize"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The counter mode.</Description>
            </Property>
            <Property>
               <Name>NumberOfDigits</Name>
               <Location>Counter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	propertyValue = comobj.NumberOfDigits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	comobj.NumberOfDigits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of digits of resolution used for the frequency or period counter.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Counter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The waveform source that the counter measures.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Counter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Mode, NumberOfDigits, Source, TotalizeSlope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Counter;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Mode, int32(NumberOfDigits), Source, TotalizeSlope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method sets the Counter mode, source and Number of digits of resolution.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>CounterTotalizer</Name>
         <Description>IAgInfiniiVision4CounterTotalizer interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="CounterTotalizer1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>CounterTotalizer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	comobj = comobj.Totalizer;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	comobj = comobj.Totalizer;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionCounterTotalizerPolarityNegative" Value="AgInfiniiVisionCounterTotalizerPolarityNegative"/>
                     <Enum Name="AgInfiniiVisionCounterTotalizerPolarityPositive" Value="AgInfiniiVisionCounterTotalizerPolarityPositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether positive or negative edges are counted.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Clear</Name>
               <Location>CounterTotalizer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Counter;
comobj = comobj.Totalizer;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Zeros the edge event counter.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>CounterTotalizerGating</Name>
         <Description>IAgInfiniiVision4CounterTotalizerGating interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="CounterTotalizerGating1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>CounterTotalizerGating</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	comobj = comobj.Totalizer;
	comobj = comobj.Gating;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	comobj = comobj.Totalizer;
	comobj = comobj.Gating;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables totalizer gating.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>CounterTotalizerGating</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	comobj = comobj.Totalizer;
	comobj = comobj.Gating;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	comobj = comobj.Totalizer;
	comobj = comobj.Gating;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionCounterTotalizerPolarityNegative" Value="AgInfiniiVisionCounterTotalizerPolarityNegative"/>
                     <Enum Name="AgInfiniiVisionCounterTotalizerPolarityPositive" Value="AgInfiniiVisionCounterTotalizerPolarityPositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The gating signal condition under which totalizer edges are counted.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>CounterTotalizerGating</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	comobj = comobj.Totalizer;
	comobj = comobj.Gating;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Counter;
	comobj = comobj.Totalizer;
	comobj = comobj.Gating;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The analog channel that has the totalizer gating signal.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>CounterTotalizerGating</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Polarity, Source)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Counter;
comobj = comobj.Totalizer;
comobj = comobj.Gating;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Polarity, Source);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method sets the totalize gated source and polarity.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Cursors</Name>
         <Description>IAgInfiniiVisionCursors interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Cursors1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Mode</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionCursorsModeOff" Value="AgInfiniiVisionCursorsModeOff"/>
                     <Enum Name="AgInfiniiVisionCursorsModeMeasurement" Value="AgInfiniiVisionCursorsModeMeasurement"/>
                     <Enum Name="AgInfiniiVisionCursorsModeManual" Value="AgInfiniiVisionCursorsModeManual"/>
                     <Enum Name="AgInfiniiVisionCursorsModeWaveform" Value="AgInfiniiVisionCursorsModeWaveform"/>
                     <Enum Name="AgInfiniiVisionCursorsModeBinary" Value="AgInfiniiVisionCursorsModeBinary"/>
                     <Enum Name="AgInfiniiVisionCursorsModeHexadecimal" Value="AgInfiniiVisionCursorsModeHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The cursors mode.</Description>
            </Property>
            <Property>
               <Name>X1Position</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.X1Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.X1Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the X1 cursor position.</Description>
            </Property>
            <Property>
               <Name>X1Y1Source</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.X1Y1Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.X1Y1Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source for the cursors. The channel you specify must be enabled for cursors to be displayed.</Description>
            </Property>
            <Property>
               <Name>X2Position</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.X2Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.X2Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the X2 cursor position.</Description>
            </Property>
            <Property>
               <Name>X2Y2Source</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.X2Y2Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.X2Y2Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source for the cursors. The channel you specify must be enabled for cursors to be displayed.</Description>
            </Property>
            <Property>
               <Name>XDelta</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.XDelta;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The value difference between the current X1 and X2 cursor positions.</Description>
            </Property>
            <Property>
               <Name>Y1Position</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.Y1Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.Y1Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Y1 cursor position.</Description>
            </Property>
            <Property>
               <Name>Y2Position</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.Y2Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.Y2Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Y2 cursor position.</Description>
            </Property>
            <Property>
               <Name>YDelta</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.YDelta;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The value difference between the current Y1 and Y2 cursor positions.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Cursors2</Name>
         <Description>IAgInfiniiVisionCursors2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Cursors21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Mode</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionCursorsModeOff" Value="AgInfiniiVisionCursorsModeOff"/>
                     <Enum Name="AgInfiniiVisionCursorsModeMeasurement" Value="AgInfiniiVisionCursorsModeMeasurement"/>
                     <Enum Name="AgInfiniiVisionCursorsModeManual" Value="AgInfiniiVisionCursorsModeManual"/>
                     <Enum Name="AgInfiniiVisionCursorsModeWaveform" Value="AgInfiniiVisionCursorsModeWaveform"/>
                     <Enum Name="AgInfiniiVisionCursorsModeBinary" Value="AgInfiniiVisionCursorsModeBinary"/>
                     <Enum Name="AgInfiniiVisionCursorsModeHexadecimal" Value="AgInfiniiVisionCursorsModeHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The cursors mode.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionCursorsModeOff" Value="AgInfiniiVisionCursorsModeOff"/>
                     <Enum Name="AgInfiniiVisionCursorsModeMeasurement" Value="AgInfiniiVisionCursorsModeMeasurement"/>
                     <Enum Name="AgInfiniiVisionCursorsModeManual" Value="AgInfiniiVisionCursorsModeManual"/>
                     <Enum Name="AgInfiniiVisionCursorsModeWaveform" Value="AgInfiniiVisionCursorsModeWaveform"/>
                     <Enum Name="AgInfiniiVisionCursorsModeBinary" Value="AgInfiniiVisionCursorsModeBinary"/>
                     <Enum Name="AgInfiniiVisionCursorsModeHexadecimal" Value="AgInfiniiVisionCursorsModeHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The cursors mode.</Description>
            </Property>
            <Property>
               <Name>X1Position</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.X1Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.X1Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the X1 cursor position.</Description>
            </Property>
            <Property>
               <Name>X1Position</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.X1Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.X1Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the X1 cursor position.</Description>
            </Property>
            <Property>
               <Name>X1Y1Source</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.X1Y1Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.X1Y1Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source for the cursors. The channel you specify must be enabled for cursors to be displayed.</Description>
            </Property>
            <Property>
               <Name>X1Y1Source</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.X1Y1Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.X1Y1Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source for the cursors. The channel you specify must be enabled for cursors to be displayed.</Description>
            </Property>
            <Property>
               <Name>X2Position</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.X2Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.X2Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the X2 cursor position.</Description>
            </Property>
            <Property>
               <Name>X2Position</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.X2Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.X2Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the X2 cursor position.</Description>
            </Property>
            <Property>
               <Name>X2Y2Source</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.X2Y2Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.X2Y2Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source for the cursors. The channel you specify must be enabled for cursors to be displayed.</Description>
            </Property>
            <Property>
               <Name>X2Y2Source</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.X2Y2Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.X2Y2Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source for the cursors. The channel you specify must be enabled for cursors to be displayed.</Description>
            </Property>
            <Property>
               <Name>XDelta</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.XDelta;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The value difference between the current X1 and X2 cursor positions.</Description>
            </Property>
            <Property>
               <Name>XDelta</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.XDelta;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The value difference between the current X1 and X2 cursor positions.</Description>
            </Property>
            <Property>
               <Name>XUnits</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.XUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.XUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionCursorsXUnitsSeconds" Value="AgInfiniiVisionCursorsXUnitsSeconds"/>
                     <Enum Name="AgInfiniiVisionCursorsXUnitsHz" Value="AgInfiniiVisionCursorsXUnitsHz"/>
                     <Enum Name="AgInfiniiVisionCursorsXUnitsDegrees" Value="AgInfiniiVisionCursorsXUnitsDegrees"/>
                     <Enum Name="AgInfiniiVisionCursorsXUnitsPercent" Value="AgInfiniiVisionCursorsXUnitsPercent"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The X cursors units.</Description>
            </Property>
            <Property>
               <Name>Y1Position</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.Y1Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.Y1Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Y1 cursor position.</Description>
            </Property>
            <Property>
               <Name>Y1Position</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.Y1Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.Y1Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Y1 cursor position.</Description>
            </Property>
            <Property>
               <Name>Y2Position</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.Y2Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.Y2Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Y2 cursor position.</Description>
            </Property>
            <Property>
               <Name>Y2Position</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.Y2Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.Y2Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Y2 cursor position.</Description>
            </Property>
            <Property>
               <Name>YDelta</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.YDelta;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The value difference between the current Y1 and Y2 cursor positions.</Description>
            </Property>
            <Property>
               <Name>YDelta</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.YDelta;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The value difference between the current Y1 and Y2 cursor positions.</Description>
            </Property>
            <Property>
               <Name>YUnits</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	propertyValue = comobj.YUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors2;
	comobj.YUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionCursorsYUnitsBase" Value="AgInfiniiVisionCursorsYUnitsBase"/>
                     <Enum Name="AgInfiniiVisionCursorsYUnitsPercent" Value="AgInfiniiVisionCursorsYUnitsPercent"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The Y cursors units.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>UseCursorPosition</Name>
               <Location>Cursors2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function UseCursorPosition(obj, CursorsType)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Cursors2;
feature('COM_SafeArraySingleDim',1);
comobj.UseCursorPosition(CursorsType);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets X1Position to 0 and X2Position to 100 if the XUnits property is set to Percent, sets X1Position to 0 and X2Position to 360 if the XUnits property is set to Degrees.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>DigitalChannel</Name>
         <Description>IAgInfiniiVisionDigitalChannel interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DigitalChannel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the specified digital channel.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the specified digital channel.</Description>
            </Property>
            <Property>
               <Name>Label</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Label;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Label = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables analog and digital channel labels.</Description>
            </Property>
            <Property>
               <Name>Label</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Label;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Label = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables analog and digital channel labels.</Description>
            </Property>
            <Property>
               <Name>Position</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The position of the specified channel.</Description>
            </Property>
            <Property>
               <Name>Position</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Position;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The position of the specified channel.</Description>
            </Property>
            <Property>
               <Name>Size</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Size;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Size = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDigitalChannelSizeSmall" Value="AgInfiniiVisionDigitalChannelSizeSmall"/>
                     <Enum Name="AgInfiniiVisionDigitalChannelSizeLarge" Value="AgInfiniiVisionDigitalChannelSizeLarge"/>
                     <Enum Name="AgInfiniiVisionDigitalChannelSizeMedium" Value="AgInfiniiVisionDigitalChannelSizeMedium"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Size of digital channels on the display.</Description>
            </Property>
            <Property>
               <Name>Size</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Size;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Size = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDigitalChannelSizeSmall" Value="AgInfiniiVisionDigitalChannelSizeSmall"/>
                     <Enum Name="AgInfiniiVisionDigitalChannelSizeLarge" Value="AgInfiniiVisionDigitalChannelSizeLarge"/>
                     <Enum Name="AgInfiniiVisionDigitalChannelSizeMedium" Value="AgInfiniiVisionDigitalChannelSizeMedium"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Size of digital channels on the display.</Description>
            </Property>
            <Property>
               <Name>Threshold</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Threshold;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Threshold = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Logic threshold value for all channels in the same pod as the specified channel. The threshold is used for triggering purposes and for displaying the digital data as high(above the threshold) or low (below the threshold).</Description>
            </Property>
            <Property>
               <Name>Threshold</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Threshold;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Threshold = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Logic threshold value for all channels in the same pod as the specified channel. The threshold is used for triggering purposes and for displaying the digital data as high(above the threshold) or low (below the threshold).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>FetchDigitalWaveform</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = FetchDigitalWaveform(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.FetchDigitalWaveform(uint8([0;0]), 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the waveform for the pod (Digital channels 0-7 or 8-15) containing the specified digital channel.</Description>
            </Method>
            <Method>
               <Name>FetchDigitalWaveform</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = FetchDigitalWaveform(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.FetchDigitalWaveform(uint8([0;0]), 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the waveform for the pod (Digital channels 0-7 or 8-15) containing the specified digital channel.</Description>
            </Method>
            <Method>
               <Name>ReadDigitalWaveform</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = ReadDigitalWaveform(obj, MaxTime, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.ReadDigitalWaveform(uint8([0;0]), 0, 0, int32(MaxTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Acquires and returns the waveform for the pod (digital channels 0-7 or 8-15) containing the specified digital channel.</Description>
            </Method>
            <Method>
               <Name>ReadDigitalWaveform</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = ReadDigitalWaveform(obj, MaxTime, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.ReadDigitalWaveform(uint8([0;0]), 0, 0, int32(MaxTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Acquires and returns the waveform for the pod (digital channels 0-7 or 8-15) containing the specified digital channel.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>DigitalChannels</Name>
         <Description>IAgInfiniiVisionDigitalChannels interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DigitalChannels1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>DigitalChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the number of digitalchannels.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>DigitalChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionDigitalChannel interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>DigitalChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Read Only - Returns the digitalchannel name for a given index.</Description>
            </Method>
            <Method>
               <Name>ReadActivity</Name>
               <Location>DigitalChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Edge, Level] = ReadActivity(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
feature('COM_SafeArraySingleDim',1);
[Edge, Level] = comobj.ReadActivity(0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads digital channel activity into the edges and levels parameters. Levels: are current logic levels. Edges: are active edges since the last ResetActivity() call. In the values read, bit 0 is for digital channel 0, and bit 15 is for digital channel 15.</Description>
            </Method>
            <Method>
               <Name>ResetActivity</Name>
               <Location>DigitalChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetActivity(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
feature('COM_SafeArraySingleDim',1);
comobj.ResetActivity();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the logic activity registers of the oscilloscope.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>DigitalChannelsBus</Name>
         <Description>IAgInfiniiVisionDigitalChannelsBus interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DigitalChannelsBus1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>Clear</Name>
               <Location>DigitalChannelsBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj, BusType)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
comobj = comobj.Bus;
feature('COM_SafeArraySingleDim',1);
comobj.Clear(int16(BusType));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Excludes all of the digital channels from the selected bus definition.</Description>
            </Method>
            <Method>
               <Name>Enable</Name>
               <Location>DigitalChannelsBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Enable(obj, BusType, ViewState)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
comobj = comobj.Bus;
feature('COM_SafeArraySingleDim',1);
comobj.Enable(int16(BusType), logical(ViewState));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Display the selected bus.</Description>
            </Method>
            <Method>
               <Name>GetChannelBit</Name>
               <Location>DigitalChannelsBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetChannelBit(obj, BusType)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
comobj = comobj.Bus;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetChannelBit(int16(BusType));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the definition for the specified bus.</Description>
            </Method>
            <Method>
               <Name>GetLabel</Name>
               <Location>DigitalChannelsBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetLabel(obj, BusType)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
comobj = comobj.Bus;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetLabel(int16(BusType));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the label of the specified bus.</Description>
            </Method>
            <Method>
               <Name>GetMaskBit</Name>
               <Location>DigitalChannelsBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetMaskBit(obj, BusType)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
comobj = comobj.Bus;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetMaskBit(int16(BusType));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the mask value for the specified bus.</Description>
            </Method>
            <Method>
               <Name>IsDigitalBitEnabled</Name>
               <Location>DigitalChannelsBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = IsDigitalBitEnabled(obj, BusType, DigtalBits)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
comobj = comobj.Bus;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.IsDigitalBitEnabled(int16(BusType), int16(DigtalBits));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the flag indicating whether the specified bit is included or excluded from the specified bus definition.</Description>
            </Method>
            <Method>
               <Name>IsEnabled</Name>
               <Location>DigitalChannelsBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = IsEnabled(obj, BusType)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
comobj = comobj.Bus;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.IsEnabled(int16(BusType));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the flag indicating whether the specified bus is enabled or disabled.</Description>
            </Method>
            <Method>
               <Name>SetChannelBit</Name>
               <Location>DigitalChannelsBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetChannelBit(obj, BusType, ChannelList, BitState)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
comobj = comobj.Bus;
feature('COM_SafeArraySingleDim',1);
comobj.SetChannelBit(int16(BusType), ChannelList, logical(BitState));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Includes/Excludes the selected bits in the channel list in the definition of the selected bus.</Description>
            </Method>
            <Method>
               <Name>SetDigitalBit</Name>
               <Location>DigitalChannelsBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDigitalBit(obj, BusType, DigitalBits, BitState)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
comobj = comobj.Bus;
feature('COM_SafeArraySingleDim',1);
comobj.SetDigitalBit(int16(BusType), int16(DigitalBits), logical(BitState));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Includes/Excludes the selected bit as part of the definition for the selected bus.</Description>
            </Method>
            <Method>
               <Name>SetLabel</Name>
               <Location>DigitalChannelsBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetLabel(obj, BusType, Label)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
comobj = comobj.Bus;
feature('COM_SafeArraySingleDim',1);
comobj.SetLabel(int16(BusType), Label);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>The bus label.</Description>
            </Method>
            <Method>
               <Name>SetMaskBit</Name>
               <Location>DigitalChannelsBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetMaskBit(obj, BusType, MaskBits)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
comobj = comobj.Bus;
feature('COM_SafeArraySingleDim',1);
comobj.SetMaskBit(int16(BusType), MaskBits);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Bits to be included and excluded in the selected bus according to the mask.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Display</Name>
         <Description>IAgInfiniiVisionDisplay interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>LabelEnabled</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	propertyValue = comobj.LabelEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	comobj.LabelEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/Disables the analog and digital channel labels.</Description>
            </Property>
            <Property>
               <Name>Persistence</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	propertyValue = comobj.Persistence;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	comobj.Persistence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeMinimum" Value="AgInfiniiVisionDisplayPersistenceModeMinimum"/>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeInfinite" Value="AgInfiniiVisionDisplayPersistenceModeInfinite"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables infinite-persistence mode of the oscilloscope display.</Description>
            </Property>
            <Property>
               <Name>PersistenceTime</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	propertyValue = comobj.PersistenceTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	comobj.PersistenceTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Persistence time to specify how long acquisitions remain on the screen. Permissible Values are from 100E-3 to 60E0.</Description>
            </Property>
            <Property>
               <Name>VectorEnabled</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	propertyValue = comobj.VectorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	comobj.VectorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the lines drawn between acquired data points on the screen.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Erase</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Erase(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display;
feature('COM_SafeArraySingleDim',1);
comobj.Erase();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the display and resets all associated measurements. If the oscilloscope is stopped, all currently displayed data is erased else all of the data for active channels and functions is erased.</Description>
            </Method>
            <Method>
               <Name>GetScreenBitmap</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetScreenBitmap(obj, ImageFormat, Palette)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetScreenBitmap(ImageFormat, Palette);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads screen image data</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Display2</Name>
         <Description>IAgInfiniiVisionDisplay2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>InvertColorEnabled</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	propertyValue = comobj.InvertColorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	comobj.InvertColorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the graticule colors are inverted or not.</Description>
            </Property>
            <Property>
               <Name>LabelEnabled</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	propertyValue = comobj.LabelEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	comobj.LabelEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/Disables the analog and digital channel labels.</Description>
            </Property>
            <Property>
               <Name>LabelEnabled</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	propertyValue = comobj.LabelEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	comobj.LabelEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/Disables the analog and digital channel labels.</Description>
            </Property>
            <Property>
               <Name>Persistence</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	propertyValue = comobj.Persistence;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	comobj.Persistence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeMinimum" Value="AgInfiniiVisionDisplayPersistenceModeMinimum"/>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeInfinite" Value="AgInfiniiVisionDisplayPersistenceModeInfinite"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables infinite-persistence mode of the oscilloscope display.</Description>
            </Property>
            <Property>
               <Name>Persistence</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	propertyValue = comobj.Persistence;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	comobj.Persistence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeMinimum" Value="AgInfiniiVisionDisplayPersistenceModeMinimum"/>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeInfinite" Value="AgInfiniiVisionDisplayPersistenceModeInfinite"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables infinite-persistence mode of the oscilloscope display.</Description>
            </Property>
            <Property>
               <Name>PersistenceTime</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	propertyValue = comobj.PersistenceTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	comobj.PersistenceTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Persistence time to specify how long acquisitions remain on the screen. Permissible Values are from 100E-3 to 60E0.</Description>
            </Property>
            <Property>
               <Name>PersistenceTime</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	propertyValue = comobj.PersistenceTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	comobj.PersistenceTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Persistence time to specify how long acquisitions remain on the screen. Permissible Values are from 100E-3 to 60E0.</Description>
            </Property>
            <Property>
               <Name>VectorEnabled</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	propertyValue = comobj.VectorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	comobj.VectorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the lines drawn between acquired data points on the screen.</Description>
            </Property>
            <Property>
               <Name>VectorEnabled</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	propertyValue = comobj.VectorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display2;
	comobj.VectorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the lines drawn between acquired data points on the screen.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Erase</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Erase(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display2;
feature('COM_SafeArraySingleDim',1);
comobj.Erase();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the display and resets all associated measurements. If the oscilloscope is stopped, all currently displayed data is erased else all of the data for active channels and functions is erased.</Description>
            </Method>
            <Method>
               <Name>Erase</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Erase(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display2;
feature('COM_SafeArraySingleDim',1);
comobj.Erase();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the display and resets all associated measurements. If the oscilloscope is stopped, all currently displayed data is erased else all of the data for active channels and functions is erased.</Description>
            </Method>
            <Method>
               <Name>GetScreenBitmap</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetScreenBitmap(obj, ImageFormat, Palette)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetScreenBitmap(ImageFormat, Palette);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads screen image data</Description>
            </Method>
            <Method>
               <Name>GetScreenBitmap</Name>
               <Location>Display2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetScreenBitmap(obj, ImageFormat, Palette)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetScreenBitmap(ImageFormat, Palette);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads screen image data</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Display3</Name>
         <Description>IAgInfiniiVisionDisplay3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display31" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>InvertColorEnabled</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	propertyValue = comobj.InvertColorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj.InvertColorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the graticule colors are inverted or not.</Description>
            </Property>
            <Property>
               <Name>InvertColorEnabled</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	propertyValue = comobj.InvertColorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj.InvertColorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the graticule colors are inverted or not.</Description>
            </Property>
            <Property>
               <Name>LabelEnabled</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	propertyValue = comobj.LabelEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj.LabelEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/Disables the analog and digital channel labels.</Description>
            </Property>
            <Property>
               <Name>LabelEnabled</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	propertyValue = comobj.LabelEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj.LabelEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/Disables the analog and digital channel labels.</Description>
            </Property>
            <Property>
               <Name>Persistence</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	propertyValue = comobj.Persistence;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj.Persistence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeMinimum" Value="AgInfiniiVisionDisplayPersistenceModeMinimum"/>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeInfinite" Value="AgInfiniiVisionDisplayPersistenceModeInfinite"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables infinite-persistence mode of the oscilloscope display.</Description>
            </Property>
            <Property>
               <Name>Persistence</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	propertyValue = comobj.Persistence;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj.Persistence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeMinimum" Value="AgInfiniiVisionDisplayPersistenceModeMinimum"/>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeInfinite" Value="AgInfiniiVisionDisplayPersistenceModeInfinite"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables infinite-persistence mode of the oscilloscope display.</Description>
            </Property>
            <Property>
               <Name>PersistenceTime</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	propertyValue = comobj.PersistenceTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj.PersistenceTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Persistence time to specify how long acquisitions remain on the screen. Permissible Values are from 100E-3 to 60E0.</Description>
            </Property>
            <Property>
               <Name>PersistenceTime</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	propertyValue = comobj.PersistenceTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj.PersistenceTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Persistence time to specify how long acquisitions remain on the screen. Permissible Values are from 100E-3 to 60E0.</Description>
            </Property>
            <Property>
               <Name>VectorEnabled</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	propertyValue = comobj.VectorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj.VectorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the lines drawn between acquired data points on the screen.</Description>
            </Property>
            <Property>
               <Name>VectorEnabled</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	propertyValue = comobj.VectorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj.VectorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the lines drawn between acquired data points on the screen.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Erase</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Erase(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display3;
feature('COM_SafeArraySingleDim',1);
comobj.Erase();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the display and resets all associated measurements. If the oscilloscope is stopped, all currently displayed data is erased else all of the data for active channels and functions is erased.</Description>
            </Method>
            <Method>
               <Name>Erase</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Erase(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display3;
feature('COM_SafeArraySingleDim',1);
comobj.Erase();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the display and resets all associated measurements. If the oscilloscope is stopped, all currently displayed data is erased else all of the data for active channels and functions is erased.</Description>
            </Method>
            <Method>
               <Name>GetScreenBitmap</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetScreenBitmap(obj, ImageFormat, Palette)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display3;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetScreenBitmap(ImageFormat, Palette);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads screen image data</Description>
            </Method>
            <Method>
               <Name>GetScreenBitmap</Name>
               <Location>Display3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetScreenBitmap(obj, ImageFormat, Palette)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display3;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetScreenBitmap(ImageFormat, Palette);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads screen image data</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Display3Annotation</Name>
         <Description>IAgInfiniiVisionDisplay3Annotation interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display3Annotation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Background</Name>
               <Location>Display3Annotation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj = comobj.Annotation;
	propertyValue = comobj.Background;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj = comobj.Annotation;
	comobj.Background = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationBackgroundOpaque" Value="AgInfiniiVisionDisplayAnnotationBackgroundOpaque"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationBackgroundInverted" Value="AgInfiniiVisionDisplayAnnotationBackgroundInverted"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationBackgroundTransparent" Value="AgInfiniiVisionDisplayAnnotationBackgroundTransparent"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the background of the annotation.</Description>
            </Property>
            <Property>
               <Name>Color</Name>
               <Location>Display3Annotation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj = comobj.Annotation;
	propertyValue = comobj.Color;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj = comobj.Annotation;
	comobj.Color = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorChannel1" Value="AgInfiniiVisionDisplayAnnotationColorChannel1"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorChannel2" Value="AgInfiniiVisionDisplayAnnotationColorChannel2"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorChannel3" Value="AgInfiniiVisionDisplayAnnotationColorChannel3"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorChannel4" Value="AgInfiniiVisionDisplayAnnotationColorChannel4"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorDigitalChannel" Value="AgInfiniiVisionDisplayAnnotationColorDigitalChannel"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorMathWaveform" Value="AgInfiniiVisionDisplayAnnotationColorMathWaveform"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorReferenceWaveform" Value="AgInfiniiVisionDisplayAnnotationColorReferenceWaveform"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorMarkers" Value="AgInfiniiVisionDisplayAnnotationColorMarkers"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorWhite" Value="AgInfiniiVisionDisplayAnnotationColorWhite"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorRed" Value="AgInfiniiVisionDisplayAnnotationColorRed"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the annotation color.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>Display3Annotation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj = comobj.Annotation;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj = comobj.Annotation;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the annotation.</Description>
            </Property>
            <Property>
               <Name>Text</Name>
               <Location>Display3Annotation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj = comobj.Annotation;
	propertyValue = comobj.Text;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display3;
	comobj = comobj.Annotation;
	comobj.Text = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the annotation string.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Display4</Name>
         <Description>IAgInfiniiVisionDisplay4 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display41" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>InvertColorEnabled</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	propertyValue = comobj.InvertColorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj.InvertColorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the graticule colors are inverted or not.</Description>
            </Property>
            <Property>
               <Name>InvertColorEnabled</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	propertyValue = comobj.InvertColorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj.InvertColorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the graticule colors are inverted or not.</Description>
            </Property>
            <Property>
               <Name>LabelEnabled</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	propertyValue = comobj.LabelEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj.LabelEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/Disables the analog and digital channel labels.</Description>
            </Property>
            <Property>
               <Name>LabelEnabled</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	propertyValue = comobj.LabelEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj.LabelEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/Disables the analog and digital channel labels.</Description>
            </Property>
            <Property>
               <Name>Persistence</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	propertyValue = comobj.Persistence;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj.Persistence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeMinimum" Value="AgInfiniiVisionDisplayPersistenceModeMinimum"/>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeInfinite" Value="AgInfiniiVisionDisplayPersistenceModeInfinite"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables infinite-persistence mode of the oscilloscope display.</Description>
            </Property>
            <Property>
               <Name>Persistence</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	propertyValue = comobj.Persistence;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj.Persistence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeMinimum" Value="AgInfiniiVisionDisplayPersistenceModeMinimum"/>
                     <Enum Name="AgInfiniiVisionDisplayPersistenceModeInfinite" Value="AgInfiniiVisionDisplayPersistenceModeInfinite"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables infinite-persistence mode of the oscilloscope display.</Description>
            </Property>
            <Property>
               <Name>PersistenceTime</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	propertyValue = comobj.PersistenceTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj.PersistenceTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Persistence time to specify how long acquisitions remain on the screen. Permissible Values are from 100E-3 to 60E0.</Description>
            </Property>
            <Property>
               <Name>PersistenceTime</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	propertyValue = comobj.PersistenceTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj.PersistenceTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Persistence time to specify how long acquisitions remain on the screen. Permissible Values are from 100E-3 to 60E0.</Description>
            </Property>
            <Property>
               <Name>VectorEnabled</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	propertyValue = comobj.VectorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj.VectorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the lines drawn between acquired data points on the screen.</Description>
            </Property>
            <Property>
               <Name>VectorEnabled</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	propertyValue = comobj.VectorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj.VectorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the lines drawn between acquired data points on the screen.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Erase</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Erase(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
feature('COM_SafeArraySingleDim',1);
comobj.Erase();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the display and resets all associated measurements. If the oscilloscope is stopped, all currently displayed data is erased else all of the data for active channels and functions is erased.</Description>
            </Method>
            <Method>
               <Name>Erase</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Erase(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
feature('COM_SafeArraySingleDim',1);
comobj.Erase();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the display and resets all associated measurements. If the oscilloscope is stopped, all currently displayed data is erased else all of the data for active channels and functions is erased.</Description>
            </Method>
            <Method>
               <Name>GetScreenBitmap</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetScreenBitmap(obj, ImageFormat, Palette)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetScreenBitmap(ImageFormat, Palette);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads screen image data</Description>
            </Method>
            <Method>
               <Name>GetScreenBitmap</Name>
               <Location>Display4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetScreenBitmap(obj, ImageFormat, Palette)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetScreenBitmap(ImageFormat, Palette);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads screen image data</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Display4Annotation2</Name>
         <Description>IAgInfiniiVisionDisplay4Annotation2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display4Annotation21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Background</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	propertyValue = comobj.Background;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	comobj.Background = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationBackgroundOpaque" Value="AgInfiniiVisionDisplayAnnotationBackgroundOpaque"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationBackgroundInverted" Value="AgInfiniiVisionDisplayAnnotationBackgroundInverted"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationBackgroundTransparent" Value="AgInfiniiVisionDisplayAnnotationBackgroundTransparent"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the background of the annotation.</Description>
            </Property>
            <Property>
               <Name>Background</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	propertyValue = comobj.Background;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	comobj.Background = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationBackgroundOpaque" Value="AgInfiniiVisionDisplayAnnotationBackgroundOpaque"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationBackgroundInverted" Value="AgInfiniiVisionDisplayAnnotationBackgroundInverted"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationBackgroundTransparent" Value="AgInfiniiVisionDisplayAnnotationBackgroundTransparent"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the background of the annotation.</Description>
            </Property>
            <Property>
               <Name>Color</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	propertyValue = comobj.Color;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	comobj.Color = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorChannel1" Value="AgInfiniiVisionDisplayAnnotationColorChannel1"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorChannel2" Value="AgInfiniiVisionDisplayAnnotationColorChannel2"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorChannel3" Value="AgInfiniiVisionDisplayAnnotationColorChannel3"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorChannel4" Value="AgInfiniiVisionDisplayAnnotationColorChannel4"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorDigitalChannel" Value="AgInfiniiVisionDisplayAnnotationColorDigitalChannel"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorMathWaveform" Value="AgInfiniiVisionDisplayAnnotationColorMathWaveform"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorReferenceWaveform" Value="AgInfiniiVisionDisplayAnnotationColorReferenceWaveform"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorMarkers" Value="AgInfiniiVisionDisplayAnnotationColorMarkers"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorWhite" Value="AgInfiniiVisionDisplayAnnotationColorWhite"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorRed" Value="AgInfiniiVisionDisplayAnnotationColorRed"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the annotation color.</Description>
            </Property>
            <Property>
               <Name>Color</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	propertyValue = comobj.Color;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	comobj.Color = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorChannel1" Value="AgInfiniiVisionDisplayAnnotationColorChannel1"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorChannel2" Value="AgInfiniiVisionDisplayAnnotationColorChannel2"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorChannel3" Value="AgInfiniiVisionDisplayAnnotationColorChannel3"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorChannel4" Value="AgInfiniiVisionDisplayAnnotationColorChannel4"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorDigitalChannel" Value="AgInfiniiVisionDisplayAnnotationColorDigitalChannel"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorMathWaveform" Value="AgInfiniiVisionDisplayAnnotationColorMathWaveform"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorReferenceWaveform" Value="AgInfiniiVisionDisplayAnnotationColorReferenceWaveform"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorMarkers" Value="AgInfiniiVisionDisplayAnnotationColorMarkers"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorWhite" Value="AgInfiniiVisionDisplayAnnotationColorWhite"/>
                     <Enum Name="AgInfiniiVisionDisplayAnnotationColorRed" Value="AgInfiniiVisionDisplayAnnotationColorRed"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the annotation color.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the annotation.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the annotation.</Description>
            </Property>
            <Property>
               <Name>Text</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	propertyValue = comobj.Text;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	comobj.Text = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the annotation string.</Description>
            </Property>
            <Property>
               <Name>Text</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	propertyValue = comobj.Text;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display4;
	comobj = comobj.Annotation2;
	comobj.Text = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the annotation string.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>GetBackground</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetBackground(obj, Index)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
comobj = comobj.Annotation2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetBackground(int32(Index));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Gets the background of the annotation.</Description>
            </Method>
            <Method>
               <Name>GetColor</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetColor(obj, Index)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
comobj = comobj.Annotation2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetColor(int32(Index));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Gets the annotation color.</Description>
            </Method>
            <Method>
               <Name>GetEnabled</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetEnabled(obj, Index)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
comobj = comobj.Annotation2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetEnabled(int32(Index));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Get the state of annotation.</Description>
            </Method>
            <Method>
               <Name>GetText</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetText(obj, Index)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
comobj = comobj.Annotation2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetText(int32(Index));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Gets the annotation string.</Description>
            </Method>
            <Method>
               <Name>GetX1Position</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetX1Position(obj, Index)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
comobj = comobj.Annotation2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetX1Position(int32(Index));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Gets the annotation's horizontal X1 position.</Description>
            </Method>
            <Method>
               <Name>GetY1Position</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetY1Position(obj, Index)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
comobj = comobj.Annotation2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetY1Position(int32(Index));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Gets the annotation's vertical Y1 position.</Description>
            </Method>
            <Method>
               <Name>SetBackground</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetBackground(obj, Index, Background)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
comobj = comobj.Annotation2;
feature('COM_SafeArraySingleDim',1);
comobj.SetBackground(int32(Index), Background);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the background of the annotation.</Description>
            </Method>
            <Method>
               <Name>SetColor</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetColor(obj, Index, Color)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
comobj = comobj.Annotation2;
feature('COM_SafeArraySingleDim',1);
comobj.SetColor(int32(Index), Color);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the annotation color.</Description>
            </Method>
            <Method>
               <Name>SetEnabled</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetEnabled(obj, Index, Enabled)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
comobj = comobj.Annotation2;
feature('COM_SafeArraySingleDim',1);
comobj.SetEnabled(int32(Index), logical(Enabled));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Enable or disable the annotation.</Description>
            </Method>
            <Method>
               <Name>SetText</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetText(obj, Index, Text)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
comobj = comobj.Annotation2;
feature('COM_SafeArraySingleDim',1);
comobj.SetText(int32(Index), Text);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the annotation string.</Description>
            </Method>
            <Method>
               <Name>SetX1Position</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetX1Position(obj, Index, Position)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
comobj = comobj.Annotation2;
feature('COM_SafeArraySingleDim',1);
comobj.SetX1Position(int32(Index), double(Position));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the annotation's horizontal X1 position.</Description>
            </Method>
            <Method>
               <Name>SetY1Position</Name>
               <Location>Display4Annotation2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetY1Position(obj, Index, Position)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display4;
comobj = comobj.Annotation2;
feature('COM_SafeArraySingleDim',1);
comobj.SetY1Position(int32(Index), double(Position));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the annotation's vertical Y1 position.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>DriverOperation</Name>
         <Description>IVI Driver operation interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DriverOperation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cache</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.Cache;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.Cache = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver caches instrument settings to avoid unnecessary I/O to the instrument.  The actual settings that are cached are driver-specific.</Description>
            </Property>
            <Property>
               <Name>DriverSetup</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.DriverSetup;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The driver setup string.  It is either specified in the Configuration Store or passed in the OptionString parameter of the Initialize function.  Driver setup is empty if the driver is not initialized.</Description>
            </Property>
            <Property>
               <Name>InterchangeCheck</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.InterchangeCheck;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.InterchangeCheck = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver maintains a record of interchangeability warnings.  If the driver does not support interchangeability checking, attempts to set InterchangeCheck to True return an error.</Description>
            </Property>
            <Property>
               <Name>IoResourceDescriptor</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.IoResourceDescriptor;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The resource descriptor specifies the connection to a physical device.  It is either specified in the Configuration Store or passed in the ResourceName parameter of the Initialize function.  It is empty if the driver is not initialized.</Description>
            </Property>
            <Property>
               <Name>LogicalName</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.LogicalName;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Logical Name identifies a driver session in the Configuration Store.  If Logical Name is not empty, the driver was initialized from information in the driver session.  If it is empty, the driver was initialized without using the Configuration Store.</Description>
            </Property>
            <Property>
               <Name>QueryInstrumentStatus</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.QueryInstrumentStatus;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.QueryInstrumentStatus = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver queries the instrument status at the end of each method or property that performs I/O to the instrument.  If an error is reported, use ErrorQuery to retrieve error messages one at a time from the instrument.</Description>
            </Property>
            <Property>
               <Name>RangeCheck</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.RangeCheck;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.RangeCheck = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver validates property and parameter values to avoid invalid commands to the instrument.  The extent of the validation is driver-specific.</Description>
            </Property>
            <Property>
               <Name>RecordCoercions</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.RecordCoercions;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.RecordCoercions = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver keeps a list of the value coercions it makes for ViInt32 and ViReal64 attributes.  If the driver does not support coercion recording, attempts to set RecordCoercions to True will return an error.</Description>
            </Property>
            <Property>
               <Name>Simulate</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.Simulate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.Simulate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver does not perform I/O to the instrument, and returns simulated values for output parameters.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearInterchangeWarnings</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearInterchangeWarnings(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
comobj.ClearInterchangeWarnings();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the list of interchangeability warnings that the IVI specific driver maintains.</Description>
            </Method>
            <Method>
               <Name>GetNextCoercionRecord</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CoercionRecord] = GetNextCoercionRecord(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
[CoercionRecord] = comobj.GetNextCoercionRecord();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the oldest record from the coercion record list.  Records are only added to the list if RecordCoercions is True.</Description>
            </Method>
            <Method>
               <Name>GetNextInterchangeWarning</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [InterchangeWarning] = GetNextInterchangeWarning(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
[InterchangeWarning] = comobj.GetNextInterchangeWarning();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the oldest warning from the interchange warning list.  Records are only added to the list if InterchangeCheck is True.</Description>
            </Method>
            <Method>
               <Name>InvalidateAllAttributes</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function InvalidateAllAttributes(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
comobj.InvalidateAllAttributes();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Invalidates all of the driver's cached values.</Description>
            </Method>
            <Method>
               <Name>ResetInterchangeCheck</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetInterchangeCheck(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
comobj.ResetInterchangeCheck();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Resets the interchangeability checking algorithms of the driver so that methods and properties that executed prior to calling this function have no affect on whether future calls to the driver generate interchangeability warnings.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>DVM</Name>
         <Description>IAgInfiniiVisionDVM interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DVM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AutoRangeEnabled</Name>
               <Location>DVM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DVM;
	propertyValue = comobj.AutoRangeEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DVM;
	comobj.AutoRangeEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the Digital Voltmeter's Auto Range capability.</Description>
            </Property>
            <Property>
               <Name>Current</Name>
               <Location>DVM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DVM;
	propertyValue = comobj.Current;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the displayed 3-digit DVM value based on the current mode.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>DVM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DVM;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DVM;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the Digital Voltmeter (DVM) analysis feature.</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>DVM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DVM;
	propertyValue = comobj.Frequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the displayed 5-digit frequency value that is displayed below the main DVM value.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>DVM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DVM;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DVM;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionDVMModeACRMS" Value="AgInfiniiVisionDVMModeACRMS"/>
                     <Enum Name="AgInfiniiVisionDVMModeDC" Value="AgInfiniiVisionDVMModeDC"/>
                     <Enum Name="AgInfiniiVisionDVMModeDCRMS" Value="AgInfiniiVisionDVMModeDCRMS"/>
                     <Enum Name="AgInfiniiVisionDVMModeFrequency" Value="AgInfiniiVisionDVMModeFrequency"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the digital voltmeter (DVM) mode.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>DVM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DVM;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DVM;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the selected analog channel on which digital voltmeter (DVM) measurements are made.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>External</Name>
         <Description>IAgInfiniiVisionExternal interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="External1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ProbeAttenuation</Name>
               <Location>External</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.External;
	propertyValue = comobj.ProbeAttenuation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.External;
	comobj.ProbeAttenuation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Scaling factor by which the probe attached to the external trigger attenuates the input.</Description>
            </Property>
            <Property>
               <Name>ProbeSense</Name>
               <Location>External</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.External;
	propertyValue = comobj.ProbeSense;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Probe attenuation value that the oscilloscope automatically senses.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>External</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.External;
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.External;
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Full-scale range. If the probe attenuation is changed, the range value is multiplied by the probe attenuation factor.</Description>
            </Property>
            <Property>
               <Name>Units</Name>
               <Location>External</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.External;
	propertyValue = comobj.Units;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.External;
	comobj.Units = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionExternalProbeUnitsVolts" Value="AgInfiniiVisionExternalProbeUnitsVolts"/>
                     <Enum Name="AgInfiniiVisionExternalProbeUnitsAmperes" Value="AgInfiniiVisionExternalProbeUnitsAmperes"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The measurement units for the probe connected to the external trigger input.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>FFT</Name>
         <Description>IAgInfiniiVision5FFT interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="FFT1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AverageCount</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	propertyValue = comobj.AverageCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	comobj.AverageCount = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the number of waveforms to be averaged together.</Description>
            </Property>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the center frequency when FFT (Fast Fourier Transform) is selected.</Description>
            </Property>
            <Property>
               <Name>DisplayMode</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	propertyValue = comobj.DisplayMode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	comobj.DisplayMode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTDisplayModeNormal" Value="AgInfiniiVisionMathFFTDisplayModeNormal"/>
                     <Enum Name="AgInfiniiVisionMathFFTDisplayModeAverage" Value="AgInfiniiVisionMathFFTDisplayModeAverage"/>
                     <Enum Name="AgInfiniiVisionMathFFTDisplayModeMaxHold" Value="AgInfiniiVisionMathFFTDisplayModeMaxHold"/>
                     <Enum Name="AgInfiniiVisionMathFFTDisplayModeMinHold" Value="AgInfiniiVisionMathFFTDisplayModeMinHold"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the FFT waveform display modes.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable the display of the FFT function.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the FFT vertical value represented at center screen.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the full-scale vertical axis for the FFT function.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the source for the FFT function.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the frequency span of the display (left graticule to right graticule) when FFT (Fast Fourier Transform) is selected.</Description>
            </Property>
            <Property>
               <Name>StartFrequency</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	propertyValue = comobj.StartFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	comobj.StartFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the start frequency in the FFT (Fast Fourier Transform) math function's displayed range.</Description>
            </Property>
            <Property>
               <Name>StopFrequency</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	propertyValue = comobj.StopFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	comobj.StopFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the stop frequency in the FFT (Fast Fourier Transform) math function's displayed range.</Description>
            </Property>
            <Property>
               <Name>VerticalUnits</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	propertyValue = comobj.VerticalUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	comobj.VerticalUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsdB" Value="AgInfiniiVisionMathFFTVerticalUnitsdB"/>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsVRMS" Value="AgInfiniiVisionMathFFTVerticalUnitsVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FFT vertical units.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FFT;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Clear</Name>
               <Location>FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.FFT;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the number of evaluated waveforms.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Histogram</Name>
         <Description>IAgInfiniiVision4Histogram interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Histogram1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Axis</Name>
               <Location>Histogram</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	propertyValue = comobj.Axis;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj.Axis = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionHistogramAxisVertical" Value="AgInfiniiVisionHistogramAxisVertical"/>
                     <Enum Name="AgInfiniiVisionHistogramAxisHorizontal" Value="AgInfiniiVisionHistogramAxisHorizontal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The orientation of the histogram.</Description>
            </Property>
            <Property>
               <Name>DisplayEnabled</Name>
               <Location>Histogram</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	propertyValue = comobj.DisplayEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj.DisplayEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable the histogram display.</Description>
            </Property>
            <Property>
               <Name>HistogramType</Name>
               <Location>Histogram</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionHistogramTypeVertical" Value="AgInfiniiVisionHistogramTypeVertical"/>
                     <Enum Name="AgInfiniiVisionHistogramTypeHorizontal" Value="AgInfiniiVisionHistogramTypeHorizontal"/>
                     <Enum Name="AgInfiniiVisionHistogramTypeMeasurement" Value="AgInfiniiVisionHistogramTypeMeasurement"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The histogram type.</Description>
            </Property>
            <Property>
               <Name>Measurement</Name>
               <Location>Histogram</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	propertyValue = comobj.Measurement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj.Measurement = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMeasurementSlotNone" Value="AgInfiniiVisionMeasurementSlotNone"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot1" Value="AgInfiniiVisionMeasurementSlot1"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot2" Value="AgInfiniiVisionMeasurementSlot2"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot3" Value="AgInfiniiVisionMeasurementSlot3"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot4" Value="AgInfiniiVisionMeasurementSlot4"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot5" Value="AgInfiniiVisionMeasurementSlot5"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot6" Value="AgInfiniiVisionMeasurementSlot6"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot7" Value="AgInfiniiVisionMeasurementSlot7"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot8" Value="AgInfiniiVisionMeasurementSlot8"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot9" Value="AgInfiniiVisionMeasurementSlot9"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot10" Value="AgInfiniiVisionMeasurementSlot10"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The measurement to analyze.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Histogram</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionHistogramModeOff" Value="AgInfiniiVisionHistogramModeOff"/>
                     <Enum Name="AgInfiniiVisionHistogramModeWaveform" Value="AgInfiniiVisionHistogramModeWaveform"/>
                     <Enum Name="AgInfiniiVisionHistogramModeMeasurement" Value="AgInfiniiVisionHistogramModeMeasurement"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The type of histogram or disables the histogram analysis feature.</Description>
            </Property>
            <Property>
               <Name>Size</Name>
               <Location>Histogram</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	propertyValue = comobj.Size;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj.Size = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of divisions the histogram bar graph should use.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>GetResult</Name>
               <Location>Histogram</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetResult(obj, ResultType)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Histogram;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetResult(ResultType);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the histogram result of the selected result type.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>Histogram</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Histogram;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Zeros the histogram counters.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>HistogramWindow</Name>
         <Description>IAgInfiniiVision4HistogramWindow interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="HistogramWindow1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Source</Name>
               <Location>HistogramWindow</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj = comobj.Window;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj = comobj.Window;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The waveform that is used as the histogram source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>HistogramWindowLimits</Name>
         <Description>IAgInfiniiVision4HistogramWindowLimits interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="HistogramWindowLimits1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Bottom</Name>
               <Location>HistogramWindowLimits</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj = comobj.Window;
	comobj = comobj.Limits;
	propertyValue = comobj.Bottom;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj = comobj.Window;
	comobj = comobj.Limits;
	comobj.Bottom = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The histogram limits window's bottom boundary.</Description>
            </Property>
            <Property>
               <Name>Left</Name>
               <Location>HistogramWindowLimits</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj = comobj.Window;
	comobj = comobj.Limits;
	propertyValue = comobj.Left;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj = comobj.Window;
	comobj = comobj.Limits;
	comobj.Left = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The histogram limits window's left boundary.</Description>
            </Property>
            <Property>
               <Name>Right</Name>
               <Location>HistogramWindowLimits</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj = comobj.Window;
	comobj = comobj.Limits;
	propertyValue = comobj.Right;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj = comobj.Window;
	comobj = comobj.Limits;
	comobj.Right = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The histogram limits window's right boundary.</Description>
            </Property>
            <Property>
               <Name>Top</Name>
               <Location>HistogramWindowLimits</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj = comobj.Window;
	comobj = comobj.Limits;
	propertyValue = comobj.Top;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Histogram;
	comobj = comobj.Window;
	comobj = comobj.Limits;
	comobj.Top = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The histogram limits window's top boundary.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Identity</Name>
         <Description>IVI Driver driver identity interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Identity1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Description</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Description;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A brief description of the implementing component.  Description is limted to 256 bytes.</Description>
            </Property>
            <Property>
               <Name>Description</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Description;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A brief description of the implementing component.  Description is limted to 256 bytes.</Description>
            </Property>
            <Property>
               <Name>GroupCapabilities</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.GroupCapabilities;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A comma-separated list of the class capability groups implemented by the driver.  Capability group names are documented in the IVI class specifications.  If the driver is not class compliant, the driver returns an empty string.</Description>
            </Property>
            <Property>
               <Name>Identifier</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Identifier;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The case-sensitive unique identifier of the implementing IVI-COM instrument driver.</Description>
            </Property>
            <Property>
               <Name>InstrumentFirmwareRevision</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.InstrumentFirmwareRevision;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The firmware revision reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the firmware revision, a string is returned that explains the condition.</Description>
            </Property>
            <Property>
               <Name>InstrumentManufacturer</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.InstrumentManufacturer;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The name of the manufacturer reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the name of the manufacturer, a string is returned that explains the condition. Manufacturer is limited to 256 bytes</Description>
            </Property>
            <Property>
               <Name>InstrumentModel</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.InstrumentModel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The model number or name reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the model number or name, a string is returned that explains the condition.  Model is limited to 256 bytes</Description>
            </Property>
            <Property>
               <Name>Revision</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Revision;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The revision of the implementing component.  Refer to IVI-3.2, Section 3.1.2.2, for a description of revision syntax and semantics.  Revision is limited to 256 bytes.</Description>
            </Property>
            <Property>
               <Name>Revision</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Revision;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The revision of the implementing component.  Refer to IVI-3.2, Section 3.1.2.2, for a description of revision syntax and semantics.  Revision is limited to 256 bytes.</Description>
            </Property>
            <Property>
               <Name>SpecificationMajorVersion</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.SpecificationMajorVersion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>For IVI class-compliant drivers, the major version number of the instrument class specification.  If the driver is not class compliant, the driver returns zero.</Description>
            </Property>
            <Property>
               <Name>SpecificationMinorVersion</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.SpecificationMinorVersion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>For IVI class-compliant drivers, the minor version number of the instrument class specification.  If the driver is not class compliant, the driver returns zero.</Description>
            </Property>
            <Property>
               <Name>SupportedInstrumentModels</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.SupportedInstrumentModels;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A comma-separated list of instrument models that the IVI specific driver can control.</Description>
            </Property>
            <Property>
               <Name>Vendor</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Vendor;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The name of the vendor that supplies the implementing component.  Vendor is limited to 256 bytes.</Description>
            </Property>
            <Property>
               <Name>Vendor</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Vendor;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The name of the vendor that supplies the implementing component.  Vendor is limited to 256 bytes.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InstrumentStatus</Name>
         <Description>IAgInfiniiVisionStatus interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentStatus1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>SerialPoll</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Status;
	propertyValue = comobj.SerialPoll;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Serial poll the instrument status byte.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Clear</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears all event registers and error queue. The enable registers are unaffected.</Description>
            </Method>
            <Method>
               <Name>ConfigureServiceRequest</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureServiceRequest(obj, Reason)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureServiceRequest(Reason);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears all the enable registers. It then sets the appropriate transition filters and enable registers so when the specified event(s) occur(s) the instrument requests service.</Description>
            </Method>
            <Method>
               <Name>Preset</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Preset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
comobj.Preset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the SCPI defined enable registers and transition filters. It performs the actions specified by SCPI for the :STATus:PREset command, see SCPI Vol. 2: Command Reference, section 20.7.</Description>
            </Method>
            <Method>
               <Name>Register</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Register(obj, Register, SubRegister, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Register(Register, SubRegister, varargin{:});
end
[Val] = comobj.Register(Register, SubRegister);
</MCode>
               </Code>
               <Description>The contents of one of the status registers. In an IEEE 488.2 instrument, status registers come in Registers. See IEEE 488.2, section 11.4. SCPI provides names for some register Registers.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Jitter</Name>
         <Description>IAgInfiniiVision4Jitter interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Jitter1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AnalysisEnabled</Name>
               <Location>Jitter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	propertyValue = comobj.AnalysisEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj.AnalysisEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the jitter analysis feature.</Description>
            </Property>
            <Property>
               <Name>Measurement</Name>
               <Location>Jitter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	propertyValue = comobj.Measurement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj.Measurement = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMeasurementSlotNone" Value="AgInfiniiVisionMeasurementSlotNone"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot1" Value="AgInfiniiVisionMeasurementSlot1"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot2" Value="AgInfiniiVisionMeasurementSlot2"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot3" Value="AgInfiniiVisionMeasurementSlot3"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot4" Value="AgInfiniiVisionMeasurementSlot4"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot5" Value="AgInfiniiVisionMeasurementSlot5"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot6" Value="AgInfiniiVisionMeasurementSlot6"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot7" Value="AgInfiniiVisionMeasurementSlot7"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot8" Value="AgInfiniiVisionMeasurementSlot8"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot9" Value="AgInfiniiVisionMeasurementSlot9"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot10" Value="AgInfiniiVisionMeasurementSlot10"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The measurement to analyze.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ConfigureHistogram</Name>
               <Location>Jitter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureHistogram(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Jitter;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureHistogram();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Auto-configures and turns on the jitter measurement histogram for the selected measurement.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>JitterSpectrum</Name>
         <Description>IAgInfiniiVision4JitterSpectrum interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="JitterSpectrum1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Window</Name>
               <Location>JitterSpectrum</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Spectrum;
	propertyValue = comobj.Window;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Spectrum;
	comobj.Window = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionJitterSpectrumWindowRectangular" Value="AgInfiniiVisionJitterSpectrumWindowRectangular"/>
                     <Enum Name="AgInfiniiVisionJitterSpectrumWindowHanning" Value="AgInfiniiVisionJitterSpectrumWindowHanning"/>
                     <Enum Name="AgInfiniiVisionJitterSpectrumWindowFlattop" Value="AgInfiniiVisionJitterSpectrumWindowFlattop"/>
                     <Enum Name="AgInfiniiVisionJitterSpectrumWindowBlackmanHarris" Value="AgInfiniiVisionJitterSpectrumWindowBlackmanHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Allows the selection of four different windowing transforms or operations for the jitter spectrum FFT (Fast Fourier Transform).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>JitterSpectrum</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Jitter;
comobj = comobj.Spectrum;
feature('COM_SafeArraySingleDim',1);
comobj.Configure();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Auto-configures and turns on the jitter spectrum for the selected measurement.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>JitterSpectrumHorizontal</Name>
         <Description>IAgInfiniiVision4JitterSpectrumHorizontal interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="JitterSpectrumHorizontal1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>JitterSpectrumHorizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Spectrum;
	comobj = comobj.Horizontal;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Spectrum;
	comobj = comobj.Horizontal;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The center frequency for the jitter measurement spectrum.</Description>
            </Property>
            <Property>
               <Name>FrequencySpan</Name>
               <Location>JitterSpectrumHorizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Spectrum;
	comobj = comobj.Horizontal;
	propertyValue = comobj.FrequencySpan;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Spectrum;
	comobj = comobj.Horizontal;
	comobj.FrequencySpan = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The frequency span of the display (left graticule to right graticule) for the jitter measurement spectrum.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>JitterSpectrumVertical</Name>
         <Description>IAgInfiniiVision4JitterSpectrumVertical interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="JitterSpectrumVertical1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Offset</Name>
               <Location>JitterSpectrumVertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Spectrum;
	comobj = comobj.Vertical;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Spectrum;
	comobj = comobj.Vertical;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The vertical value represented at center screen for the jitter measurement spectrum.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>JitterSpectrumVertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Spectrum;
	comobj = comobj.Vertical;
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Spectrum;
	comobj = comobj.Vertical;
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The full-scale vertical range for the jitter measurement spectrum.</Description>
            </Property>
            <Property>
               <Name>Unit</Name>
               <Location>JitterSpectrumVertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Spectrum;
	comobj = comobj.Vertical;
	propertyValue = comobj.Unit;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Spectrum;
	comobj = comobj.Vertical;
	comobj.Unit = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionJitterSpectrumVerticalUnitDecibel" Value="AgInfiniiVisionJitterSpectrumVerticalUnitDecibel"/>
                     <Enum Name="AgInfiniiVisionJitterSpectrumVerticalUnitVRMS" Value="AgInfiniiVisionJitterSpectrumVerticalUnitVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The vertical units for the jitter spectrum.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>JitterTrend</Name>
         <Description>IAgInfiniiVision4JitterTrend interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="JitterTrend1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>SmoothingPoints</Name>
               <Location>JitterTrend</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Trend;
	propertyValue = comobj.SmoothingPoints;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Trend;
	comobj.SmoothingPoints = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of smoothing points to use when jitter trend smoothing is enabled using ConfigureSmoothing method.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>JitterTrend</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Jitter;
comobj = comobj.Trend;
feature('COM_SafeArraySingleDim',1);
comobj.Configure();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Auto-configures and turns on the jitter measurement trend for the selected measurement.</Description>
            </Method>
            <Method>
               <Name>ConfigureSmoothing</Name>
               <Location>JitterTrend</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureSmoothing(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Jitter;
comobj = comobj.Trend;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureSmoothing();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Auto-configures and turns on smoothing for the jitter measurement trend.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>JitterTrendVertical</Name>
         <Description>IAgInfiniiVision4JitterTrendVertical interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="JitterTrendVertical1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Offset</Name>
               <Location>JitterTrendVertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Trend;
	comobj = comobj.Vertical;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Trend;
	comobj = comobj.Vertical;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The vertical value represented at center screen for the jitter measurement trend.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>JitterTrendVertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Trend;
	comobj = comobj.Vertical;
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Jitter;
	comobj = comobj.Trend;
	comobj = comobj.Vertical;
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The full-scale vertical range for the jitter measurement trend.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MaskTest</Name>
         <Description>IAgInfiniiVisionMaskTest interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MaskTest1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AllChannelEnabled</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.AllChannelEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj.AllChannelEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables all analog channels to be included in the mask test or only selected channels.</Description>
            </Property>
            <Property>
               <Name>AutoMaskUnits</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.AutoMaskUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj.AutoMaskUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMaskTestUnitsCurrent" Value="AgInfiniiVisionMaskTestUnitsCurrent"/>
                     <Enum Name="AgInfiniiVisionMaskTestUnitsDivisions" Value="AgInfiniiVisionMaskTestUnitsDivisions"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Measurement units for  automask which interprets the tolerance parameters for automasking.</Description>
            </Property>
            <Property>
               <Name>BindControlEnabled</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.BindControlEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj.BindControlEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables Bind control 1 &amp;amp; 0 Levels and Bind -1 &amp;amp; 0 Levels for inverted masks. Gets the current bind control level settings.</Description>
            </Property>
            <Property>
               <Name>ElapsedTime</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.ElapsedTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Elapsed time (in seconds) in the current mask test run.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the mask test features.</Description>
            </Property>
            <Property>
               <Name>FailedWaveformCount</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.FailedWaveformCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the total number of failed waveforms in the current mask test run for all regions and all waveforms.</Description>
            </Property>
            <Property>
               <Name>HorizontalTolerance</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.HorizontalTolerance;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj.HorizontalTolerance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Tolerance in the X direction around the waveform for the automasking feature. The absolute value of the tolerance will be added and subtracted to horizontal values of the waveform to determine the boundaries of the mask.</Description>
            </Property>
            <Property>
               <Name>LockEnabled</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.LockEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj.LockEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the mask lock.</Description>
            </Property>
            <Property>
               <Name>PrintFailuresEnabled</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.PrintFailuresEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj.PrintFailuresEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables printing on mask failure.</Description>
            </Property>
            <Property>
               <Name>SaveFailuresEnabled</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.SaveFailuresEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj.SaveFailuresEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables saving on mask failure.</Description>
            </Property>
            <Property>
               <Name>Title</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.Title;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the mask title which is a string of up to 128 characters</Description>
            </Property>
            <Property>
               <Name>VerticalTolerance</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.VerticalTolerance;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj.VerticalTolerance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The vertical tolerance around the waveform for the automasking feature. The absolute value of the tolerance will be added and subtracted to vertical values of the waveform to determine the boundaries of the mask.</Description>
            </Property>
            <Property>
               <Name>WaveformCount</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	propertyValue = comobj.WaveformCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The total number of waveforms acquired in the current mask test run.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>AutoMask</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoMask(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MaskTest;
feature('COM_SafeArraySingleDim',1);
comobj.AutoMask();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Automatically constructs a mask around the current selected channel, using the tolerance parameters defined by the horizontalTolerance, VerticalTolerance and AutoMaskUnits.</Description>
            </Method>
            <Method>
               <Name>Delete</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Delete(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MaskTest;
feature('COM_SafeArraySingleDim',1);
comobj.Delete();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Deletes the currently loaded mask.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>MaskTest</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MaskTest;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Resets the mask statistics.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>MaskTestConfiguration</Name>
         <Description>IAgInfiniiVisionMaskTestConfiguration interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MaskTestConfiguration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>MeasurementEnabled</Name>
               <Location>MaskTestConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	propertyValue = comobj.MeasurementEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	comobj.MeasurementEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables measuring only mask failures setting. Gets the current measure only mask failures settings</Description>
            </Property>
            <Property>
               <Name>SigmaLevel</Name>
               <Location>MaskTestConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	propertyValue = comobj.SigmaLevel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	comobj.SigmaLevel = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sigma Level when the termination condition is set to Sigma. Allowed Range is 0.1 to 9.3.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>MaskTestConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source that is used to create an AutoMask and for mask testing. In case IAgInfiniiVisionMaskTest.AllChannelEnabled is enabled all ON channels are tested.</Description>
            </Property>
            <Property>
               <Name>TerminationCondition</Name>
               <Location>MaskTestConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	propertyValue = comobj.TerminationCondition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	comobj.TerminationCondition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMaskTestTerminationConditionForever" Value="AgInfiniiVisionMaskTestTerminationConditionForever"/>
                     <Enum Name="AgInfiniiVisionMaskTestTerminationConditionSigma" Value="AgInfiniiVisionMaskTestTerminationConditionSigma"/>
                     <Enum Name="AgInfiniiVisionMaskTestTerminationConditionTime" Value="AgInfiniiVisionMaskTestTerminationConditionTime"/>
                     <Enum Name="AgInfiniiVisionMaskTestTerminationConditionWaveforms" Value="AgInfiniiVisionMaskTestTerminationConditionWaveforms"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The termination conditions for the mask test.</Description>
            </Property>
            <Property>
               <Name>TerminationEnabled</Name>
               <Location>MaskTestConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	propertyValue = comobj.TerminationEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	comobj.TerminationEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables stopping of mask test and acquisition on a mask failure. Gets the current stopping on mask failure setting.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>MaskTestConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	propertyValue = comobj.Time;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of seconds for a mask test to run. Permissible Range is 1 to 86400.</Description>
            </Property>
            <Property>
               <Name>Waveform</Name>
               <Location>MaskTestConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	propertyValue = comobj.Waveform;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Configuration;
	comobj.Waveform = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of waveform acquisitions that are mask tested. Permissible range is 1 to 2,000,000,000.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MaskTestMarkers</Name>
         <Description>IAgInfiniiVisionMaskTestMarkers interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MaskTestMarkers1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>X1Coordinate</Name>
               <Location>MaskTestMarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Markers;
	propertyValue = comobj.X1Coordinate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Markers;
	comobj.X1Coordinate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The position of X1 coordinate where X=0 in the base coordinate system used for mask testing. The X1 value is a time value specifying the location of the X1 coordinate, which will then be treated as X=0 for mask regions coordinates.</Description>
            </Property>
            <Property>
               <Name>XDelta</Name>
               <Location>MaskTestMarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Markers;
	propertyValue = comobj.XDelta;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Markers;
	comobj.XDelta = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The position of the X2 marker with respect to the X1 marker. In the mask test coordinate system, the X1 marker defines where X=0; thus, the X2 marker defines where X=1.</Description>
            </Property>
            <Property>
               <Name>Y1Coordinate</Name>
               <Location>MaskTestMarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Markers;
	propertyValue = comobj.Y1Coordinate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Markers;
	comobj.Y1Coordinate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Position of Y1 coordinate where Y=0 in the base coordinate system used for mask testing.</Description>
            </Property>
            <Property>
               <Name>Y2Coordinate</Name>
               <Location>MaskTestMarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Markers;
	propertyValue = comobj.Y2Coordinate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MaskTest;
	comobj = comobj.Markers;
	comobj.Y2Coordinate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Position of the Y2 marker with respect to the Y1 marker. In the mask test coordinate system, the Y1 marker defines where Y=0; thus, the Y2 marker defines where Y=1.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Math</Name>
         <Description>IAgInfiniiVisionMath interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Math1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>Math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the math function.</Description>
            </Property>
            <Property>
               <Name>InternalOperation</Name>
               <Location>Math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	propertyValue = comobj.InternalOperation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	comobj.InternalOperation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathIntOperationAdd" Value="AgInfiniiVisionMathIntOperationAdd"/>
                     <Enum Name="AgInfiniiVisionMathIntOperationSubtract" Value="AgInfiniiVisionMathIntOperationSubtract"/>
                     <Enum Name="AgInfiniiVisionMathIntOperationMultiply" Value="AgInfiniiVisionMathIntOperationMultiply"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the math operation for the g(t) source that can be used as the input to the FFT, Integrate, Differentiate or SQRT functions.</Description>
            </Property>
            <Property>
               <Name>InternalSource1</Name>
               <Location>Math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	propertyValue = comobj.InternalSource1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	comobj.InternalSource1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the first input channel for the g(t) source that can be used as the input to the FFT, Integrate, Differentiate, or SQRT functions.</Description>
            </Property>
            <Property>
               <Name>InternalSource2</Name>
               <Location>Math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	propertyValue = comobj.InternalSource2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	comobj.InternalSource2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the second input channel for the g(t) source that can be used as the input to the FFT, Integrate, Differentiate, or SQRT functions.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>Math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage or vertical value represented at center screen for the selected function.</Description>
            </Property>
            <Property>
               <Name>Operation</Name>
               <Location>Math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	propertyValue = comobj.Operation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	comobj.Operation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathOperationsAdd" Value="AgInfiniiVisionMathOperationsAdd"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSubtract" Value="AgInfiniiVisionMathOperationsSubtract"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMultiply" Value="AgInfiniiVisionMathOperationsMultiply"/>
                     <Enum Name="AgInfiniiVisionMathOperationsFFT" Value="AgInfiniiVisionMathOperationsFFT"/>
                     <Enum Name="AgInfiniiVisionMathOperationsIntegrate" Value="AgInfiniiVisionMathOperationsIntegrate"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDifferentiation" Value="AgInfiniiVisionMathOperationsDifferentiation"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquareRoot" Value="AgInfiniiVisionMathOperationsSquareRoot"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMagnify" Value="AgInfiniiVisionMathOperationsMagnify"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAbsolute" Value="AgInfiniiVisionMathOperationsAbsolute"/>
                     <Enum Name="AgInfiniiVisionMathOperationsNaturalLogarithm" Value="AgInfiniiVisionMathOperationsNaturalLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsCommonLogarithm" Value="AgInfiniiVisionMathOperationsCommonLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsExponential" Value="AgInfiniiVisionMathOperationsExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBaseTenExponential" Value="AgInfiniiVisionMathOperationsBaseTenExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLowPassFilter" Value="AgInfiniiVisionMathOperationsLowPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsHighPassFilter" Value="AgInfiniiVisionMathOperationsHighPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDivide" Value="AgInfiniiVisionMathOperationsDivide"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLinear" Value="AgInfiniiVisionMathOperationsLinear"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMeasurmentTrend" Value="AgInfiniiVisionMathOperationsMeasurmentTrend"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusTiming" Value="AgInfiniiVisionMathOperationsBusTiming"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusState" Value="AgInfiniiVisionMathOperationsBusState"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquare" Value="AgInfiniiVisionMathOperationsSquare"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAverage" Value="AgInfiniiVisionMathOperationsAverage"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMaxHold" Value="AgInfiniiVisionMathOperationsMaxHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMinHold" Value="AgInfiniiVisionMathOperationsMinHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsClockRecovery" Value="AgInfiniiVisionMathOperationsClockRecovery"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSmoothing" Value="AgInfiniiVisionMathOperationsSmoothing"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Waveform math operation</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>Math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Range of Full-scale vertical axis for the selected function.</Description>
            </Property>
            <Property>
               <Name>Source1</Name>
               <Location>Math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	propertyValue = comobj.Source1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	comobj.Source1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>First source for channel math operations or the single source for the transforms. If "GOFT" is selected as the source, the sources are determined by InternalSource1 and InternalSource2.</Description>
            </Property>
            <Property>
               <Name>Source2</Name>
               <Location>Math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	propertyValue = comobj.Source2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	comobj.Source2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Second source for math operations that have two sources. It is not used when FFT is used. Permissible Values are Channel&lt;n&gt; | NONE (in this format only).&lt;/n&gt;</Description>
            </Property>
            <Property>
               <Name>VerticalScale</Name>
               <Location>Math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	propertyValue = comobj.VerticalScale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math;
	comobj.VerticalScale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Vertical scale, or units per division, of the selected function.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Math2</Name>
         <Description>IAgInfiniiVisionMath2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Math21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the math function.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the math function.</Description>
            </Property>
            <Property>
               <Name>InternalOperation</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.InternalOperation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.InternalOperation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathIntOperationAdd" Value="AgInfiniiVisionMathIntOperationAdd"/>
                     <Enum Name="AgInfiniiVisionMathIntOperationSubtract" Value="AgInfiniiVisionMathIntOperationSubtract"/>
                     <Enum Name="AgInfiniiVisionMathIntOperationMultiply" Value="AgInfiniiVisionMathIntOperationMultiply"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the math operation for the g(t) source that can be used as the input to the FFT, Integrate, Differentiate or SQRT functions.</Description>
            </Property>
            <Property>
               <Name>InternalOperation</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.InternalOperation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.InternalOperation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathIntOperationAdd" Value="AgInfiniiVisionMathIntOperationAdd"/>
                     <Enum Name="AgInfiniiVisionMathIntOperationSubtract" Value="AgInfiniiVisionMathIntOperationSubtract"/>
                     <Enum Name="AgInfiniiVisionMathIntOperationMultiply" Value="AgInfiniiVisionMathIntOperationMultiply"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the math operation for the g(t) source that can be used as the input to the FFT, Integrate, Differentiate or SQRT functions.</Description>
            </Property>
            <Property>
               <Name>InternalSource1</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.InternalSource1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.InternalSource1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the first input channel for the g(t) source that can be used as the input to the FFT, Integrate, Differentiate, or SQRT functions.</Description>
            </Property>
            <Property>
               <Name>InternalSource1</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.InternalSource1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.InternalSource1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the first input channel for the g(t) source that can be used as the input to the FFT, Integrate, Differentiate, or SQRT functions.</Description>
            </Property>
            <Property>
               <Name>InternalSource2</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.InternalSource2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.InternalSource2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the second input channel for the g(t) source that can be used as the input to the FFT, Integrate, Differentiate, or SQRT functions.</Description>
            </Property>
            <Property>
               <Name>InternalSource2</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.InternalSource2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.InternalSource2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the second input channel for the g(t) source that can be used as the input to the FFT, Integrate, Differentiate, or SQRT functions.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage or vertical value represented at center screen for the selected function.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage or vertical value represented at center screen for the selected function.</Description>
            </Property>
            <Property>
               <Name>Operation</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.Operation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.Operation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathOperationsAdd" Value="AgInfiniiVisionMathOperationsAdd"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSubtract" Value="AgInfiniiVisionMathOperationsSubtract"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMultiply" Value="AgInfiniiVisionMathOperationsMultiply"/>
                     <Enum Name="AgInfiniiVisionMathOperationsFFT" Value="AgInfiniiVisionMathOperationsFFT"/>
                     <Enum Name="AgInfiniiVisionMathOperationsIntegrate" Value="AgInfiniiVisionMathOperationsIntegrate"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDifferentiation" Value="AgInfiniiVisionMathOperationsDifferentiation"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquareRoot" Value="AgInfiniiVisionMathOperationsSquareRoot"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMagnify" Value="AgInfiniiVisionMathOperationsMagnify"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAbsolute" Value="AgInfiniiVisionMathOperationsAbsolute"/>
                     <Enum Name="AgInfiniiVisionMathOperationsNaturalLogarithm" Value="AgInfiniiVisionMathOperationsNaturalLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsCommonLogarithm" Value="AgInfiniiVisionMathOperationsCommonLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsExponential" Value="AgInfiniiVisionMathOperationsExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBaseTenExponential" Value="AgInfiniiVisionMathOperationsBaseTenExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLowPassFilter" Value="AgInfiniiVisionMathOperationsLowPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsHighPassFilter" Value="AgInfiniiVisionMathOperationsHighPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDivide" Value="AgInfiniiVisionMathOperationsDivide"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLinear" Value="AgInfiniiVisionMathOperationsLinear"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMeasurmentTrend" Value="AgInfiniiVisionMathOperationsMeasurmentTrend"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusTiming" Value="AgInfiniiVisionMathOperationsBusTiming"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusState" Value="AgInfiniiVisionMathOperationsBusState"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquare" Value="AgInfiniiVisionMathOperationsSquare"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAverage" Value="AgInfiniiVisionMathOperationsAverage"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMaxHold" Value="AgInfiniiVisionMathOperationsMaxHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMinHold" Value="AgInfiniiVisionMathOperationsMinHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsClockRecovery" Value="AgInfiniiVisionMathOperationsClockRecovery"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSmoothing" Value="AgInfiniiVisionMathOperationsSmoothing"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Waveform math operation</Description>
            </Property>
            <Property>
               <Name>Operation</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.Operation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.Operation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathOperationsAdd" Value="AgInfiniiVisionMathOperationsAdd"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSubtract" Value="AgInfiniiVisionMathOperationsSubtract"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMultiply" Value="AgInfiniiVisionMathOperationsMultiply"/>
                     <Enum Name="AgInfiniiVisionMathOperationsFFT" Value="AgInfiniiVisionMathOperationsFFT"/>
                     <Enum Name="AgInfiniiVisionMathOperationsIntegrate" Value="AgInfiniiVisionMathOperationsIntegrate"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDifferentiation" Value="AgInfiniiVisionMathOperationsDifferentiation"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquareRoot" Value="AgInfiniiVisionMathOperationsSquareRoot"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMagnify" Value="AgInfiniiVisionMathOperationsMagnify"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAbsolute" Value="AgInfiniiVisionMathOperationsAbsolute"/>
                     <Enum Name="AgInfiniiVisionMathOperationsNaturalLogarithm" Value="AgInfiniiVisionMathOperationsNaturalLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsCommonLogarithm" Value="AgInfiniiVisionMathOperationsCommonLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsExponential" Value="AgInfiniiVisionMathOperationsExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBaseTenExponential" Value="AgInfiniiVisionMathOperationsBaseTenExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLowPassFilter" Value="AgInfiniiVisionMathOperationsLowPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsHighPassFilter" Value="AgInfiniiVisionMathOperationsHighPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDivide" Value="AgInfiniiVisionMathOperationsDivide"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLinear" Value="AgInfiniiVisionMathOperationsLinear"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMeasurmentTrend" Value="AgInfiniiVisionMathOperationsMeasurmentTrend"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusTiming" Value="AgInfiniiVisionMathOperationsBusTiming"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusState" Value="AgInfiniiVisionMathOperationsBusState"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquare" Value="AgInfiniiVisionMathOperationsSquare"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAverage" Value="AgInfiniiVisionMathOperationsAverage"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMaxHold" Value="AgInfiniiVisionMathOperationsMaxHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMinHold" Value="AgInfiniiVisionMathOperationsMinHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsClockRecovery" Value="AgInfiniiVisionMathOperationsClockRecovery"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSmoothing" Value="AgInfiniiVisionMathOperationsSmoothing"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Waveform math operation</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Range of Full-scale vertical axis for the selected function.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Range of Full-scale vertical axis for the selected function.</Description>
            </Property>
            <Property>
               <Name>Source1</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.Source1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.Source1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>First source for channel math operations or the single source for the transforms. If "GOFT" is selected as the source, the sources are determined by InternalSource1 and InternalSource2.</Description>
            </Property>
            <Property>
               <Name>Source1</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.Source1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.Source1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>First source for channel math operations or the single source for the transforms. If "GOFT" is selected as the source, the sources are determined by InternalSource1 and InternalSource2.</Description>
            </Property>
            <Property>
               <Name>Source2</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.Source2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.Source2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Second source for math operations that have two sources. It is not used when FFT is used. Permissible Values are Channel&lt;n&gt; | NONE (in this format only).&lt;/n&gt;</Description>
            </Property>
            <Property>
               <Name>Source2</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.Source2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.Source2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Second source for math operations that have two sources. It is not used when FFT is used. Permissible Values are Channel&lt;n&gt; | NONE (in this format only).&lt;/n&gt;</Description>
            </Property>
            <Property>
               <Name>VerticalScale</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.VerticalScale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.VerticalScale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Vertical scale, or units per division, of the selected function.</Description>
            </Property>
            <Property>
               <Name>VerticalScale</Name>
               <Location>Math2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	propertyValue = comobj.VerticalScale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj.VerticalScale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Vertical scale, or units per division, of the selected function.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Math2Bus</Name>
         <Description>IAgInfiniiVisionMath2Bus interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Math2Bus1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ClockSource</Name>
               <Location>Math2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Bus;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Bus;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal source for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>Math2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Bus;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Bus;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusSlopeNegative" Value="AgInfiniiVisionMathBusSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopePositive" Value="AgInfiniiVisionMathBusSlopePositive"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopeEither" Value="AgInfiniiVisionMathBusSlopeEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal edge for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>YIncrement</Name>
               <Location>Math2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Bus;
	propertyValue = comobj.YIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Bus;
	comobj.YIncrement = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with each increment in Chart Logic Bus data.</Description>
            </Property>
            <Property>
               <Name>YOrigin</Name>
               <Location>Math2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Bus;
	propertyValue = comobj.YOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Bus;
	comobj.YOrigin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with Chart Logic Bus data equal to zero.</Description>
            </Property>
            <Property>
               <Name>YUnits</Name>
               <Location>Math2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Bus;
	propertyValue = comobj.YUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Bus;
	comobj.YUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsVolts" Value="AgInfiniiVisionMathBusYUnitsVolts"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsAmps" Value="AgInfiniiVisionMathBusYUnitsAmps"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsNone" Value="AgInfiniiVisionMathBusYUnitsNone"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the vertical units for the Chart Logic Bus operations.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Math2FFT</Name>
         <Description>IAgInfiniiVisionMathFFT interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Math2FFT1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>Math2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>Math2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>Math2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Math2FFT2</Name>
         <Description>IAgInfiniiVisionMathFFT2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Math2FFT21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>Math2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>Math2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>Math2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>Math2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>VerticalUnits</Name>
               <Location>Math2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	propertyValue = comobj.VerticalUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	comobj.VerticalUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsdB" Value="AgInfiniiVisionMathFFTVerticalUnitsdB"/>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsVRMS" Value="AgInfiniiVisionMathFFTVerticalUnitsVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FFT vertical units.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>Math2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>Math2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FFT2;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Math2FilterFrequency</Name>
         <Description>IAgInfiniiVisionMath2FilterFrequency interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Math2FilterFrequency1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>HighPassBandwidth</Name>
               <Location>Math2FilterFrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FilterFrequency;
	propertyValue = comobj.HighPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FilterFrequency;
	comobj.HighPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the high-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
            <Property>
               <Name>LowPassBandwidth</Name>
               <Location>Math2FilterFrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FilterFrequency;
	propertyValue = comobj.LowPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.FilterFrequency;
	comobj.LowPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the low-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Math2Integrate</Name>
         <Description>IAgInfiniiVisionMath2Integrate interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Math2Integrate1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>InputOffset</Name>
               <Location>Math2Integrate</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Integrate;
	propertyValue = comobj.InputOffset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Integrate;
	comobj.InputOffset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies a DC offset correction factor for the Integrate math waveform input signal. This DC offset correction lets you level a ramped waveform.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Math2Linear</Name>
         <Description>IAgInfiniiVisionMath2Linear interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Math2Linear1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Gain</Name>
               <Location>Math2Linear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Linear;
	propertyValue = comobj.Gain;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Linear;
	comobj.Gain = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Gain ("A" in Ax + B) for the Linear Math operation.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>Math2Linear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Linear;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.Linear;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Offset ("B" in Ax + B) for the Linear Math operation.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Math2MeasurementTrend</Name>
         <Description>IAgInfiniiVisionMath2MeasurementTrend interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Math2MeasurementTrend1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Math2MeasurementTrendType</Name>
               <Location>Math2MeasurementTrend</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.MeasurementTrend;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Math2;
	comobj = comobj.MeasurementTrend;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFrequency" Value="AgInfiniiVisionMathMeasurementTrendTypeFrequency"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePeriod" Value="AgInfiniiVisionMathMeasurementTrendTypePeriod"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle" Value="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth" Value="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth" Value="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeRiseTime" Value="AgInfiniiVisionMathMeasurementTrendTypeRiseTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFallTime" Value="AgInfiniiVisionMathMeasurementTrendTypeFallTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVRatio" Value="AgInfiniiVisionMathMeasurementTrendTypeVRatio"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVAverage" Value="AgInfiniiVisionMathMeasurementTrendTypeVAverage"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeACRms" Value="AgInfiniiVisionMathMeasurementTrendTypeACRms"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the measurement whose trend is shown in the math waveform.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunction</Name>
         <Description>IAgInfiniiVisionMathFunction interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunction1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the math function.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the math function.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage or vertical value represented at center screen for the selected function.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage or vertical value represented at center screen for the selected function.</Description>
            </Property>
            <Property>
               <Name>Operation</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Operation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Operation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathOperationsAdd" Value="AgInfiniiVisionMathOperationsAdd"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSubtract" Value="AgInfiniiVisionMathOperationsSubtract"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMultiply" Value="AgInfiniiVisionMathOperationsMultiply"/>
                     <Enum Name="AgInfiniiVisionMathOperationsFFT" Value="AgInfiniiVisionMathOperationsFFT"/>
                     <Enum Name="AgInfiniiVisionMathOperationsIntegrate" Value="AgInfiniiVisionMathOperationsIntegrate"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDifferentiation" Value="AgInfiniiVisionMathOperationsDifferentiation"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquareRoot" Value="AgInfiniiVisionMathOperationsSquareRoot"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMagnify" Value="AgInfiniiVisionMathOperationsMagnify"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAbsolute" Value="AgInfiniiVisionMathOperationsAbsolute"/>
                     <Enum Name="AgInfiniiVisionMathOperationsNaturalLogarithm" Value="AgInfiniiVisionMathOperationsNaturalLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsCommonLogarithm" Value="AgInfiniiVisionMathOperationsCommonLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsExponential" Value="AgInfiniiVisionMathOperationsExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBaseTenExponential" Value="AgInfiniiVisionMathOperationsBaseTenExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLowPassFilter" Value="AgInfiniiVisionMathOperationsLowPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsHighPassFilter" Value="AgInfiniiVisionMathOperationsHighPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDivide" Value="AgInfiniiVisionMathOperationsDivide"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLinear" Value="AgInfiniiVisionMathOperationsLinear"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMeasurmentTrend" Value="AgInfiniiVisionMathOperationsMeasurmentTrend"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusTiming" Value="AgInfiniiVisionMathOperationsBusTiming"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusState" Value="AgInfiniiVisionMathOperationsBusState"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquare" Value="AgInfiniiVisionMathOperationsSquare"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAverage" Value="AgInfiniiVisionMathOperationsAverage"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMaxHold" Value="AgInfiniiVisionMathOperationsMaxHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMinHold" Value="AgInfiniiVisionMathOperationsMinHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsClockRecovery" Value="AgInfiniiVisionMathOperationsClockRecovery"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSmoothing" Value="AgInfiniiVisionMathOperationsSmoothing"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Waveform math operation.</Description>
            </Property>
            <Property>
               <Name>Operation</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Operation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Operation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathOperationsAdd" Value="AgInfiniiVisionMathOperationsAdd"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSubtract" Value="AgInfiniiVisionMathOperationsSubtract"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMultiply" Value="AgInfiniiVisionMathOperationsMultiply"/>
                     <Enum Name="AgInfiniiVisionMathOperationsFFT" Value="AgInfiniiVisionMathOperationsFFT"/>
                     <Enum Name="AgInfiniiVisionMathOperationsIntegrate" Value="AgInfiniiVisionMathOperationsIntegrate"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDifferentiation" Value="AgInfiniiVisionMathOperationsDifferentiation"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquareRoot" Value="AgInfiniiVisionMathOperationsSquareRoot"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMagnify" Value="AgInfiniiVisionMathOperationsMagnify"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAbsolute" Value="AgInfiniiVisionMathOperationsAbsolute"/>
                     <Enum Name="AgInfiniiVisionMathOperationsNaturalLogarithm" Value="AgInfiniiVisionMathOperationsNaturalLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsCommonLogarithm" Value="AgInfiniiVisionMathOperationsCommonLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsExponential" Value="AgInfiniiVisionMathOperationsExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBaseTenExponential" Value="AgInfiniiVisionMathOperationsBaseTenExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLowPassFilter" Value="AgInfiniiVisionMathOperationsLowPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsHighPassFilter" Value="AgInfiniiVisionMathOperationsHighPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDivide" Value="AgInfiniiVisionMathOperationsDivide"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLinear" Value="AgInfiniiVisionMathOperationsLinear"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMeasurmentTrend" Value="AgInfiniiVisionMathOperationsMeasurmentTrend"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusTiming" Value="AgInfiniiVisionMathOperationsBusTiming"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusState" Value="AgInfiniiVisionMathOperationsBusState"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquare" Value="AgInfiniiVisionMathOperationsSquare"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAverage" Value="AgInfiniiVisionMathOperationsAverage"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMaxHold" Value="AgInfiniiVisionMathOperationsMaxHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMinHold" Value="AgInfiniiVisionMathOperationsMinHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsClockRecovery" Value="AgInfiniiVisionMathOperationsClockRecovery"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSmoothing" Value="AgInfiniiVisionMathOperationsSmoothing"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Waveform math operation.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Range of Full-scale vertical axis for the selected function.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Range of Full-scale vertical axis for the selected function.</Description>
            </Property>
            <Property>
               <Name>Scale</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Scale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Scale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Vertical scale, or units per division, of the selected function.</Description>
            </Property>
            <Property>
               <Name>Scale</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Scale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Scale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Vertical scale, or units per division, of the selected function.</Description>
            </Property>
            <Property>
               <Name>Source1</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The first source for the operation math functions or the single source for the transform functions, filter functions, or visualization functions.</Description>
            </Property>
            <Property>
               <Name>Source1</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The first source for the operation math functions or the single source for the transform functions, filter functions, or visualization functions.</Description>
            </Property>
            <Property>
               <Name>Source2</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second source for math operator functions that have two sources. It is not used for the transform functions, filter functions, or visualization functions (except when the measurement trend visualization's measurement requires two sources).</Description>
            </Property>
            <Property>
               <Name>Source2</Name>
               <Location>MathFunction</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second source for math operator functions that have two sources. It is not used for the transform functions, filter functions, or visualization functions (except when the measurement trend visualization's measurement requires two sources).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunction2</Name>
         <Description>IAgInfiniiVisionMathFunction2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunction21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the math function.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the math function.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the math function.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the math function.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage or vertical value represented at center screen for the selected function.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage or vertical value represented at center screen for the selected function.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage or vertical value represented at center screen for the selected function.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage or vertical value represented at center screen for the selected function.</Description>
            </Property>
            <Property>
               <Name>Operation</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Operation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Operation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathOperationsAdd" Value="AgInfiniiVisionMathOperationsAdd"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSubtract" Value="AgInfiniiVisionMathOperationsSubtract"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMultiply" Value="AgInfiniiVisionMathOperationsMultiply"/>
                     <Enum Name="AgInfiniiVisionMathOperationsFFT" Value="AgInfiniiVisionMathOperationsFFT"/>
                     <Enum Name="AgInfiniiVisionMathOperationsIntegrate" Value="AgInfiniiVisionMathOperationsIntegrate"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDifferentiation" Value="AgInfiniiVisionMathOperationsDifferentiation"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquareRoot" Value="AgInfiniiVisionMathOperationsSquareRoot"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMagnify" Value="AgInfiniiVisionMathOperationsMagnify"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAbsolute" Value="AgInfiniiVisionMathOperationsAbsolute"/>
                     <Enum Name="AgInfiniiVisionMathOperationsNaturalLogarithm" Value="AgInfiniiVisionMathOperationsNaturalLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsCommonLogarithm" Value="AgInfiniiVisionMathOperationsCommonLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsExponential" Value="AgInfiniiVisionMathOperationsExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBaseTenExponential" Value="AgInfiniiVisionMathOperationsBaseTenExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLowPassFilter" Value="AgInfiniiVisionMathOperationsLowPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsHighPassFilter" Value="AgInfiniiVisionMathOperationsHighPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDivide" Value="AgInfiniiVisionMathOperationsDivide"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLinear" Value="AgInfiniiVisionMathOperationsLinear"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMeasurmentTrend" Value="AgInfiniiVisionMathOperationsMeasurmentTrend"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusTiming" Value="AgInfiniiVisionMathOperationsBusTiming"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusState" Value="AgInfiniiVisionMathOperationsBusState"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquare" Value="AgInfiniiVisionMathOperationsSquare"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAverage" Value="AgInfiniiVisionMathOperationsAverage"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMaxHold" Value="AgInfiniiVisionMathOperationsMaxHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMinHold" Value="AgInfiniiVisionMathOperationsMinHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsClockRecovery" Value="AgInfiniiVisionMathOperationsClockRecovery"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSmoothing" Value="AgInfiniiVisionMathOperationsSmoothing"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Waveform math operation.</Description>
            </Property>
            <Property>
               <Name>Operation</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Operation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Operation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathOperationsAdd" Value="AgInfiniiVisionMathOperationsAdd"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSubtract" Value="AgInfiniiVisionMathOperationsSubtract"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMultiply" Value="AgInfiniiVisionMathOperationsMultiply"/>
                     <Enum Name="AgInfiniiVisionMathOperationsFFT" Value="AgInfiniiVisionMathOperationsFFT"/>
                     <Enum Name="AgInfiniiVisionMathOperationsIntegrate" Value="AgInfiniiVisionMathOperationsIntegrate"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDifferentiation" Value="AgInfiniiVisionMathOperationsDifferentiation"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquareRoot" Value="AgInfiniiVisionMathOperationsSquareRoot"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMagnify" Value="AgInfiniiVisionMathOperationsMagnify"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAbsolute" Value="AgInfiniiVisionMathOperationsAbsolute"/>
                     <Enum Name="AgInfiniiVisionMathOperationsNaturalLogarithm" Value="AgInfiniiVisionMathOperationsNaturalLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsCommonLogarithm" Value="AgInfiniiVisionMathOperationsCommonLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsExponential" Value="AgInfiniiVisionMathOperationsExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBaseTenExponential" Value="AgInfiniiVisionMathOperationsBaseTenExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLowPassFilter" Value="AgInfiniiVisionMathOperationsLowPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsHighPassFilter" Value="AgInfiniiVisionMathOperationsHighPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDivide" Value="AgInfiniiVisionMathOperationsDivide"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLinear" Value="AgInfiniiVisionMathOperationsLinear"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMeasurmentTrend" Value="AgInfiniiVisionMathOperationsMeasurmentTrend"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusTiming" Value="AgInfiniiVisionMathOperationsBusTiming"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusState" Value="AgInfiniiVisionMathOperationsBusState"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquare" Value="AgInfiniiVisionMathOperationsSquare"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAverage" Value="AgInfiniiVisionMathOperationsAverage"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMaxHold" Value="AgInfiniiVisionMathOperationsMaxHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMinHold" Value="AgInfiniiVisionMathOperationsMinHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsClockRecovery" Value="AgInfiniiVisionMathOperationsClockRecovery"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSmoothing" Value="AgInfiniiVisionMathOperationsSmoothing"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Waveform math operation.</Description>
            </Property>
            <Property>
               <Name>Operation</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Operation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Operation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathOperationsAdd" Value="AgInfiniiVisionMathOperationsAdd"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSubtract" Value="AgInfiniiVisionMathOperationsSubtract"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMultiply" Value="AgInfiniiVisionMathOperationsMultiply"/>
                     <Enum Name="AgInfiniiVisionMathOperationsFFT" Value="AgInfiniiVisionMathOperationsFFT"/>
                     <Enum Name="AgInfiniiVisionMathOperationsIntegrate" Value="AgInfiniiVisionMathOperationsIntegrate"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDifferentiation" Value="AgInfiniiVisionMathOperationsDifferentiation"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquareRoot" Value="AgInfiniiVisionMathOperationsSquareRoot"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMagnify" Value="AgInfiniiVisionMathOperationsMagnify"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAbsolute" Value="AgInfiniiVisionMathOperationsAbsolute"/>
                     <Enum Name="AgInfiniiVisionMathOperationsNaturalLogarithm" Value="AgInfiniiVisionMathOperationsNaturalLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsCommonLogarithm" Value="AgInfiniiVisionMathOperationsCommonLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsExponential" Value="AgInfiniiVisionMathOperationsExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBaseTenExponential" Value="AgInfiniiVisionMathOperationsBaseTenExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLowPassFilter" Value="AgInfiniiVisionMathOperationsLowPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsHighPassFilter" Value="AgInfiniiVisionMathOperationsHighPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDivide" Value="AgInfiniiVisionMathOperationsDivide"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLinear" Value="AgInfiniiVisionMathOperationsLinear"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMeasurmentTrend" Value="AgInfiniiVisionMathOperationsMeasurmentTrend"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusTiming" Value="AgInfiniiVisionMathOperationsBusTiming"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusState" Value="AgInfiniiVisionMathOperationsBusState"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquare" Value="AgInfiniiVisionMathOperationsSquare"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAverage" Value="AgInfiniiVisionMathOperationsAverage"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMaxHold" Value="AgInfiniiVisionMathOperationsMaxHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMinHold" Value="AgInfiniiVisionMathOperationsMinHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsClockRecovery" Value="AgInfiniiVisionMathOperationsClockRecovery"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSmoothing" Value="AgInfiniiVisionMathOperationsSmoothing"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Waveform math operation.</Description>
            </Property>
            <Property>
               <Name>Operation</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Operation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Operation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathOperationsAdd" Value="AgInfiniiVisionMathOperationsAdd"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSubtract" Value="AgInfiniiVisionMathOperationsSubtract"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMultiply" Value="AgInfiniiVisionMathOperationsMultiply"/>
                     <Enum Name="AgInfiniiVisionMathOperationsFFT" Value="AgInfiniiVisionMathOperationsFFT"/>
                     <Enum Name="AgInfiniiVisionMathOperationsIntegrate" Value="AgInfiniiVisionMathOperationsIntegrate"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDifferentiation" Value="AgInfiniiVisionMathOperationsDifferentiation"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquareRoot" Value="AgInfiniiVisionMathOperationsSquareRoot"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMagnify" Value="AgInfiniiVisionMathOperationsMagnify"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAbsolute" Value="AgInfiniiVisionMathOperationsAbsolute"/>
                     <Enum Name="AgInfiniiVisionMathOperationsNaturalLogarithm" Value="AgInfiniiVisionMathOperationsNaturalLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsCommonLogarithm" Value="AgInfiniiVisionMathOperationsCommonLogarithm"/>
                     <Enum Name="AgInfiniiVisionMathOperationsExponential" Value="AgInfiniiVisionMathOperationsExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBaseTenExponential" Value="AgInfiniiVisionMathOperationsBaseTenExponential"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLowPassFilter" Value="AgInfiniiVisionMathOperationsLowPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsHighPassFilter" Value="AgInfiniiVisionMathOperationsHighPassFilter"/>
                     <Enum Name="AgInfiniiVisionMathOperationsDivide" Value="AgInfiniiVisionMathOperationsDivide"/>
                     <Enum Name="AgInfiniiVisionMathOperationsLinear" Value="AgInfiniiVisionMathOperationsLinear"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMeasurmentTrend" Value="AgInfiniiVisionMathOperationsMeasurmentTrend"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusTiming" Value="AgInfiniiVisionMathOperationsBusTiming"/>
                     <Enum Name="AgInfiniiVisionMathOperationsBusState" Value="AgInfiniiVisionMathOperationsBusState"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSquare" Value="AgInfiniiVisionMathOperationsSquare"/>
                     <Enum Name="AgInfiniiVisionMathOperationsAverage" Value="AgInfiniiVisionMathOperationsAverage"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMaxHold" Value="AgInfiniiVisionMathOperationsMaxHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsMinHold" Value="AgInfiniiVisionMathOperationsMinHold"/>
                     <Enum Name="AgInfiniiVisionMathOperationsClockRecovery" Value="AgInfiniiVisionMathOperationsClockRecovery"/>
                     <Enum Name="AgInfiniiVisionMathOperationsSmoothing" Value="AgInfiniiVisionMathOperationsSmoothing"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Waveform math operation.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Range of Full-scale vertical axis for the selected function.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Range of Full-scale vertical axis for the selected function.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Range of Full-scale vertical axis for the selected function.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Range of Full-scale vertical axis for the selected function.</Description>
            </Property>
            <Property>
               <Name>Scale</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Scale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Scale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Vertical scale, or units per division, of the selected function.</Description>
            </Property>
            <Property>
               <Name>Scale</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Scale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Scale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Vertical scale, or units per division, of the selected function.</Description>
            </Property>
            <Property>
               <Name>Scale</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Scale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Scale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Vertical scale, or units per division, of the selected function.</Description>
            </Property>
            <Property>
               <Name>Scale</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Scale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Scale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Vertical scale, or units per division, of the selected function.</Description>
            </Property>
            <Property>
               <Name>Source1</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The first source for the operation math functions or the single source for the transform functions, filter functions, or visualization functions.</Description>
            </Property>
            <Property>
               <Name>Source1</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The first source for the operation math functions or the single source for the transform functions, filter functions, or visualization functions.</Description>
            </Property>
            <Property>
               <Name>Source1</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The first source for the operation math functions or the single source for the transform functions, filter functions, or visualization functions.</Description>
            </Property>
            <Property>
               <Name>Source1</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The first source for the operation math functions or the single source for the transform functions, filter functions, or visualization functions.</Description>
            </Property>
            <Property>
               <Name>Source2</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second source for math operator functions that have two sources. It is not used for the transform functions, filter functions, or visualization functions (except when the measurement trend visualization's measurement requires two sources).</Description>
            </Property>
            <Property>
               <Name>Source2</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second source for math operator functions that have two sources. It is not used for the transform functions, filter functions, or visualization functions (except when the measurement trend visualization's measurement requires two sources).</Description>
            </Property>
            <Property>
               <Name>Source2</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second source for math operator functions that have two sources. It is not used for the transform functions, filter functions, or visualization functions (except when the measurement trend visualization's measurement requires two sources).</Description>
            </Property>
            <Property>
               <Name>Source2</Name>
               <Location>MathFunction2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second source for math operator functions that have two sources. It is not used for the transform functions, filter functions, or visualization functions (except when the measurement trend visualization's measurement requires two sources).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunction2Average</Name>
         <Description>IAgInfiniiVisionMathFunctionAverage interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunction2Average1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>MathFunction2Average</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Average;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Average;
	comobj.Count = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specify the number of waveforms to be averaged together.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>MathFunction2Average</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Average;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Average;
	comobj.Count = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specify the number of waveforms to be averaged together.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>MathFunction2Average</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Average;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Average;
	comobj.Count = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specify the number of waveforms to be averaged together.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>MathFunction2Average</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Average;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Average;
	comobj.Count = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specify the number of waveforms to be averaged together.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunction2Bus</Name>
         <Description>IAgInfiniiVisionMath2Bus interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunction2Bus1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ClockSource</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal source for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>ClockSource</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal source for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>ClockSource</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal source for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>ClockSource</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal source for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusSlopeNegative" Value="AgInfiniiVisionMathBusSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopePositive" Value="AgInfiniiVisionMathBusSlopePositive"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopeEither" Value="AgInfiniiVisionMathBusSlopeEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal edge for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusSlopeNegative" Value="AgInfiniiVisionMathBusSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopePositive" Value="AgInfiniiVisionMathBusSlopePositive"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopeEither" Value="AgInfiniiVisionMathBusSlopeEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal edge for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusSlopeNegative" Value="AgInfiniiVisionMathBusSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopePositive" Value="AgInfiniiVisionMathBusSlopePositive"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopeEither" Value="AgInfiniiVisionMathBusSlopeEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal edge for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusSlopeNegative" Value="AgInfiniiVisionMathBusSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopePositive" Value="AgInfiniiVisionMathBusSlopePositive"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopeEither" Value="AgInfiniiVisionMathBusSlopeEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal edge for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>YIncrement</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YIncrement = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with each increment in Chart Logic Bus data.</Description>
            </Property>
            <Property>
               <Name>YIncrement</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YIncrement = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with each increment in Chart Logic Bus data.</Description>
            </Property>
            <Property>
               <Name>YIncrement</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YIncrement = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with each increment in Chart Logic Bus data.</Description>
            </Property>
            <Property>
               <Name>YIncrement</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YIncrement = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with each increment in Chart Logic Bus data.</Description>
            </Property>
            <Property>
               <Name>YOrigin</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YOrigin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with Chart Logic Bus data equal to zero.</Description>
            </Property>
            <Property>
               <Name>YOrigin</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YOrigin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with Chart Logic Bus data equal to zero.</Description>
            </Property>
            <Property>
               <Name>YOrigin</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YOrigin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with Chart Logic Bus data equal to zero.</Description>
            </Property>
            <Property>
               <Name>YOrigin</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YOrigin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with Chart Logic Bus data equal to zero.</Description>
            </Property>
            <Property>
               <Name>YUnits</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsVolts" Value="AgInfiniiVisionMathBusYUnitsVolts"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsAmps" Value="AgInfiniiVisionMathBusYUnitsAmps"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsNone" Value="AgInfiniiVisionMathBusYUnitsNone"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the vertical units for the Chart Logic Bus operations.</Description>
            </Property>
            <Property>
               <Name>YUnits</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsVolts" Value="AgInfiniiVisionMathBusYUnitsVolts"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsAmps" Value="AgInfiniiVisionMathBusYUnitsAmps"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsNone" Value="AgInfiniiVisionMathBusYUnitsNone"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the vertical units for the Chart Logic Bus operations.</Description>
            </Property>
            <Property>
               <Name>YUnits</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsVolts" Value="AgInfiniiVisionMathBusYUnitsVolts"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsAmps" Value="AgInfiniiVisionMathBusYUnitsAmps"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsNone" Value="AgInfiniiVisionMathBusYUnitsNone"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the vertical units for the Chart Logic Bus operations.</Description>
            </Property>
            <Property>
               <Name>YUnits</Name>
               <Location>MathFunction2Bus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsVolts" Value="AgInfiniiVisionMathBusYUnitsVolts"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsAmps" Value="AgInfiniiVisionMathBusYUnitsAmps"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsNone" Value="AgInfiniiVisionMathBusYUnitsNone"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the vertical units for the Chart Logic Bus operations.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunction2FFT</Name>
         <Description>IAgInfiniiVisionMathFFT2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunction2FFT1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>VerticalUnits</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.VerticalUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.VerticalUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsdB" Value="AgInfiniiVisionMathFFTVerticalUnitsdB"/>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsVRMS" Value="AgInfiniiVisionMathFFTVerticalUnitsVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FFT vertical units.</Description>
            </Property>
            <Property>
               <Name>VerticalUnits</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.VerticalUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.VerticalUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsdB" Value="AgInfiniiVisionMathFFTVerticalUnitsdB"/>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsVRMS" Value="AgInfiniiVisionMathFFTVerticalUnitsVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FFT vertical units.</Description>
            </Property>
            <Property>
               <Name>VerticalUnits</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.VerticalUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.VerticalUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsdB" Value="AgInfiniiVisionMathFFTVerticalUnitsdB"/>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsVRMS" Value="AgInfiniiVisionMathFFTVerticalUnitsVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FFT vertical units.</Description>
            </Property>
            <Property>
               <Name>VerticalUnits</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.VerticalUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.VerticalUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsdB" Value="AgInfiniiVisionMathFFTVerticalUnitsdB"/>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsVRMS" Value="AgInfiniiVisionMathFFTVerticalUnitsVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FFT vertical units.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>MathFunction2FFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunction2FFT2</Name>
         <Description>IAgInfiniiVisionMathFunctionFFT2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunction2FFT21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>StartFrequency</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.StartFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.StartFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The start frequency in Hz in the FFT (Fast Fourier Transform) math function's displayed range.</Description>
            </Property>
            <Property>
               <Name>StartFrequency</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.StartFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.StartFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The start frequency in Hz in the FFT (Fast Fourier Transform) math function's displayed range.</Description>
            </Property>
            <Property>
               <Name>StopFrequency</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.StopFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.StopFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The stop frequency in Hz in the FFT (Fast Fourier Transform) math function's displayed range.</Description>
            </Property>
            <Property>
               <Name>StopFrequency</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.StopFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.StopFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The stop frequency in Hz in the FFT (Fast Fourier Transform) math function's displayed range.</Description>
            </Property>
            <Property>
               <Name>VerticalUnits</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.VerticalUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.VerticalUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsdB" Value="AgInfiniiVisionMathFFTVerticalUnitsdB"/>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsVRMS" Value="AgInfiniiVisionMathFFTVerticalUnitsVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FFT vertical units.</Description>
            </Property>
            <Property>
               <Name>VerticalUnits</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.VerticalUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.VerticalUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsdB" Value="AgInfiniiVisionMathFFTVerticalUnitsdB"/>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsVRMS" Value="AgInfiniiVisionMathFFTVerticalUnitsVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FFT vertical units.</Description>
            </Property>
            <Property>
               <Name>VerticalUnits</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.VerticalUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.VerticalUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsdB" Value="AgInfiniiVisionMathFFTVerticalUnitsdB"/>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsVRMS" Value="AgInfiniiVisionMathFFTVerticalUnitsVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FFT vertical units.</Description>
            </Property>
            <Property>
               <Name>VerticalUnits</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.VerticalUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.VerticalUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsdB" Value="AgInfiniiVisionMathFFTVerticalUnitsdB"/>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsVRMS" Value="AgInfiniiVisionMathFFTVerticalUnitsVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FFT vertical units.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>MathFunction2FFT2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT2;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunction2Filter</Name>
         <Description>IAgInfiniiVisionMath2FilterFrequency interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunction2Filter1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>HighPassBandwidth</Name>
               <Location>MathFunction2Filter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.HighPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.HighPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the high-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
            <Property>
               <Name>HighPassBandwidth</Name>
               <Location>MathFunction2Filter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.HighPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.HighPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the high-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
            <Property>
               <Name>HighPassBandwidth</Name>
               <Location>MathFunction2Filter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.HighPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.HighPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the high-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
            <Property>
               <Name>HighPassBandwidth</Name>
               <Location>MathFunction2Filter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.HighPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.HighPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the high-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
            <Property>
               <Name>LowPassBandwidth</Name>
               <Location>MathFunction2Filter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.LowPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.LowPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the low-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
            <Property>
               <Name>LowPassBandwidth</Name>
               <Location>MathFunction2Filter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.LowPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.LowPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the low-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
            <Property>
               <Name>LowPassBandwidth</Name>
               <Location>MathFunction2Filter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.LowPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.LowPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the low-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
            <Property>
               <Name>LowPassBandwidth</Name>
               <Location>MathFunction2Filter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.LowPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.LowPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the low-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunction2Integrate</Name>
         <Description>IAgInfiniiVisionMath2Integrate interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunction2Integrate1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>InputOffset</Name>
               <Location>MathFunction2Integrate</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Integrate;
	propertyValue = comobj.InputOffset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Integrate;
	comobj.InputOffset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies a DC offset correction factor for the Integrate math waveform input signal. This DC offset correction lets you level a ramped waveform.</Description>
            </Property>
            <Property>
               <Name>InputOffset</Name>
               <Location>MathFunction2Integrate</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Integrate;
	propertyValue = comobj.InputOffset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Integrate;
	comobj.InputOffset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies a DC offset correction factor for the Integrate math waveform input signal. This DC offset correction lets you level a ramped waveform.</Description>
            </Property>
            <Property>
               <Name>InputOffset</Name>
               <Location>MathFunction2Integrate</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Integrate;
	propertyValue = comobj.InputOffset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Integrate;
	comobj.InputOffset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies a DC offset correction factor for the Integrate math waveform input signal. This DC offset correction lets you level a ramped waveform.</Description>
            </Property>
            <Property>
               <Name>InputOffset</Name>
               <Location>MathFunction2Integrate</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Integrate;
	propertyValue = comobj.InputOffset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Integrate;
	comobj.InputOffset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies a DC offset correction factor for the Integrate math waveform input signal. This DC offset correction lets you level a ramped waveform.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunction2Linear</Name>
         <Description>IAgInfiniiVisionMath2Linear interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunction2Linear1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Gain</Name>
               <Location>MathFunction2Linear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	propertyValue = comobj.Gain;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	comobj.Gain = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Gain ("A" in Ax + B) for the Linear Math operation.</Description>
            </Property>
            <Property>
               <Name>Gain</Name>
               <Location>MathFunction2Linear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	propertyValue = comobj.Gain;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	comobj.Gain = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Gain ("A" in Ax + B) for the Linear Math operation.</Description>
            </Property>
            <Property>
               <Name>Gain</Name>
               <Location>MathFunction2Linear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	propertyValue = comobj.Gain;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	comobj.Gain = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Gain ("A" in Ax + B) for the Linear Math operation.</Description>
            </Property>
            <Property>
               <Name>Gain</Name>
               <Location>MathFunction2Linear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	propertyValue = comobj.Gain;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	comobj.Gain = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Gain ("A" in Ax + B) for the Linear Math operation.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>MathFunction2Linear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Offset ("B" in Ax + B) for the Linear Math operation.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>MathFunction2Linear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Offset ("B" in Ax + B) for the Linear Math operation.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>MathFunction2Linear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Offset ("B" in Ax + B) for the Linear Math operation.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>MathFunction2Linear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Offset ("B" in Ax + B) for the Linear Math operation.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunction2MeasurementTrend</Name>
         <Description>IAgInfiniiVisionMath2MeasurementTrend interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunction2MeasurementTrend1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>MathFunction2MeasurementTrendType</Name>
               <Location>MathFunction2MeasurementTrend</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFrequency" Value="AgInfiniiVisionMathMeasurementTrendTypeFrequency"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePeriod" Value="AgInfiniiVisionMathMeasurementTrendTypePeriod"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle" Value="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth" Value="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth" Value="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeRiseTime" Value="AgInfiniiVisionMathMeasurementTrendTypeRiseTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFallTime" Value="AgInfiniiVisionMathMeasurementTrendTypeFallTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVRatio" Value="AgInfiniiVisionMathMeasurementTrendTypeVRatio"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVAverage" Value="AgInfiniiVisionMathMeasurementTrendTypeVAverage"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeACRms" Value="AgInfiniiVisionMathMeasurementTrendTypeACRms"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the measurement whose trend is shown in the math waveform.</Description>
            </Property>
            <Property>
               <Name>MathFunction2MeasurementTrendType</Name>
               <Location>MathFunction2MeasurementTrend</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFrequency" Value="AgInfiniiVisionMathMeasurementTrendTypeFrequency"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePeriod" Value="AgInfiniiVisionMathMeasurementTrendTypePeriod"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle" Value="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth" Value="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth" Value="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeRiseTime" Value="AgInfiniiVisionMathMeasurementTrendTypeRiseTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFallTime" Value="AgInfiniiVisionMathMeasurementTrendTypeFallTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVRatio" Value="AgInfiniiVisionMathMeasurementTrendTypeVRatio"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVAverage" Value="AgInfiniiVisionMathMeasurementTrendTypeVAverage"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeACRms" Value="AgInfiniiVisionMathMeasurementTrendTypeACRms"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the measurement whose trend is shown in the math waveform.</Description>
            </Property>
            <Property>
               <Name>MathFunction2MeasurementTrendType</Name>
               <Location>MathFunction2MeasurementTrend</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFrequency" Value="AgInfiniiVisionMathMeasurementTrendTypeFrequency"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePeriod" Value="AgInfiniiVisionMathMeasurementTrendTypePeriod"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle" Value="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth" Value="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth" Value="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeRiseTime" Value="AgInfiniiVisionMathMeasurementTrendTypeRiseTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFallTime" Value="AgInfiniiVisionMathMeasurementTrendTypeFallTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVRatio" Value="AgInfiniiVisionMathMeasurementTrendTypeVRatio"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVAverage" Value="AgInfiniiVisionMathMeasurementTrendTypeVAverage"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeACRms" Value="AgInfiniiVisionMathMeasurementTrendTypeACRms"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the measurement whose trend is shown in the math waveform.</Description>
            </Property>
            <Property>
               <Name>MathFunction2MeasurementTrendType</Name>
               <Location>MathFunction2MeasurementTrend</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFrequency" Value="AgInfiniiVisionMathMeasurementTrendTypeFrequency"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePeriod" Value="AgInfiniiVisionMathMeasurementTrendTypePeriod"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle" Value="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth" Value="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth" Value="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeRiseTime" Value="AgInfiniiVisionMathMeasurementTrendTypeRiseTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFallTime" Value="AgInfiniiVisionMathMeasurementTrendTypeFallTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVRatio" Value="AgInfiniiVisionMathMeasurementTrendTypeVRatio"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVAverage" Value="AgInfiniiVisionMathMeasurementTrendTypeVAverage"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeACRms" Value="AgInfiniiVisionMathMeasurementTrendTypeACRms"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the measurement whose trend is shown in the math waveform.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunction2MeasurementTrend2</Name>
         <Description>IAgInfiniiVisionMathFunctionMeasurementTrend2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunction2MeasurementTrend21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>MathFunction2MeasurementTrend2Type</Name>
               <Location>MathFunction2MeasurementTrend2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend2;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend2;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFrequency" Value="AgInfiniiVisionMathMeasurementTrendTypeFrequency"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePeriod" Value="AgInfiniiVisionMathMeasurementTrendTypePeriod"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle" Value="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth" Value="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth" Value="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeRiseTime" Value="AgInfiniiVisionMathMeasurementTrendTypeRiseTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFallTime" Value="AgInfiniiVisionMathMeasurementTrendTypeFallTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVRatio" Value="AgInfiniiVisionMathMeasurementTrendTypeVRatio"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVAverage" Value="AgInfiniiVisionMathMeasurementTrendTypeVAverage"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeACRms" Value="AgInfiniiVisionMathMeasurementTrendTypeACRms"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the measurement whose trend is shown in the math waveform.</Description>
            </Property>
            <Property>
               <Name>MathFunction2MeasurementTrend2Type</Name>
               <Location>MathFunction2MeasurementTrend2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend2;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend2;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFrequency" Value="AgInfiniiVisionMathMeasurementTrendTypeFrequency"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePeriod" Value="AgInfiniiVisionMathMeasurementTrendTypePeriod"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle" Value="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth" Value="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth" Value="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeRiseTime" Value="AgInfiniiVisionMathMeasurementTrendTypeRiseTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFallTime" Value="AgInfiniiVisionMathMeasurementTrendTypeFallTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVRatio" Value="AgInfiniiVisionMathMeasurementTrendTypeVRatio"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVAverage" Value="AgInfiniiVisionMathMeasurementTrendTypeVAverage"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeACRms" Value="AgInfiniiVisionMathMeasurementTrendTypeACRms"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the measurement whose trend is shown in the math waveform.</Description>
            </Property>
            <Property>
               <Name>MathFunction2MeasurementTrend2Type</Name>
               <Location>MathFunction2MeasurementTrend2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend2;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend2;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFrequency" Value="AgInfiniiVisionMathMeasurementTrendTypeFrequency"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePeriod" Value="AgInfiniiVisionMathMeasurementTrendTypePeriod"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle" Value="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth" Value="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth" Value="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeRiseTime" Value="AgInfiniiVisionMathMeasurementTrendTypeRiseTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFallTime" Value="AgInfiniiVisionMathMeasurementTrendTypeFallTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVRatio" Value="AgInfiniiVisionMathMeasurementTrendTypeVRatio"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVAverage" Value="AgInfiniiVisionMathMeasurementTrendTypeVAverage"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeACRms" Value="AgInfiniiVisionMathMeasurementTrendTypeACRms"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the measurement whose trend is shown in the math waveform.</Description>
            </Property>
            <Property>
               <Name>MathFunction2MeasurementTrend2Type</Name>
               <Location>MathFunction2MeasurementTrend2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend2;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend2;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFrequency" Value="AgInfiniiVisionMathMeasurementTrendTypeFrequency"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePeriod" Value="AgInfiniiVisionMathMeasurementTrendTypePeriod"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle" Value="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth" Value="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth" Value="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeRiseTime" Value="AgInfiniiVisionMathMeasurementTrendTypeRiseTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFallTime" Value="AgInfiniiVisionMathMeasurementTrendTypeFallTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVRatio" Value="AgInfiniiVisionMathMeasurementTrendTypeVRatio"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVAverage" Value="AgInfiniiVisionMathMeasurementTrendTypeVAverage"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeACRms" Value="AgInfiniiVisionMathMeasurementTrendTypeACRms"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the measurement whose trend is shown in the math waveform.</Description>
            </Property>
            <Property>
               <Name>Slot</Name>
               <Location>MathFunction2MeasurementTrend2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend2;
	propertyValue = comobj.Slot;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend2;
	comobj.Slot = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMeasurementSlotNone" Value="AgInfiniiVisionMeasurementSlotNone"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot1" Value="AgInfiniiVisionMeasurementSlot1"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot2" Value="AgInfiniiVisionMeasurementSlot2"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot3" Value="AgInfiniiVisionMeasurementSlot3"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot4" Value="AgInfiniiVisionMeasurementSlot4"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot5" Value="AgInfiniiVisionMeasurementSlot5"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot6" Value="AgInfiniiVisionMeasurementSlot6"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot7" Value="AgInfiniiVisionMeasurementSlot7"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot8" Value="AgInfiniiVisionMeasurementSlot8"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot9" Value="AgInfiniiVisionMeasurementSlot9"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot10" Value="AgInfiniiVisionMeasurementSlot10"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The measurement whose trend is shown in the math waveform.</Description>
            </Property>
            <Property>
               <Name>Slot</Name>
               <Location>MathFunction2MeasurementTrend2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend2;
	propertyValue = comobj.Slot;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend2;
	comobj.Slot = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMeasurementSlotNone" Value="AgInfiniiVisionMeasurementSlotNone"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot1" Value="AgInfiniiVisionMeasurementSlot1"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot2" Value="AgInfiniiVisionMeasurementSlot2"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot3" Value="AgInfiniiVisionMeasurementSlot3"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot4" Value="AgInfiniiVisionMeasurementSlot4"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot5" Value="AgInfiniiVisionMeasurementSlot5"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot6" Value="AgInfiniiVisionMeasurementSlot6"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot7" Value="AgInfiniiVisionMeasurementSlot7"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot8" Value="AgInfiniiVisionMeasurementSlot8"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot9" Value="AgInfiniiVisionMeasurementSlot9"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlot10" Value="AgInfiniiVisionMeasurementSlot10"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The measurement whose trend is shown in the math waveform.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunction2Smoothing</Name>
         <Description>IAgInfiniiVisionMathFunction2Smoothing interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunction2Smoothing1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Points</Name>
               <Location>MathFunction2Smoothing</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Smoothing;
	propertyValue = comobj.Points;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Smoothing;
	comobj.Points = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of smoothing points to use.</Description>
            </Property>
            <Property>
               <Name>Points</Name>
               <Location>MathFunction2Smoothing</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Smoothing;
	propertyValue = comobj.Points;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Smoothing;
	comobj.Points = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of smoothing points to use.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunctionAverage</Name>
         <Description>IAgInfiniiVisionMathFunctionAverage interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunctionAverage1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>MathFunctionAverage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Average;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Average;
	comobj.Count = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specify the number of waveforms to be averaged together.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>MathFunctionAverage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Average;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Average;
	comobj.Count = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specify the number of waveforms to be averaged together.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunctionBus</Name>
         <Description>IAgInfiniiVisionMath2Bus interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunctionBus1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ClockSource</Name>
               <Location>MathFunctionBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal source for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>ClockSource</Name>
               <Location>MathFunctionBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal source for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>MathFunctionBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusSlopeNegative" Value="AgInfiniiVisionMathBusSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopePositive" Value="AgInfiniiVisionMathBusSlopePositive"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopeEither" Value="AgInfiniiVisionMathBusSlopeEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal edge for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>MathFunctionBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusSlopeNegative" Value="AgInfiniiVisionMathBusSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopePositive" Value="AgInfiniiVisionMathBusSlopePositive"/>
                     <Enum Name="AgInfiniiVisionMathBusSlopeEither" Value="AgInfiniiVisionMathBusSlopeEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock signal edge for the Chart Logic Bus State operation.</Description>
            </Property>
            <Property>
               <Name>YIncrement</Name>
               <Location>MathFunctionBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YIncrement = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with each increment in Chart Logic Bus data.</Description>
            </Property>
            <Property>
               <Name>YIncrement</Name>
               <Location>MathFunctionBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YIncrement = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with each increment in Chart Logic Bus data.</Description>
            </Property>
            <Property>
               <Name>YOrigin</Name>
               <Location>MathFunctionBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YOrigin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with Chart Logic Bus data equal to zero.</Description>
            </Property>
            <Property>
               <Name>YOrigin</Name>
               <Location>MathFunctionBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YOrigin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value associated with Chart Logic Bus data equal to zero.</Description>
            </Property>
            <Property>
               <Name>YUnits</Name>
               <Location>MathFunctionBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsVolts" Value="AgInfiniiVisionMathBusYUnitsVolts"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsAmps" Value="AgInfiniiVisionMathBusYUnitsAmps"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsNone" Value="AgInfiniiVisionMathBusYUnitsNone"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the vertical units for the Chart Logic Bus operations.</Description>
            </Property>
            <Property>
               <Name>YUnits</Name>
               <Location>MathFunctionBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	propertyValue = comobj.YUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Bus;
	comobj.YUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsVolts" Value="AgInfiniiVisionMathBusYUnitsVolts"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsAmps" Value="AgInfiniiVisionMathBusYUnitsAmps"/>
                     <Enum Name="AgInfiniiVisionMathBusYUnitsNone" Value="AgInfiniiVisionMathBusYUnitsNone"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the vertical units for the Chart Logic Bus operations.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunctionFFT</Name>
         <Description>IAgInfiniiVisionMathFFT2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunctionFFT1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>MathFunctionFFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>MathFunctionFFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Center frequency for FFT function. Permissible values are 0 Hz to 25E9 Hz.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>MathFunctionFFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>MathFunctionFFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.Span;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency span of the display when FFT is selected.</Description>
            </Property>
            <Property>
               <Name>VerticalUnits</Name>
               <Location>MathFunctionFFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.VerticalUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.VerticalUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsdB" Value="AgInfiniiVisionMathFFTVerticalUnitsdB"/>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsVRMS" Value="AgInfiniiVisionMathFFTVerticalUnitsVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FFT vertical units.</Description>
            </Property>
            <Property>
               <Name>VerticalUnits</Name>
               <Location>MathFunctionFFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.VerticalUnits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.VerticalUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsdB" Value="AgInfiniiVisionMathFFTVerticalUnitsdB"/>
                     <Enum Name="AgInfiniiVisionMathFFTVerticalUnitsVRMS" Value="AgInfiniiVisionMathFFTVerticalUnitsVRMS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FFT vertical units.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>MathFunctionFFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
            <Property>
               <Name>WindowType</Name>
               <Location>MathFunctionFFT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	propertyValue = comobj.WindowType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FFT;
	comobj.WindowType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeRectangular" Value="AgInfiniiVisionMathFFTWindowTypeRectangular"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeHanning" Value="AgInfiniiVisionMathFFTWindowTypeHanning"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeFlatTop" Value="AgInfiniiVisionMathFFTWindowTypeFlatTop"/>
                     <Enum Name="AgInfiniiVisionMathFFTWindowTypeBHarris" Value="AgInfiniiVisionMathFFTWindowTypeBHarris"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Windowing transforms or operations for the FFT.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunctionFilter</Name>
         <Description>IAgInfiniiVisionMath2FilterFrequency interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunctionFilter1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>HighPassBandwidth</Name>
               <Location>MathFunctionFilter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.HighPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.HighPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the high-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
            <Property>
               <Name>HighPassBandwidth</Name>
               <Location>MathFunctionFilter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.HighPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.HighPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the high-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
            <Property>
               <Name>LowPassBandwidth</Name>
               <Location>MathFunctionFilter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.LowPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.LowPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the low-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
            <Property>
               <Name>LowPassBandwidth</Name>
               <Location>MathFunctionFilter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.LowPassBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.LowPassBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the low-pass filter's -3 dB cutoff frequency.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunctionIntegrate</Name>
         <Description>IAgInfiniiVisionMath2Integrate interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunctionIntegrate1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>InputOffset</Name>
               <Location>MathFunctionIntegrate</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Integrate;
	propertyValue = comobj.InputOffset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Integrate;
	comobj.InputOffset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies a DC offset correction factor for the Integrate math waveform input signal. This DC offset correction lets you level a ramped waveform.</Description>
            </Property>
            <Property>
               <Name>InputOffset</Name>
               <Location>MathFunctionIntegrate</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Integrate;
	propertyValue = comobj.InputOffset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Integrate;
	comobj.InputOffset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies a DC offset correction factor for the Integrate math waveform input signal. This DC offset correction lets you level a ramped waveform.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunctionLinear</Name>
         <Description>IAgInfiniiVisionMath2Linear interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunctionLinear1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Gain</Name>
               <Location>MathFunctionLinear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	propertyValue = comobj.Gain;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	comobj.Gain = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Gain ("A" in Ax + B) for the Linear Math operation.</Description>
            </Property>
            <Property>
               <Name>Gain</Name>
               <Location>MathFunctionLinear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	propertyValue = comobj.Gain;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	comobj.Gain = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Gain ("A" in Ax + B) for the Linear Math operation.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>MathFunctionLinear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Offset ("B" in Ax + B) for the Linear Math operation.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>MathFunctionLinear</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Linear;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Offset ("B" in Ax + B) for the Linear Math operation.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunctionMeasurementTrend</Name>
         <Description>IAgInfiniiVisionMath2MeasurementTrend interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunctionMeasurementTrend1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>MathFunctionMeasurementTrendType</Name>
               <Location>MathFunctionMeasurementTrend</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFrequency" Value="AgInfiniiVisionMathMeasurementTrendTypeFrequency"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePeriod" Value="AgInfiniiVisionMathMeasurementTrendTypePeriod"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle" Value="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth" Value="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth" Value="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeRiseTime" Value="AgInfiniiVisionMathMeasurementTrendTypeRiseTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFallTime" Value="AgInfiniiVisionMathMeasurementTrendTypeFallTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVRatio" Value="AgInfiniiVisionMathMeasurementTrendTypeVRatio"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVAverage" Value="AgInfiniiVisionMathMeasurementTrendTypeVAverage"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeACRms" Value="AgInfiniiVisionMathMeasurementTrendTypeACRms"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the measurement whose trend is shown in the math waveform.</Description>
            </Property>
            <Property>
               <Name>MathFunctionMeasurementTrendType</Name>
               <Location>MathFunctionMeasurementTrend</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.MeasurementTrend;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFrequency" Value="AgInfiniiVisionMathMeasurementTrendTypeFrequency"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePeriod" Value="AgInfiniiVisionMathMeasurementTrendTypePeriod"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle" Value="AgInfiniiVisionMathMeasurementTrendTypeDutyCycle"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth" Value="AgInfiniiVisionMathMeasurementTrendTypePositiveWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth" Value="AgInfiniiVisionMathMeasurementTrendTypeNegativeWidth"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeRiseTime" Value="AgInfiniiVisionMathMeasurementTrendTypeRiseTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeFallTime" Value="AgInfiniiVisionMathMeasurementTrendTypeFallTime"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVRatio" Value="AgInfiniiVisionMathMeasurementTrendTypeVRatio"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeVAverage" Value="AgInfiniiVisionMathMeasurementTrendTypeVAverage"/>
                     <Enum Name="AgInfiniiVisionMathMeasurementTrendTypeACRms" Value="AgInfiniiVisionMathMeasurementTrendTypeACRms"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the measurement whose trend is shown in the math waveform.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MathFunctions</Name>
         <Description>IAgInfiniiVisionMathFunctions interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunctions1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>MathFunctions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of mathfunctions.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>MathFunctions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MathFunctions;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionMathFunction interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>MathFunctions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MathFunctions;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the mathfunction name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>MathFunctions2</Name>
         <Description>IAgInfiniiVisionMathFunctions2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MathFunctions21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>MathFunctions2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of mathfunctions.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>MathFunctions2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MathFunctions2;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of mathfunctions.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>MathFunctions2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MathFunctions2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionMathFunction interface.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>MathFunctions2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MathFunctions2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionMathFunction interface.</Description>
            </Method>
            <Method>
               <Name>Item2</Name>
               <Location>MathFunctions2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item2(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MathFunctions2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item2(Name, varargin{:});
end
[Val] = comobj.Item2(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionMathFunction interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>MathFunctions2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MathFunctions2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the mathfunction name for a given index.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>MathFunctions2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MathFunctions2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the mathfunction name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Measurement</Name>
         <Description>IAgInfiniiVisionMeasurement interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Measurement1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>FetchWaveform</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = FetchWaveform(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.FetchWaveform([0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>FetchWaveform</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = FetchWaveform(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.FetchWaveform([0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMeasurement</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = FetchWaveformMeasurement(obj, MeasFunction, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.FetchWaveformMeasurement(MeasFunction, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform measurement for this channel. The acquisition must be made prior to calling this method. Call this method separately for each measurement.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMeasurement</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = FetchWaveformMeasurement(obj, MeasFunction, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.FetchWaveformMeasurement(MeasFunction, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform measurement for this channel. The acquisition must be made prior to calling this method. Call this method separately for each measurement.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMinMax</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, InitialX, XIncrement] = FetchWaveformMinMax(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[MinWaveform, MaxWaveform, InitialX, XIncrement] = comobj.FetchWaveformMinMax([0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the previously acquired minimum and maximum waveforms for this specified channel. The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMinMax</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, InitialX, XIncrement] = FetchWaveformMinMax(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[MinWaveform, MaxWaveform, InitialX, XIncrement] = comobj.FetchWaveformMinMax([0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the previously acquired minimum and maximum waveforms for this specified channel. The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>ReadWaveform</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = ReadWaveform(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.ReadWaveform(int32(MaxTimeMilliseconds), [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the waveform for this channel. Call FetchWaveform to obtain the waveforms for other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveform</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = ReadWaveform(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.ReadWaveform(int32(MaxTimeMilliseconds), [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the waveform for this channel. Call FetchWaveform to obtain the waveforms for other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMeasurement</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = ReadWaveformMeasurement(obj, MeasFunction, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.ReadWaveformMeasurement(MeasFunction, int32(MaxTimeMilliseconds), 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the measurement for this channel. Call FetchWaveformMeasurement to obtain other measurements for this or other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMeasurement</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = ReadWaveformMeasurement(obj, MeasFunction, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.ReadWaveformMeasurement(MeasFunction, int32(MaxTimeMilliseconds), 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the measurement for this channel. Call FetchWaveformMeasurement to obtain other measurements for this or other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMinMax</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, InitialX, XIncrement] = ReadWaveformMinMax(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[MinWaveform, MaxWaveform, InitialX, XIncrement] = comobj.ReadWaveformMinMax(int32(MaxTimeMilliseconds), [0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the min/max waveforms for this channel. Call FetchMinMaxWaveform to obtain the min/max waveforms for other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMinMax</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, InitialX, XIncrement] = ReadWaveformMinMax(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[MinWaveform, MaxWaveform, InitialX, XIncrement] = comobj.ReadWaveformMinMax(int32(MaxTimeMilliseconds), [0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the min/max waveforms for this channel. Call FetchMinMaxWaveform to obtain the min/max waveforms for other channels.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Measurement2</Name>
         <Description>IAgInfiniiVisionMeasurement2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Measurement21" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>ConfigureJitterMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureJitterMeasurement(obj, MeasFunction, Slope, NumberOfPeriods, Unit)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureJitterMeasurement(MeasFunction, Slope, int32(NumberOfPeriods), Unit);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configure and adds the selected Jitter measurement.</Description>
            </Method>
            <Method>
               <Name>ConfigureJitterMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureJitterMeasurement(obj, MeasFunction, Slope, NumberOfPeriods, Unit)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureJitterMeasurement(MeasFunction, Slope, int32(NumberOfPeriods), Unit);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configure and adds the selected Jitter measurement.</Description>
            </Method>
            <Method>
               <Name>FetchJitterMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Result] = FetchJitterMeasurement(obj, MeasFunction, Slope, NumberOfPeriods, Unit, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Result] = comobj.FetchJitterMeasurement(MeasFunction, Slope, int32(NumberOfPeriods), Unit, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the measured value of the selected measurement.</Description>
            </Method>
            <Method>
               <Name>FetchJitterMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Result] = FetchJitterMeasurement(obj, MeasFunction, Slope, NumberOfPeriods, Unit, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Result] = comobj.FetchJitterMeasurement(MeasFunction, Slope, int32(NumberOfPeriods), Unit, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the measured value of the selected measurement.</Description>
            </Method>
            <Method>
               <Name>FetchWaveform</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = FetchWaveform(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.FetchWaveform([0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>FetchWaveform</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = FetchWaveform(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.FetchWaveform([0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>FetchWaveform</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = FetchWaveform(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.FetchWaveform([0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>FetchWaveform</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = FetchWaveform(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.FetchWaveform([0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = FetchWaveformMeasurement(obj, MeasFunction, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.FetchWaveformMeasurement(MeasFunction, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform measurement for this channel. The acquisition must be made prior to calling this method. Call this method separately for each measurement.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = FetchWaveformMeasurement(obj, MeasFunction, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.FetchWaveformMeasurement(MeasFunction, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform measurement for this channel. The acquisition must be made prior to calling this method. Call this method separately for each measurement.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = FetchWaveformMeasurement(obj, MeasFunction, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.FetchWaveformMeasurement(MeasFunction, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform measurement for this channel. The acquisition must be made prior to calling this method. Call this method separately for each measurement.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = FetchWaveformMeasurement(obj, MeasFunction, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.FetchWaveformMeasurement(MeasFunction, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform measurement for this channel. The acquisition must be made prior to calling this method. Call this method separately for each measurement.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMinMax</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, InitialX, XIncrement] = FetchWaveformMinMax(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[MinWaveform, MaxWaveform, InitialX, XIncrement] = comobj.FetchWaveformMinMax([0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the previously acquired minimum and maximum waveforms for this specified channel. The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMinMax</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, InitialX, XIncrement] = FetchWaveformMinMax(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[MinWaveform, MaxWaveform, InitialX, XIncrement] = comobj.FetchWaveformMinMax([0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the previously acquired minimum and maximum waveforms for this specified channel. The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMinMax</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, InitialX, XIncrement] = FetchWaveformMinMax(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[MinWaveform, MaxWaveform, InitialX, XIncrement] = comobj.FetchWaveformMinMax([0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the previously acquired minimum and maximum waveforms for this specified channel. The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMinMax</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, InitialX, XIncrement] = FetchWaveformMinMax(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[MinWaveform, MaxWaveform, InitialX, XIncrement] = comobj.FetchWaveformMinMax([0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the previously acquired minimum and maximum waveforms for this specified channel. The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>ReadJitterMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Result] = ReadJitterMeasurement(obj, MeasFunction, MaxTimeMilliseconds, Slope, NumberOfPeriods, Unit, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Result] = comobj.ReadJitterMeasurement(MeasFunction, int32(MaxTimeMilliseconds), Slope, int32(NumberOfPeriods), Unit, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the measured value of the selected measurement.</Description>
            </Method>
            <Method>
               <Name>ReadJitterMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Result] = ReadJitterMeasurement(obj, MeasFunction, MaxTimeMilliseconds, Slope, NumberOfPeriods, Unit, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Result] = comobj.ReadJitterMeasurement(MeasFunction, int32(MaxTimeMilliseconds), Slope, int32(NumberOfPeriods), Unit, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the measured value of the selected measurement.</Description>
            </Method>
            <Method>
               <Name>ReadWaveform</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = ReadWaveform(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.ReadWaveform(int32(MaxTimeMilliseconds), [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the waveform for this channel. Call FetchWaveform to obtain the waveforms for other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveform</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = ReadWaveform(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.ReadWaveform(int32(MaxTimeMilliseconds), [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the waveform for this channel. Call FetchWaveform to obtain the waveforms for other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveform</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = ReadWaveform(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.ReadWaveform(int32(MaxTimeMilliseconds), [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the waveform for this channel. Call FetchWaveform to obtain the waveforms for other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveform</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, InitialX, XIncrement] = ReadWaveform(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[WaveformArray, InitialX, XIncrement] = comobj.ReadWaveform(int32(MaxTimeMilliseconds), [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the waveform for this channel. Call FetchWaveform to obtain the waveforms for other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = ReadWaveformMeasurement(obj, MeasFunction, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.ReadWaveformMeasurement(MeasFunction, int32(MaxTimeMilliseconds), 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the measurement for this channel. Call FetchWaveformMeasurement to obtain other measurements for this or other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = ReadWaveformMeasurement(obj, MeasFunction, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.ReadWaveformMeasurement(MeasFunction, int32(MaxTimeMilliseconds), 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the measurement for this channel. Call FetchWaveformMeasurement to obtain other measurements for this or other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = ReadWaveformMeasurement(obj, MeasFunction, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.ReadWaveformMeasurement(MeasFunction, int32(MaxTimeMilliseconds), 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the measurement for this channel. Call FetchWaveformMeasurement to obtain other measurements for this or other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMeasurement</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = ReadWaveformMeasurement(obj, MeasFunction, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.ReadWaveformMeasurement(MeasFunction, int32(MaxTimeMilliseconds), 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the measurement for this channel. Call FetchWaveformMeasurement to obtain other measurements for this or other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMinMax</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, InitialX, XIncrement] = ReadWaveformMinMax(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[MinWaveform, MaxWaveform, InitialX, XIncrement] = comobj.ReadWaveformMinMax(int32(MaxTimeMilliseconds), [0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the min/max waveforms for this channel. Call FetchMinMaxWaveform to obtain the min/max waveforms for other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMinMax</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, InitialX, XIncrement] = ReadWaveformMinMax(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[MinWaveform, MaxWaveform, InitialX, XIncrement] = comobj.ReadWaveformMinMax(int32(MaxTimeMilliseconds), [0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the min/max waveforms for this channel. Call FetchMinMaxWaveform to obtain the min/max waveforms for other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMinMax</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, InitialX, XIncrement] = ReadWaveformMinMax(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[MinWaveform, MaxWaveform, InitialX, XIncrement] = comobj.ReadWaveformMinMax(int32(MaxTimeMilliseconds), [0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the min/max waveforms for this channel. Call FetchMinMaxWaveform to obtain the min/max waveforms for other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMinMax</Name>
               <Location>Measurement2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, InitialX, XIncrement] = ReadWaveformMinMax(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[MinWaveform, MaxWaveform, InitialX, XIncrement] = comobj.ReadWaveformMinMax(int32(MaxTimeMilliseconds), [0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the min/max waveforms for this channel. Call FetchMinMaxWaveform to obtain the min/max waveforms for other channels.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Measurements</Name>
         <Description>IAgInfiniiVisionMeasurements interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Measurements1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the number of channels that measurements can use as a source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Abort</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Abort(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
comobj.Abort();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Aborts an acquisition and returns the oscilloscope to the Idle state.</Description>
            </Method>
            <Method>
               <Name>AutoSetup</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Automatically configures all the oscilloscopes settings based on the input signals.</Description>
            </Method>
            <Method>
               <Name>Clear</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears all selected measurements and markers from the screen</Description>
            </Method>
            <Method>
               <Name>Initiate</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initiate(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
comobj.Initiate();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates a waveform acquisition. The oscilloscope leaves the Idle state and waits for a trigger. The oscilloscope acquires a waveform for each enabled channel.</Description>
            </Method>
            <Method>
               <Name>IsWaveformElementInvalid</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = IsWaveformElementInvalid(obj, Element)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.IsWaveformElementInvalid(double(Element));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns False if an element in a waveform array returned by the driver contains a valid voltage. Returns True if an element in a waveform array returned by the driver contains a value indicating that the oscilloscope could not sample a voltage.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionMeasurement interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Read Only - Returns the measurement name for a given index.</Description>
            </Method>
            <Method>
               <Name>Status</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Status(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.Status();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns whether an acquisition is in progress, complete, or if the status is unknown.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Measurements2</Name>
         <Description>IAgInfiniiVisionMeasurements2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Measurements21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements2;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the number of channels that measurements can use as a source.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements2;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the number of channels that measurements can use as a source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Abort</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Abort(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
comobj.Abort();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Aborts an acquisition and returns the oscilloscope to the Idle state.</Description>
            </Method>
            <Method>
               <Name>Abort</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Abort(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
comobj.Abort();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Aborts an acquisition and returns the oscilloscope to the Idle state.</Description>
            </Method>
            <Method>
               <Name>AutoSetup</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Automatically configures all the oscilloscopes settings based on the input signals.</Description>
            </Method>
            <Method>
               <Name>AutoSetup</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Automatically configures all the oscilloscopes settings based on the input signals.</Description>
            </Method>
            <Method>
               <Name>Clear</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears all selected measurements and markers from the screen</Description>
            </Method>
            <Method>
               <Name>Clear</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears all selected measurements and markers from the screen</Description>
            </Method>
            <Method>
               <Name>Initiate</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initiate(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
comobj.Initiate();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates a waveform acquisition. The oscilloscope leaves the Idle state and waits for a trigger. The oscilloscope acquires a waveform for each enabled channel.</Description>
            </Method>
            <Method>
               <Name>Initiate</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initiate(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
comobj.Initiate();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates a waveform acquisition. The oscilloscope leaves the Idle state and waits for a trigger. The oscilloscope acquires a waveform for each enabled channel.</Description>
            </Method>
            <Method>
               <Name>IsWaveformElementInvalid</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = IsWaveformElementInvalid(obj, Element)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.IsWaveformElementInvalid(double(Element));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns False if an element in a waveform array returned by the driver contains a valid voltage. Returns True if an element in a waveform array returned by the driver contains a value indicating that the oscilloscope could not sample a voltage.</Description>
            </Method>
            <Method>
               <Name>IsWaveformElementInvalid</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = IsWaveformElementInvalid(obj, Element)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.IsWaveformElementInvalid(double(Element));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns False if an element in a waveform array returned by the driver contains a valid voltage. Returns True if an element in a waveform array returned by the driver contains a value indicating that the oscilloscope could not sample a voltage.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionMeasurement interface.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionMeasurement interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Read Only - Returns the measurement name for a given index.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Read Only - Returns the measurement name for a given index.</Description>
            </Method>
            <Method>
               <Name>Status</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Status(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.Status();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns whether an acquisition is in progress, complete, or if the status is unknown.</Description>
            </Method>
            <Method>
               <Name>Status</Name>
               <Location>Measurements2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Status(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.Status();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns whether an acquisition is in progress, complete, or if the status is unknown.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Measurements3</Name>
         <Description>IAgInfiniiVisionMeasurements3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Measurements31" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the number of channels that measurements can use as a source.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the number of channels that measurements can use as a source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Abort</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Abort(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
comobj.Abort();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Aborts an acquisition and returns the oscilloscope to the Idle state.</Description>
            </Method>
            <Method>
               <Name>Abort</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Abort(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
comobj.Abort();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Aborts an acquisition and returns the oscilloscope to the Idle state.</Description>
            </Method>
            <Method>
               <Name>AutoSetup</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Automatically configures all the oscilloscopes settings based on the input signals.</Description>
            </Method>
            <Method>
               <Name>AutoSetup</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Automatically configures all the oscilloscopes settings based on the input signals.</Description>
            </Method>
            <Method>
               <Name>Clear</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears all selected measurements and markers from the screen</Description>
            </Method>
            <Method>
               <Name>Clear</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears all selected measurements and markers from the screen</Description>
            </Method>
            <Method>
               <Name>Initiate</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initiate(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
comobj.Initiate();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates a waveform acquisition. The oscilloscope leaves the Idle state and waits for a trigger. The oscilloscope acquires a waveform for each enabled channel.</Description>
            </Method>
            <Method>
               <Name>Initiate</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initiate(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
comobj.Initiate();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates a waveform acquisition. The oscilloscope leaves the Idle state and waits for a trigger. The oscilloscope acquires a waveform for each enabled channel.</Description>
            </Method>
            <Method>
               <Name>IsWaveformElementInvalid</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = IsWaveformElementInvalid(obj, Element)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.IsWaveformElementInvalid(double(Element));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns False if an element in a waveform array returned by the driver contains a valid voltage. Returns True if an element in a waveform array returned by the driver contains a value indicating that the oscilloscope could not sample a voltage.</Description>
            </Method>
            <Method>
               <Name>IsWaveformElementInvalid</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = IsWaveformElementInvalid(obj, Element)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.IsWaveformElementInvalid(double(Element));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns False if an element in a waveform array returned by the driver contains a valid voltage. Returns True if an element in a waveform array returned by the driver contains a value indicating that the oscilloscope could not sample a voltage.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionMeasurement interface.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionMeasurement interface.</Description>
            </Method>
            <Method>
               <Name>Item2</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item2(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item2(Name, varargin{:});
end
[Val] = comobj.Item2(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionMeasurement interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Read Only - Returns the measurement name for a given index.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Read Only - Returns the measurement name for a given index.</Description>
            </Method>
            <Method>
               <Name>Status</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Status(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.Status();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns whether an acquisition is in progress, complete, or if the status is unknown.</Description>
            </Method>
            <Method>
               <Name>Status</Name>
               <Location>Measurements3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Status(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.Status();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns whether an acquisition is in progress, complete, or if the status is unknown.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Measurements3Configuration</Name>
         <Description>IAgInfiniiVisionMeasurementsConfiguration interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Measurements3Configuration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DelayOccurrence1</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.DelayOccurrence1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.DelayOccurrence1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The occurrence count for the first waveform source of a generic delay measurement.</Description>
            </Property>
            <Property>
               <Name>DelayOccurrence2</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.DelayOccurrence2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.DelayOccurrence2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The occurrence count for the second waveform source of a generic delay measurement.</Description>
            </Property>
            <Property>
               <Name>DelaySlope1</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.DelaySlope1;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.DelaySlope1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMeasurementSlopePositive" Value="AgInfiniiVisionMeasurementSlopePositive"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlopeNegative" Value="AgInfiniiVisionMeasurementSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the slope for the first waveform source of a generic delay measurement.</Description>
            </Property>
            <Property>
               <Name>DelaySlope2</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.DelaySlope2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.DelaySlope2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMeasurementSlopePositive" Value="AgInfiniiVisionMeasurementSlopePositive"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlopeNegative" Value="AgInfiniiVisionMeasurementSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the slope for the second waveform source of a generic delay measurement.</Description>
            </Property>
            <Property>
               <Name>MarkersEnabled</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.MarkersEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.MarkersEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables markers for tracking measurements on the display. This feature is always on.</Description>
            </Property>
            <Property>
               <Name>Source2</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.Source2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.Source2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Second source for measurements such as Delay, Phase etc.</Description>
            </Property>
            <Property>
               <Name>TimeAtEdgeOccurrence</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.TimeAtEdgeOccurrence;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.TimeAtEdgeOccurrence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The occurrence count for the TimeAtEdge measurement.</Description>
            </Property>
            <Property>
               <Name>TimeAtEdgeSlope</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.TimeAtEdgeSlope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.TimeAtEdgeSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMeasurementSlopePositive" Value="AgInfiniiVisionMeasurementSlopePositive"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlopeNegative" Value="AgInfiniiVisionMeasurementSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The edge slope for a TimeAtEdge measurement.</Description>
            </Property>
            <Property>
               <Name>TimeAtValueOccurrence</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.TimeAtValueOccurrence;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.TimeAtValueOccurrence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The occurrence count for the TimeAtValue measurement.</Description>
            </Property>
            <Property>
               <Name>TimeAtValueSlope</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.TimeAtValueSlope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.TimeAtValueSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMeasurementSlopePositive" Value="AgInfiniiVisionMeasurementSlopePositive"/>
                     <Enum Name="AgInfiniiVisionMeasurementSlopeNegative" Value="AgInfiniiVisionMeasurementSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The edge slope for a TimeAtValue measurement.</Description>
            </Property>
            <Property>
               <Name>TimeAtValueValue</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.TimeAtValueValue;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.TimeAtValueValue = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The voltage for the TimeAtValue measurement.</Description>
            </Property>
            <Property>
               <Name>ValueAtTimeTime</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.ValueAtTimeTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.ValueAtTimeTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The time (in seconds) used to make the ValueAtTime measurement.</Description>
            </Property>
            <Property>
               <Name>Window</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	propertyValue = comobj.Window;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Configuration;
	comobj.Window = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMeasurementWindowTypeMain" Value="AgInfiniiVisionMeasurementWindowTypeMain"/>
                     <Enum Name="AgInfiniiVisionMeasurementWindowTypeZoom" Value="AgInfiniiVisionMeasurementWindowTypeZoom"/>
                     <Enum Name="AgInfiniiVisionMeasurementWindowTypeAuto" Value="AgInfiniiVisionMeasurementWindowTypeAuto"/>
                     <Enum Name="AgInfiniiVisionMeasurementWindowTypeGate" Value="AgInfiniiVisionMeasurementWindowTypeGate"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Measurement window when zoomed time base is selected.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ConfigureDelay</Name>
               <Location>Measurements3Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureDelay(obj, Source2, DelaySlope1, DelaySlope2, DelayOccurrence1, DelayOccurrence2)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
comobj = comobj.Configuration;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureDelay(Source2, DelaySlope1, DelaySlope2, int32(DelayOccurrence1), int32(DelayOccurrence2));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the edge specifications for the delay and phase measurements.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Measurements3Statistics</Name>
         <Description>IAgInfiniiVisionMeasurements2Statistics interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Measurements3Statistics1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Measurements3Statistics</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Statistics;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Statistics;
	comobj.Count = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the maximum number of values used when calculating measurement statistics.</Description>
            </Property>
            <Property>
               <Name>DisplayEnabled</Name>
               <Location>Measurements3Statistics</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Statistics;
	propertyValue = comobj.DisplayEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Statistics;
	comobj.DisplayEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the display of the measurement statistics.</Description>
            </Property>
            <Property>
               <Name>Format</Name>
               <Location>Measurements3Statistics</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Statistics;
	propertyValue = comobj.Format;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Statistics;
	comobj.Format = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMeasurementStatisticsFormatAll" Value="AgInfiniiVisionMeasurementStatisticsFormatAll"/>
                     <Enum Name="AgInfiniiVisionMeasurementStatisticsFormatCurrent" Value="AgInfiniiVisionMeasurementStatisticsFormatCurrent"/>
                     <Enum Name="AgInfiniiVisionMeasurementStatisticsFormatMinimum" Value="AgInfiniiVisionMeasurementStatisticsFormatMinimum"/>
                     <Enum Name="AgInfiniiVisionMeasurementStatisticsFormatMaximum" Value="AgInfiniiVisionMeasurementStatisticsFormatMaximum"/>
                     <Enum Name="AgInfiniiVisionMeasurementStatisticsFormatMean" Value="AgInfiniiVisionMeasurementStatisticsFormatMean"/>
                     <Enum Name="AgInfiniiVisionMeasurementStatisticsFormatStandardDeviation" Value="AgInfiniiVisionMeasurementStatisticsFormatStandardDeviation"/>
                     <Enum Name="AgInfiniiVisionMeasurementStatisticsFormatCount" Value="AgInfiniiVisionMeasurementStatisticsFormatCount"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of information returned by the GetResults() method.</Description>
            </Property>
            <Property>
               <Name>RelativeStdDevEnabled</Name>
               <Location>Measurements3Statistics</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Statistics;
	propertyValue = comobj.RelativeStdDevEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements3;
	comobj = comobj.Statistics;
	comobj.RelativeStdDevEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Disables or enables relative standard deviations, that is, standard deviation/mean, in the measurement statistics.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>GetResults</Name>
               <Location>Measurements3Statistics</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Results] = GetResults(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
comobj = comobj.Statistics;
feature('COM_SafeArraySingleDim',1);
[Results] = comobj.GetResults('');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the results of the continuously displayed measurements.</Description>
            </Method>
            <Method>
               <Name>Increment</Name>
               <Location>Measurements3Statistics</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Increment(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
comobj = comobj.Statistics;
feature('COM_SafeArraySingleDim',1);
comobj.Increment();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This command updates the statistics once (incrementing the count by one) using the current measurement values. It corresponds to the front panel Increment Statistics softkey in the Measurement Statistics Menu.</Description>
            </Method>
            <Method>
               <Name>InstallMeasurement</Name>
               <Location>Measurements3Statistics</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function InstallMeasurement(obj, Source, Measurement)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
comobj = comobj.Statistics;
feature('COM_SafeArraySingleDim',1);
comobj.InstallMeasurement(Source, Measurement);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Installs a measurement on the screen as a continuously running measurement. The source is specified using Source parameter and the measurement is specified using the Measurement parameter.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>Measurements3Statistics</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements3;
comobj = comobj.Statistics;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method resets the measurement statistics, zeroing the counts. Note that the measurement (statistics) configuration is not deleted.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Memory</Name>
         <Description>IAgInfiniiVisionMemory interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Memory1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CurrentRecallDirectory</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	propertyValue = comobj.CurrentRecallDirectory;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	comobj.CurrentRecallDirectory = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Present working directory for recall operations.</Description>
            </Property>
            <Property>
               <Name>CurrentRecallFile</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	propertyValue = comobj.CurrentRecallFile;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	comobj.CurrentRecallFile = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>File for recall operations.</Description>
            </Property>
            <Property>
               <Name>CurrentSaveDirectory</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	propertyValue = comobj.CurrentSaveDirectory;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	comobj.CurrentSaveDirectory = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Present working directory for save operations.</Description>
            </Property>
            <Property>
               <Name>CurrentSaveFile</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	propertyValue = comobj.CurrentSaveFile;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	comobj.CurrentSaveFile = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>File for save operations.</Description>
            </Property>
            <Property>
               <Name>ImageFormat</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	propertyValue = comobj.ImageFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	comobj.ImageFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMemoryImageFormatBMP" Value="AgInfiniiVisionMemoryImageFormatBMP"/>
                     <Enum Name="AgInfiniiVisionMemoryImageFormatBMP8bit" Value="AgInfiniiVisionMemoryImageFormatBMP8bit"/>
                     <Enum Name="AgInfiniiVisionMemoryImageFormatPNG" Value="AgInfiniiVisionMemoryImageFormatPNG"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of image format</Description>
            </Property>
            <Property>
               <Name>ImagePalette</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	propertyValue = comobj.ImagePalette;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	comobj.ImagePalette = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMemoryImagePaletteColor" Value="AgInfiniiVisionMemoryImagePaletteColor"/>
                     <Enum Name="AgInfiniiVisionMemoryImagePaletteGrayscale" Value="AgInfiniiVisionMemoryImagePaletteGrayscale"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Image palette color.</Description>
            </Property>
            <Property>
               <Name>InvertColorEnabled</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	propertyValue = comobj.InvertColorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	comobj.InvertColorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/Disables invert of the graticule colors. Returns a flag indicating whether graticule colors are inverted or not.</Description>
            </Property>
            <Property>
               <Name>ReferenceWaveformSource</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	propertyValue = comobj.ReferenceWaveformSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	comobj.ReferenceWaveformSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source to be saved as a reference waveform file. Permissible Values are Channel&lt;n&gt; | Math&lt;r&gt; | WMEM&lt;r&gt;,(in this format only) where n: 1 to # analog channels; r: {1|2|3|4}.&lt;/r&gt;&lt;/r&gt;&lt;/n&gt;</Description>
            </Property>
            <Property>
               <Name>SaveFactorsEnabled</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	propertyValue = comobj.SaveFactorsEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	comobj.SaveFactorsEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables saving oscilloscope factors along with the image. Returns a flag indicating whether oscilloscope factors are output along with the image.</Description>
            </Property>
            <Property>
               <Name>WaveformFormat</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	propertyValue = comobj.WaveformFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	comobj.WaveformFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMemoryWaveformFormatALB" Value="AgInfiniiVisionMemoryWaveformFormatALB"/>
                     <Enum Name="AgInfiniiVisionMemoryWaveformFormatASCIIxy" Value="AgInfiniiVisionMemoryWaveformFormatASCIIxy"/>
                     <Enum Name="AgInfiniiVisionMemoryWaveformFormatCSV" Value="AgInfiniiVisionMemoryWaveformFormatCSV"/>
                     <Enum Name="AgInfiniiVisionMemoryWaveformFormatBinary" Value="AgInfiniiVisionMemoryWaveformFormatBinary"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Data format of waveform</Description>
            </Property>
            <Property>
               <Name>WaveformLength</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	propertyValue = comobj.WaveformLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory;
	comobj.WaveformLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Waveform data length (number of points saved).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Recall</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Recall(obj, Options, FileName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Memory;
feature('COM_SafeArraySingleDim',1);
comobj.Recall(Options, FileName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Recall option for Mask, Oscilloscope Setup and Reference memory.</Description>
            </Method>
            <Method>
               <Name>Save</Name>
               <Location>Memory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Save(obj, Options, FileName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Memory;
feature('COM_SafeArraySingleDim',1);
comobj.Save(Options, FileName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save option for Mask, Image, Lister display data, Oscilloscope Setup, Waveform data and Reference memory.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Memory2</Name>
         <Description>IAgInfiniiVisionMemory2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Memory21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CurrentRecallDirectory</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.CurrentRecallDirectory;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.CurrentRecallDirectory = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Present working directory for recall operations.</Description>
            </Property>
            <Property>
               <Name>CurrentRecallDirectory</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.CurrentRecallDirectory;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.CurrentRecallDirectory = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Present working directory for recall operations.</Description>
            </Property>
            <Property>
               <Name>CurrentRecallFile</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.CurrentRecallFile;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.CurrentRecallFile = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>File for recall operations.</Description>
            </Property>
            <Property>
               <Name>CurrentRecallFile</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.CurrentRecallFile;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.CurrentRecallFile = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>File for recall operations.</Description>
            </Property>
            <Property>
               <Name>CurrentSaveDirectory</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.CurrentSaveDirectory;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.CurrentSaveDirectory = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Present working directory for save operations.</Description>
            </Property>
            <Property>
               <Name>CurrentSaveDirectory</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.CurrentSaveDirectory;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.CurrentSaveDirectory = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Present working directory for save operations.</Description>
            </Property>
            <Property>
               <Name>CurrentSaveFile</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.CurrentSaveFile;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.CurrentSaveFile = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>File for save operations.</Description>
            </Property>
            <Property>
               <Name>CurrentSaveFile</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.CurrentSaveFile;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.CurrentSaveFile = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>File for save operations.</Description>
            </Property>
            <Property>
               <Name>ImageFormat</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.ImageFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.ImageFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMemoryImageFormatBMP" Value="AgInfiniiVisionMemoryImageFormatBMP"/>
                     <Enum Name="AgInfiniiVisionMemoryImageFormatBMP8bit" Value="AgInfiniiVisionMemoryImageFormatBMP8bit"/>
                     <Enum Name="AgInfiniiVisionMemoryImageFormatPNG" Value="AgInfiniiVisionMemoryImageFormatPNG"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of image format</Description>
            </Property>
            <Property>
               <Name>ImageFormat</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.ImageFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.ImageFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMemoryImageFormatBMP" Value="AgInfiniiVisionMemoryImageFormatBMP"/>
                     <Enum Name="AgInfiniiVisionMemoryImageFormatBMP8bit" Value="AgInfiniiVisionMemoryImageFormatBMP8bit"/>
                     <Enum Name="AgInfiniiVisionMemoryImageFormatPNG" Value="AgInfiniiVisionMemoryImageFormatPNG"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of image format</Description>
            </Property>
            <Property>
               <Name>ImagePalette</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.ImagePalette;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.ImagePalette = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMemoryImagePaletteColor" Value="AgInfiniiVisionMemoryImagePaletteColor"/>
                     <Enum Name="AgInfiniiVisionMemoryImagePaletteGrayscale" Value="AgInfiniiVisionMemoryImagePaletteGrayscale"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Image palette color.</Description>
            </Property>
            <Property>
               <Name>ImagePalette</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.ImagePalette;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.ImagePalette = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMemoryImagePaletteColor" Value="AgInfiniiVisionMemoryImagePaletteColor"/>
                     <Enum Name="AgInfiniiVisionMemoryImagePaletteGrayscale" Value="AgInfiniiVisionMemoryImagePaletteGrayscale"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Image palette color.</Description>
            </Property>
            <Property>
               <Name>InvertColorEnabled</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.InvertColorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.InvertColorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/Disables invert of the graticule colors. Returns a flag indicating whether graticule colors are inverted or not.</Description>
            </Property>
            <Property>
               <Name>InvertColorEnabled</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.InvertColorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.InvertColorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/Disables invert of the graticule colors. Returns a flag indicating whether graticule colors are inverted or not.</Description>
            </Property>
            <Property>
               <Name>ReferenceWaveformSource</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.ReferenceWaveformSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.ReferenceWaveformSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source to be saved as a reference waveform file. Permissible Values are Channel&lt;n&gt; | Math&lt;r&gt; | WMEM&lt;r&gt;,(in this format only) where n: 1 to # analog channels; r: {1|2|3|4}.&lt;/r&gt;&lt;/r&gt;&lt;/n&gt;</Description>
            </Property>
            <Property>
               <Name>ReferenceWaveformSource</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.ReferenceWaveformSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.ReferenceWaveformSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source to be saved as a reference waveform file. Permissible Values are Channel&lt;n&gt; | Math&lt;r&gt; | WMEM&lt;r&gt;,(in this format only) where n: 1 to # analog channels; r: {1|2|3|4}.&lt;/r&gt;&lt;/r&gt;&lt;/n&gt;</Description>
            </Property>
            <Property>
               <Name>SaveFactorsEnabled</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.SaveFactorsEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.SaveFactorsEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables saving oscilloscope factors along with the image. Returns a flag indicating whether oscilloscope factors are output along with the image.</Description>
            </Property>
            <Property>
               <Name>SaveFactorsEnabled</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.SaveFactorsEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.SaveFactorsEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables saving oscilloscope factors along with the image. Returns a flag indicating whether oscilloscope factors are output along with the image.</Description>
            </Property>
            <Property>
               <Name>WaveformFormat</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.WaveformFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.WaveformFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMemoryWaveformFormatALB" Value="AgInfiniiVisionMemoryWaveformFormatALB"/>
                     <Enum Name="AgInfiniiVisionMemoryWaveformFormatASCIIxy" Value="AgInfiniiVisionMemoryWaveformFormatASCIIxy"/>
                     <Enum Name="AgInfiniiVisionMemoryWaveformFormatCSV" Value="AgInfiniiVisionMemoryWaveformFormatCSV"/>
                     <Enum Name="AgInfiniiVisionMemoryWaveformFormatBinary" Value="AgInfiniiVisionMemoryWaveformFormatBinary"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Data format of waveform</Description>
            </Property>
            <Property>
               <Name>WaveformFormat</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.WaveformFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.WaveformFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionMemoryWaveformFormatALB" Value="AgInfiniiVisionMemoryWaveformFormatALB"/>
                     <Enum Name="AgInfiniiVisionMemoryWaveformFormatASCIIxy" Value="AgInfiniiVisionMemoryWaveformFormatASCIIxy"/>
                     <Enum Name="AgInfiniiVisionMemoryWaveformFormatCSV" Value="AgInfiniiVisionMemoryWaveformFormatCSV"/>
                     <Enum Name="AgInfiniiVisionMemoryWaveformFormatBinary" Value="AgInfiniiVisionMemoryWaveformFormatBinary"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Data format of waveform</Description>
            </Property>
            <Property>
               <Name>WaveformLength</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.WaveformLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.WaveformLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Waveform data length (number of points saved).</Description>
            </Property>
            <Property>
               <Name>WaveformLength</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	propertyValue = comobj.WaveformLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj.WaveformLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Waveform data length (number of points saved).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Recall</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Recall(obj, Options, FileName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Memory2;
feature('COM_SafeArraySingleDim',1);
comobj.Recall(Options, FileName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Recall option for Mask, Oscilloscope Setup and Reference memory.</Description>
            </Method>
            <Method>
               <Name>Recall</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Recall(obj, Options, FileName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Memory2;
feature('COM_SafeArraySingleDim',1);
comobj.Recall(Options, FileName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Recall option for Mask, Oscilloscope Setup and Reference memory.</Description>
            </Method>
            <Method>
               <Name>Save</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Save(obj, Options, FileName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Memory2;
feature('COM_SafeArraySingleDim',1);
comobj.Save(Options, FileName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save option for Mask, Image, Lister display data, Oscilloscope Setup, Waveform data and Reference memory.</Description>
            </Method>
            <Method>
               <Name>Save</Name>
               <Location>Memory2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Save(obj, Options, FileName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Memory2;
feature('COM_SafeArraySingleDim',1);
comobj.Save(Options, FileName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save option for Mask, Image, Lister display data, Oscilloscope Setup, Waveform data and Reference memory.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Memory2ResultFormat</Name>
         <Description>IAgInfiniiVisionMemory2ResultFormat interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Memory2ResultFormat1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CursorEnabled</Name>
               <Location>Memory2ResultFormat</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj = comobj.ResultFormat;
	propertyValue = comobj.CursorEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj = comobj.ResultFormat;
	comobj.CursorEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables whether the cursor values will be included when analysis results are saved.</Description>
            </Property>
            <Property>
               <Name>HistogramEnabled</Name>
               <Location>Memory2ResultFormat</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj = comobj.ResultFormat;
	propertyValue = comobj.HistogramEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj = comobj.ResultFormat;
	comobj.HistogramEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables whether the histogram statistics will be included when analysis results are saved.</Description>
            </Property>
            <Property>
               <Name>MaskEnabled</Name>
               <Location>Memory2ResultFormat</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj = comobj.ResultFormat;
	propertyValue = comobj.MaskEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj = comobj.ResultFormat;
	comobj.MaskEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables whether the mask statistics will be included when analysis results are saved.</Description>
            </Property>
            <Property>
               <Name>MeasurementEnabled</Name>
               <Location>Memory2ResultFormat</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj = comobj.ResultFormat;
	propertyValue = comobj.MeasurementEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj = comobj.ResultFormat;
	comobj.MeasurementEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables whether the measurement results will be included when analysis results are saved.</Description>
            </Property>
            <Property>
               <Name>SearchEnabled</Name>
               <Location>Memory2ResultFormat</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj = comobj.ResultFormat;
	propertyValue = comobj.SearchEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj = comobj.ResultFormat;
	comobj.SearchEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables  whether the found search event times will be included when analysis results are saved.</Description>
            </Property>
            <Property>
               <Name>SegmentedEnabled</Name>
               <Location>Memory2ResultFormat</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj = comobj.ResultFormat;
	propertyValue = comobj.SegmentedEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Memory2;
	comobj = comobj.ResultFormat;
	comobj.SegmentedEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables whether the segmented memory acquisition times will be included when analysis results are saved.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>ReferenceLevel</Name>
         <Description>IVI Scope class-compliant reference level interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ReferenceLevel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>High</Name>
               <Location>ReferenceLevel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	propertyValue = comobj.High;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	comobj.High = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high reference for waveform measurements. It is a percentage of the difference between the Voltage High and Voltage Low. Voltage High and Voltage Low may be calculated using either the min/max or histogram methods.</Description>
            </Property>
            <Property>
               <Name>Low</Name>
               <Location>ReferenceLevel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	propertyValue = comobj.Low;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	comobj.Low = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The low reference for waveform measurements. It is a percentage of the difference between the Voltage High and Voltage Low. Voltage High and Voltage Low may be calculated using either the min/max or histogram methods.</Description>
            </Property>
            <Property>
               <Name>Mid</Name>
               <Location>ReferenceLevel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	propertyValue = comobj.Mid;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	comobj.Mid = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The mid reference for waveform measurements. It is a percentage of the difference between the Voltage High and Voltage Low. Voltage High and Voltage Low may be calculated using either the min/max or histogram methods.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>ReferenceLevel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Low, Mid, High)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceLevel;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Low), double(Mid), double(High));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the reference levels for waveform measurements, low, mid, and high.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ReferenceWaveform</Name>
         <Description>IAgInfiniiVisionReferenceWaveform interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ReferenceWaveform1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>Clear</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj, WaveformLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.Clear(int16(WaveformLocation));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the specified reference waveform location.</Description>
            </Method>
            <Method>
               <Name>Enable</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Enable(obj, WaveformLocation, DisplayState)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.Enable(int16(WaveformLocation), logical(DisplayState));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Enables/Disables the specified reference waveform.</Description>
            </Method>
            <Method>
               <Name>GetLabel</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetLabel(obj, WaveformLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetLabel(int16(WaveformLocation));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the Label associated with a specified reference waveform.</Description>
            </Method>
            <Method>
               <Name>GetOffset</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetOffset(obj, WaveformLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetOffset(int16(WaveformLocation));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the Current offset value for the selected reference waveform.</Description>
            </Method>
            <Method>
               <Name>GetRange</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetRange(obj, WaveformLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetRange(int16(WaveformLocation));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the Current full-scale range for the specified reference waveform.</Description>
            </Method>
            <Method>
               <Name>GetSkewFactor</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetSkewFactor(obj, WaveformLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetSkewFactor(int16(WaveformLocation));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the Current skew factor for the selected reference waveform.</Description>
            </Method>
            <Method>
               <Name>GetVerticalScale</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetVerticalScale(obj, WaveformLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetVerticalScale(int16(WaveformLocation));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the Current vertical units per division for the specified reference waveform.</Description>
            </Method>
            <Method>
               <Name>IsEnabled</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = IsEnabled(obj, WaveformLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.IsEnabled(int16(WaveformLocation));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the Current display setting of the specified reference waveform.</Description>
            </Method>
            <Method>
               <Name>Save</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Save(obj, WaveformLocation, Source)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.Save(int16(WaveformLocation), Source);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Copies the analog channel or math function waveform to the specified reference waveform location.</Description>
            </Method>
            <Method>
               <Name>SetLabel</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetLabel(obj, WaveformLocation, Label)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.SetLabel(int16(WaveformLocation), Label);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Label for the specified reference waveform.</Description>
            </Method>
            <Method>
               <Name>SetOffset</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetOffset(obj, WaveformLocation, OffsetValue)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.SetOffset(int16(WaveformLocation), double(OffsetValue));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Offset value that is represented at center screen for the selected reference waveform.</Description>
            </Method>
            <Method>
               <Name>SetRange</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetRange(obj, WaveformLocation, Range)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.SetRange(int16(WaveformLocation), double(Range));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Full-scale range of vertical axis of the selected reference waveform.</Description>
            </Method>
            <Method>
               <Name>SetSkewFactor</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetSkewFactor(obj, WaveformLocation, Skewfactor)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.SetSkewFactor(int16(WaveformLocation), double(Skewfactor));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Skew factor for the specified reference waveform.</Description>
            </Method>
            <Method>
               <Name>SetVerticalScale</Name>
               <Location>ReferenceWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetVerticalScale(obj, WaveformLocation, VerticalScale)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.SetVerticalScale(int16(WaveformLocation), double(VerticalScale));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Vertical scale, or units per division, of the selected reference waveform.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Search</Name>
         <Description>IAgInfiniiVision2Search interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Search</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the number of search events found.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchModeEdge" Value="AgInfiniiVisionSearchModeEdge"/>
                     <Enum Name="AgInfiniiVisionSearchModeGlitch" Value="AgInfiniiVisionSearchModeGlitch"/>
                     <Enum Name="AgInfiniiVisionSearchModeRunt" Value="AgInfiniiVisionSearchModeRunt"/>
                     <Enum Name="AgInfiniiVisionSearchModeTransition" Value="AgInfiniiVisionSearchModeTransition"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial1" Value="AgInfiniiVisionSearchModeSerial1"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial2" Value="AgInfiniiVisionSearchModeSerial2"/>
                     <Enum Name="AgInfiniiVisionSearchModeOff" Value="AgInfiniiVisionSearchModeOff"/>
                     <Enum Name="AgInfiniiVisionSearchModePeak" Value="AgInfiniiVisionSearchModePeak"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The oscilloscope search mode.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search2</Name>
         <Description>IAgInfiniiVisionSearch2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Search2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search2;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the number of search events found.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>Search2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search2;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the number of search events found.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search2;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search2;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchModeEdge" Value="AgInfiniiVisionSearchModeEdge"/>
                     <Enum Name="AgInfiniiVisionSearchModeGlitch" Value="AgInfiniiVisionSearchModeGlitch"/>
                     <Enum Name="AgInfiniiVisionSearchModeRunt" Value="AgInfiniiVisionSearchModeRunt"/>
                     <Enum Name="AgInfiniiVisionSearchModeTransition" Value="AgInfiniiVisionSearchModeTransition"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial1" Value="AgInfiniiVisionSearchModeSerial1"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial2" Value="AgInfiniiVisionSearchModeSerial2"/>
                     <Enum Name="AgInfiniiVisionSearchModeOff" Value="AgInfiniiVisionSearchModeOff"/>
                     <Enum Name="AgInfiniiVisionSearchModePeak" Value="AgInfiniiVisionSearchModePeak"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The oscilloscope search mode.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search2;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search2;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchModeEdge" Value="AgInfiniiVisionSearchModeEdge"/>
                     <Enum Name="AgInfiniiVisionSearchModeGlitch" Value="AgInfiniiVisionSearchModeGlitch"/>
                     <Enum Name="AgInfiniiVisionSearchModeRunt" Value="AgInfiniiVisionSearchModeRunt"/>
                     <Enum Name="AgInfiniiVisionSearchModeTransition" Value="AgInfiniiVisionSearchModeTransition"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial1" Value="AgInfiniiVisionSearchModeSerial1"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial2" Value="AgInfiniiVisionSearchModeSerial2"/>
                     <Enum Name="AgInfiniiVisionSearchModeOff" Value="AgInfiniiVisionSearchModeOff"/>
                     <Enum Name="AgInfiniiVisionSearchModePeak" Value="AgInfiniiVisionSearchModePeak"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The oscilloscope search mode.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3</Name>
         <Description>IAgInfiniiVisionSearch3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search31" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Search3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the number of search events found.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>Search3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the number of search events found.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchModeEdge" Value="AgInfiniiVisionSearchModeEdge"/>
                     <Enum Name="AgInfiniiVisionSearchModeGlitch" Value="AgInfiniiVisionSearchModeGlitch"/>
                     <Enum Name="AgInfiniiVisionSearchModeRunt" Value="AgInfiniiVisionSearchModeRunt"/>
                     <Enum Name="AgInfiniiVisionSearchModeTransition" Value="AgInfiniiVisionSearchModeTransition"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial1" Value="AgInfiniiVisionSearchModeSerial1"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial2" Value="AgInfiniiVisionSearchModeSerial2"/>
                     <Enum Name="AgInfiniiVisionSearchModeOff" Value="AgInfiniiVisionSearchModeOff"/>
                     <Enum Name="AgInfiniiVisionSearchModePeak" Value="AgInfiniiVisionSearchModePeak"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The oscilloscope search mode.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchModeEdge" Value="AgInfiniiVisionSearchModeEdge"/>
                     <Enum Name="AgInfiniiVisionSearchModeGlitch" Value="AgInfiniiVisionSearchModeGlitch"/>
                     <Enum Name="AgInfiniiVisionSearchModeRunt" Value="AgInfiniiVisionSearchModeRunt"/>
                     <Enum Name="AgInfiniiVisionSearchModeTransition" Value="AgInfiniiVisionSearchModeTransition"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial1" Value="AgInfiniiVisionSearchModeSerial1"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial2" Value="AgInfiniiVisionSearchModeSerial2"/>
                     <Enum Name="AgInfiniiVisionSearchModeOff" Value="AgInfiniiVisionSearchModeOff"/>
                     <Enum Name="AgInfiniiVisionSearchModePeak" Value="AgInfiniiVisionSearchModePeak"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The oscilloscope search mode.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Edge</Name>
         <Description>IAgInfiniiVision2SearchEdge interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Edge1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>Search3Edge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Edge;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Edge;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchEdgeSlopeNegative" Value="AgInfiniiVisionSearchEdgeSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionSearchEdgeSlopePositive" Value="AgInfiniiVisionSearchEdgeSlopePositive"/>
                     <Enum Name="AgInfiniiVisionSearchEdgeSlopeEither" Value="AgInfiniiVisionSearchEdgeSlopeEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The slope of the edge for the search.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Search3Edge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Edge;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Edge;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The channel on which to search for edges. The source is a string specified in the format: "Channel&lt;n&gt;", where &lt;n&gt; can be set to a value from 1 to the total number of analog channels available.&lt;/n&gt;&lt;/n&gt;</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Search3Edge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Search3;
comobj = comobj.Edge;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the Source and Slope properties for an Edge search.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Search3Glitch</Name>
         <Description>IAgInfiniiVision2SearchGlitch interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Glitch1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Condition</Name>
               <Location>Search3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Glitch;
	propertyValue = comobj.Condition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Glitch;
	comobj.Condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchGlitchConditionGreaterThan" Value="AgInfiniiVisionSearchGlitchConditionGreaterThan"/>
                     <Enum Name="AgInfiniiVisionSearchGlitchConditionLessThan" Value="AgInfiniiVisionSearchGlitchConditionLessThan"/>
                     <Enum Name="AgInfiniiVisionSearchGlitchConditionRange" Value="AgInfiniiVisionSearchGlitchConditionRange"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the mode of operation of the glitch (pulse width) search. The oscilloscope can search for a pulse width that is greater than a time value, less than a time value, or within a range of time values.</Description>
            </Property>
            <Property>
               <Name>MaxPulseWidthDuration</Name>
               <Location>Search3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Glitch;
	propertyValue = comobj.MaxPulseWidthDuration;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Glitch;
	comobj.MaxPulseWidthDuration = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The maximum pulse width duration time (in seconds) for the selected source.</Description>
            </Property>
            <Property>
               <Name>MinPulseWidthDuration</Name>
               <Location>Search3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Glitch;
	propertyValue = comobj.MinPulseWidthDuration;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Glitch;
	comobj.MinPulseWidthDuration = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The minimum pulse width duration time (in seconds) for the selected source.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>Search3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Glitch;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Glitch;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchGlitchPolarityPositive" Value="AgInfiniiVisionSearchGlitchPolarityPositive"/>
                     <Enum Name="AgInfiniiVisionSearchGlitchPolarityNegative" Value="AgInfiniiVisionSearchGlitchPolarityNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity for the glitch (pulse width) source.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Search3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Glitch;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Glitch;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The channel on which to search for glitches (pulse widths). The source is a string specified in the format: "Channel&lt;n&gt;", where &lt;n&gt; can be set to a value from 1 to the total number of analog channels available.&lt;/n&gt;&lt;/n&gt;</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Search3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Polarity, Condition)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Search3;
comobj = comobj.Glitch;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, Polarity, Condition);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the Source, Polarity and Condition properties for the Glitch search.</Description>
            </Method>
            <Method>
               <Name>GetRange</Name>
               <Location>Search3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [LowerLimit, UpperLimit] = GetRange(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Search3;
comobj = comobj.Glitch;
feature('COM_SafeArraySingleDim',1);
[LowerLimit, UpperLimit] = comobj.GetRange(0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Gets the pulse width duration time (in seconds) for the selected source.</Description>
            </Method>
            <Method>
               <Name>SetRange</Name>
               <Location>Search3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetRange(obj, LowerLimit, UpperLimit)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Search3;
comobj = comobj.Glitch;
feature('COM_SafeArraySingleDim',1);
comobj.SetRange(double(LowerLimit), double(UpperLimit));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the pulse width duration time (in seconds) for the selected source.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Search3Peak</Name>
         <Description>IAgInfiniiVisionSearch3Peak interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Peak1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Excursion</Name>
               <Location>Search3Peak</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Peak;
	propertyValue = comobj.Excursion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Peak;
	comobj.Excursion = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The change in level that must occur (in other words, hysteresis) to be recognized as a peak.</Description>
            </Property>
            <Property>
               <Name>NumberOfPeaks</Name>
               <Location>Search3Peak</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Peak;
	propertyValue = comobj.NumberOfPeaks;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Peak;
	comobj.NumberOfPeaks = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The maximum number of FFT peaks to find.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Search3Peak</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Peak;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Peak;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The FFT math function waveform to search.</Description>
            </Property>
            <Property>
               <Name>Threshold</Name>
               <Location>Search3Peak</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Peak;
	propertyValue = comobj.Threshold;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Peak;
	comobj.Threshold = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The threshold level necessary to be considered a peak.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Runt</Name>
         <Description>IAgInfiniiVision2SearchRunt interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Runt1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Condition</Name>
               <Location>Search3Runt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Runt;
	propertyValue = comobj.Condition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Runt;
	comobj.Condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchRuntConditionGreaterThan" Value="AgInfiniiVisionSearchRuntConditionGreaterThan"/>
                     <Enum Name="AgInfiniiVisionSearchRuntConditionLessThan" Value="AgInfiniiVisionSearchRuntConditionLessThan"/>
                     <Enum Name="AgInfiniiVisionSearchRuntConditionNone" Value="AgInfiniiVisionSearchRuntConditionNone"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether to search for a runt that is greater than a time value, less than a time value or any time value.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>Search3Runt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Runt;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Runt;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchRuntPolarityPositive" Value="AgInfiniiVisionSearchRuntPolarityPositive"/>
                     <Enum Name="AgInfiniiVisionSearchRuntPolarityNegative" Value="AgInfiniiVisionSearchRuntPolarityNegative"/>
                     <Enum Name="AgInfiniiVisionSearchRuntPolarityEither" Value="AgInfiniiVisionSearchRuntPolarityEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets/Gets the polarity for the runt search.</Description>
            </Property>
            <Property>
               <Name>QualifierTime</Name>
               <Location>Search3Runt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Runt;
	propertyValue = comobj.QualifierTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Runt;
	comobj.QualifierTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>When searching for runt pulses whose widths are greater than or less than a time, the QualifierTime property specifies the time value (in seconds).</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Search3Runt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Runt;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Runt;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The channel on which to search for the runt pulse. The source is a string specified in the format: "Channel&lt;n&gt;", where &lt;n&gt; can be set to a value from 1 to the total number of analog channels available.&lt;/n&gt;&lt;/n&gt;</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Search3Runt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Polarity, Condition, QualifierTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Search3;
comobj = comobj.Runt;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, Polarity, Condition, double(QualifierTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the Source, Polarity, Condition and QualifierTime properties for a Runt search.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Search3Serial</Name>
         <Description>IAgInfiniiVision2SearchSerial interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Serial1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Serial2</Name>
         <Description>IAgInfiniiVisionSearchSerial2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Serial21" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Serial2ARINC429</Name>
         <Description>IAgInfiniiVision2SearchSerialARINC429 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Serial2ARINC4291" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Label</Name>
               <Location>Search3Serial2ARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.ARINC429;
	propertyValue = comobj.Label;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.ARINC429;
	comobj.Label = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the ARINC 429 label value when labels are used in the selected search mode.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search3Serial2ARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.ARINC429;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.ARINC429;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchSerialARINC429ModeLabel" Value="AgInfiniiVisionSearchSerialARINC429ModeLabel"/>
                     <Enum Name="AgInfiniiVisionSearchSerialARINC429ModeLabelBits" Value="AgInfiniiVisionSearchSerialARINC429ModeLabelBits"/>
                     <Enum Name="AgInfiniiVisionSearchSerialARINC429ModeParityError" Value="AgInfiniiVisionSearchSerialARINC429ModeParityError"/>
                     <Enum Name="AgInfiniiVisionSearchSerialARINC429ModeWordError" Value="AgInfiniiVisionSearchSerialARINC429ModeWordError"/>
                     <Enum Name="AgInfiniiVisionSearchSerialARINC429ModeGapError" Value="AgInfiniiVisionSearchSerialARINC429ModeGapError"/>
                     <Enum Name="AgInfiniiVisionSearchSerialARINC429ModeWordOrGapError" Value="AgInfiniiVisionSearchSerialARINC429ModeWordOrGapError"/>
                     <Enum Name="AgInfiniiVisionSearchSerialARINC429ModeAllErrors" Value="AgInfiniiVisionSearchSerialARINC429ModeAllErrors"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of ARINC 429 information to find in the Lister display.</Description>
            </Property>
            <Property>
               <Name>PatternData</Name>
               <Location>Search3Serial2ARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.ARINC429;
	propertyValue = comobj.PatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.ARINC429;
	comobj.PatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the ARINC 429 data pattern resource according to the string parameter. This pattern controls the data pattern searched for in each ARINC 429 word.</Description>
            </Property>
            <Property>
               <Name>PatternSDI</Name>
               <Location>Search3Serial2ARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.ARINC429;
	propertyValue = comobj.PatternSDI;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.ARINC429;
	comobj.PatternSDI = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the ARINC 429 two-bit SDI pattern resource according to the string parameter. This pattern controls the SDI pattern searched for in each ARINC 429 word.</Description>
            </Property>
            <Property>
               <Name>PatternSSM</Name>
               <Location>Search3Serial2ARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.ARINC429;
	propertyValue = comobj.PatternSSM;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.ARINC429;
	comobj.PatternSSM = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the ARINC 429 two-bit SSM pattern resource according to the string parameter. This pattern controls the SSM pattern searched for in each ARINC 429 word.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Serial2CAN</Name>
         <Description>IAgInfiniiVision2SearchSerialCAN interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Serial2CAN1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Mode</Name>
               <Location>Search3Serial2CAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.CAN;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.CAN;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchCANModeData" Value="AgInfiniiVisionSearchCANModeData"/>
                     <Enum Name="AgInfiniiVisionSearchCANModeIDData" Value="AgInfiniiVisionSearchCANModeIDData"/>
                     <Enum Name="AgInfiniiVisionSearchCANModeIDEither" Value="AgInfiniiVisionSearchCANModeIDEither"/>
                     <Enum Name="AgInfiniiVisionSearchCANModeIDRemote" Value="AgInfiniiVisionSearchCANModeIDRemote"/>
                     <Enum Name="AgInfiniiVisionSearchCANModeAllErrors" Value="AgInfiniiVisionSearchCANModeAllErrors"/>
                     <Enum Name="AgInfiniiVisionSearchCANModeOverload" Value="AgInfiniiVisionSearchCANModeOverload"/>
                     <Enum Name="AgInfiniiVisionSearchCANModeError" Value="AgInfiniiVisionSearchCANModeError"/>
                     <Enum Name="AgInfiniiVisionSearchCANModeAckError" Value="AgInfiniiVisionSearchCANModeAckError"/>
                     <Enum Name="AgInfiniiVisionSearchCANModeFormError" Value="AgInfiniiVisionSearchCANModeFormError"/>
                     <Enum Name="AgInfiniiVisionSearchCANModeStuffError" Value="AgInfiniiVisionSearchCANModeStuffError"/>
                     <Enum Name="AgInfiniiVisionSearchCANModeCRCError" Value="AgInfiniiVisionSearchCANModeCRCError"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of CAN information to find in the Lister display.</Description>
            </Property>
            <Property>
               <Name>PatternData</Name>
               <Location>Search3Serial2CAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.CAN;
	propertyValue = comobj.PatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.CAN;
	comobj.PatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data value when searching for Data Frame ID and Data. The data value is a string in the format: "0xnn...n" where n: {0,..,9|A,..,F|X} for hexadecimal.</Description>
            </Property>
            <Property>
               <Name>PatternDataLength</Name>
               <Location>Search3Serial2CAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.CAN;
	propertyValue = comobj.PatternDataLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.CAN;
	comobj.PatternDataLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the length of the data value when searching for Data Frame ID and Data. Permissible values are: 1 to 8.</Description>
            </Property>
            <Property>
               <Name>PatternID</Name>
               <Location>Search3Serial2CAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.CAN;
	propertyValue = comobj.PatternID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.CAN;
	comobj.PatternID = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the ID value when searching for a CAN event. The ID value is a string in the format: "0xnn...n" where n: {0,..,9|A,..,F|X} for hexadecimal.</Description>
            </Property>
            <Property>
               <Name>PatternIDType</Name>
               <Location>Search3Serial2CAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.CAN;
	propertyValue = comobj.PatternIDType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.CAN;
	comobj.PatternIDType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchCANPatternIDTypeStandard" Value="AgInfiniiVisionSearchCANPatternIDTypeStandard"/>
                     <Enum Name="AgInfiniiVisionSearchCANPatternIDTypeExtended" Value="AgInfiniiVisionSearchCANPatternIDTypeExtended"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a standard ID value or an extended ID value is used when searching for a CAN event.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Serial2FlexRay</Name>
         <Description>IAgInfiniiVision2SearchSerialFlexRay interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Serial2FlexRay1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CycleNumber</Name>
               <Location>Search3Serial2FlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.FlexRay;
	propertyValue = comobj.CycleNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.FlexRay;
	comobj.CycleNumber = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the cycle value to find when searching for FlexRay frames.</Description>
            </Property>
            <Property>
               <Name>FrameID</Name>
               <Location>Search3Serial2FlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.FlexRay;
	propertyValue = comobj.FrameID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.FlexRay;
	comobj.FrameID = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the frame ID value to find when searching for FlexRay frames.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search3Serial2FlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.FlexRay;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.FlexRay;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchSerialFlexRayModeFrameID" Value="AgInfiniiVisionSearchSerialFlexRayModeFrameID"/>
                     <Enum Name="AgInfiniiVisionSearchSerialFlexRayModeCycleNumber" Value="AgInfiniiVisionSearchSerialFlexRayModeCycleNumber"/>
                     <Enum Name="AgInfiniiVisionSearchSerialFlexRayModeData" Value="AgInfiniiVisionSearchSerialFlexRayModeData"/>
                     <Enum Name="AgInfiniiVisionSearchSerialFlexRayModeHeaderCRC" Value="AgInfiniiVisionSearchSerialFlexRayModeHeaderCRC"/>
                     <Enum Name="AgInfiniiVisionSearchSerialFlexRayModeFrameCRC" Value="AgInfiniiVisionSearchSerialFlexRayModeFrameCRC"/>
                     <Enum Name="AgInfiniiVisionSearchSerialFlexRayModeAllErrors" Value="AgInfiniiVisionSearchSerialFlexRayModeAllErrors"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of FlexRay information to find in the Lister display.</Description>
            </Property>
            <Property>
               <Name>PatternData</Name>
               <Location>Search3Serial2FlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.FlexRay;
	propertyValue = comobj.PatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.FlexRay;
	comobj.PatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data value to find when searching for FlexRay frames.</Description>
            </Property>
            <Property>
               <Name>PatternDataLength</Name>
               <Location>Search3Serial2FlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.FlexRay;
	propertyValue = comobj.PatternDataLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.FlexRay;
	comobj.PatternDataLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the length of data values when searching for FlexRay frames.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Serial2I2S</Name>
         <Description>IAgInfiniiVision2SearchSerialI2S interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Serial2I2S1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AudioChannel</Name>
               <Location>Search3Serial2I2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.I2S;
	propertyValue = comobj.AudioChannel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.I2S;
	comobj.AudioChannel = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchI2SAudioChannelLeft" Value="AgInfiniiVisionSearchI2SAudioChannelLeft"/>
                     <Enum Name="AgInfiniiVisionSearchI2SAudioChannelRight" Value="AgInfiniiVisionSearchI2SAudioChannelRight"/>
                     <Enum Name="AgInfiniiVisionSearchI2SAudioChannelEither" Value="AgInfiniiVisionSearchI2SAudioChannelEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the channel on which to search for I2S events: right, left, or either channel.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search3Serial2I2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.I2S;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.I2S;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchI2SModeEqual" Value="AgInfiniiVisionSearchI2SModeEqual"/>
                     <Enum Name="AgInfiniiVisionSearchI2SModeNotEqual" Value="AgInfiniiVisionSearchI2SModeNotEqual"/>
                     <Enum Name="AgInfiniiVisionSearchI2SModeLessThan" Value="AgInfiniiVisionSearchI2SModeLessThan"/>
                     <Enum Name="AgInfiniiVisionSearchI2SModeGreaterThan" Value="AgInfiniiVisionSearchI2SModeGreaterThan"/>
                     <Enum Name="AgInfiniiVisionSearchI2SModeInRange" Value="AgInfiniiVisionSearchI2SModeInRange"/>
                     <Enum Name="AgInfiniiVisionSearchI2SModeOutRange" Value="AgInfiniiVisionSearchI2SModeOutRange"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of I2S information to find in the Lister display.</Description>
            </Property>
            <Property>
               <Name>PatternData</Name>
               <Location>Search3Serial2I2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.I2S;
	propertyValue = comobj.PatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.I2S;
	comobj.PatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data word value when searching for I2S events.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>GetRange</Name>
               <Location>Search3Serial2I2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [LowerLimit, UpperLimit] = GetRange(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Search3;
comobj = comobj.Serial2;
comobj = comobj.I2S;
feature('COM_SafeArraySingleDim',1);
[LowerLimit, UpperLimit] = comobj.GetRange(0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Gets the data value range when searching for I2S events.</Description>
            </Method>
            <Method>
               <Name>SetRange</Name>
               <Location>Search3Serial2I2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetRange(obj, LowerLimit, UpperLimit)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Search3;
comobj = comobj.Serial2;
comobj = comobj.I2S;
feature('COM_SafeArraySingleDim',1);
comobj.SetRange(LowerLimit, UpperLimit);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the data value range when searching for I2S events.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Search3Serial2IIC</Name>
         <Description>IAgInfiniiVision2SearchSerialIIC interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Serial2IIC1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Address</Name>
               <Location>Search3Serial2IIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.IIC;
	propertyValue = comobj.Address;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.IIC;
	comobj.Address = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the address values when searching for IIC events.</Description>
            </Property>
            <Property>
               <Name>Condition</Name>
               <Location>Search3Serial2IIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.IIC;
	propertyValue = comobj.Condition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.IIC;
	comobj.Condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchIICConditionEqual" Value="AgInfiniiVisionSearchIICConditionEqual"/>
                     <Enum Name="AgInfiniiVisionSearchIICConditionNotEqual" Value="AgInfiniiVisionSearchIICConditionNotEqual"/>
                     <Enum Name="AgInfiniiVisionSearchIICConditionLessThan" Value="AgInfiniiVisionSearchIICConditionLessThan"/>
                     <Enum Name="AgInfiniiVisionSearchIICConditionGreaterThan" Value="AgInfiniiVisionSearchIICConditionGreaterThan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data value qualifier used when searching for IIC EEPROM data read events.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search3Serial2IIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.IIC;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.IIC;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchIICModeRead7" Value="AgInfiniiVisionSearchIICModeRead7"/>
                     <Enum Name="AgInfiniiVisionSearchIICModeWrite7" Value="AgInfiniiVisionSearchIICModeWrite7"/>
                     <Enum Name="AgInfiniiVisionSearchIICModeMissingAcknowledge" Value="AgInfiniiVisionSearchIICModeMissingAcknowledge"/>
                     <Enum Name="AgInfiniiVisionSearchIICModeNoAcknowledge" Value="AgInfiniiVisionSearchIICModeNoAcknowledge"/>
                     <Enum Name="AgInfiniiVisionSearchIICModeR7Data2" Value="AgInfiniiVisionSearchIICModeR7Data2"/>
                     <Enum Name="AgInfiniiVisionSearchIICModeW7Data2" Value="AgInfiniiVisionSearchIICModeW7Data2"/>
                     <Enum Name="AgInfiniiVisionSearchIICModeRestart" Value="AgInfiniiVisionSearchIICModeRestart"/>
                     <Enum Name="AgInfiniiVisionSearchIICModeReadEprom" Value="AgInfiniiVisionSearchIICModeReadEprom"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the type of IIC information to find in the Lister display.</Description>
            </Property>
            <Property>
               <Name>PatternData</Name>
               <Location>Search3Serial2IIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.IIC;
	propertyValue = comobj.PatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.IIC;
	comobj.PatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data values when searching for IIC events.</Description>
            </Property>
            <Property>
               <Name>PatternData2</Name>
               <Location>Search3Serial2IIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.IIC;
	propertyValue = comobj.PatternData2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.IIC;
	comobj.PatternData2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second data value when searching for IIC events with two data values.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Serial2LIN</Name>
         <Description>IAgInfiniiVision2SearchSerialLIN interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Serial2LIN1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ID</Name>
               <Location>Search3Serial2LIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.LIN;
	propertyValue = comobj.ID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.LIN;
	comobj.ID = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the frame ID value when searching for LIN events</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search3Serial2LIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.LIN;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.LIN;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchLINModeID" Value="AgInfiniiVisionSearchLINModeID"/>
                     <Enum Name="AgInfiniiVisionSearchLINModeData" Value="AgInfiniiVisionSearchLINModeData"/>
                     <Enum Name="AgInfiniiVisionSearchLINModeError" Value="AgInfiniiVisionSearchLINModeError"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the type of LIN information to find in the Lister display</Description>
            </Property>
            <Property>
               <Name>PatternData</Name>
               <Location>Search3Serial2LIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.LIN;
	propertyValue = comobj.PatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.LIN;
	comobj.PatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data value when searching for LIN events.</Description>
            </Property>
            <Property>
               <Name>PatternDataLength</Name>
               <Location>Search3Serial2LIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.LIN;
	propertyValue = comobj.PatternDataLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.LIN;
	comobj.PatternDataLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the length of the data value when searching for LIN events. Valid values are from 1 to 8.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Serial2M1553</Name>
         <Description>IAgInfiniiVision2SearchSerialM1553 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Serial2M15531" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Mode</Name>
               <Location>Search3Serial2M1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.M1553;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.M1553;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchSerialM1553ModeDataStart" Value="AgInfiniiVisionSearchSerialM1553ModeDataStart"/>
                     <Enum Name="AgInfiniiVisionSearchSerialM1553ModeCommandStart" Value="AgInfiniiVisionSearchSerialM1553ModeCommandStart"/>
                     <Enum Name="AgInfiniiVisionSearchSerialM1553ModeRTA" Value="AgInfiniiVisionSearchSerialM1553ModeRTA"/>
                     <Enum Name="AgInfiniiVisionSearchSerialM1553ModeRTA11" Value="AgInfiniiVisionSearchSerialM1553ModeRTA11"/>
                     <Enum Name="AgInfiniiVisionSearchSerialM1553ModeParityError" Value="AgInfiniiVisionSearchSerialM1553ModeParityError"/>
                     <Enum Name="AgInfiniiVisionSearchSerialM1553ModeSyncError" Value="AgInfiniiVisionSearchSerialM1553ModeSyncError"/>
                     <Enum Name="AgInfiniiVisionSearchSerialM1553ModeManchesterError" Value="AgInfiniiVisionSearchSerialM1553ModeManchesterError"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of MIL-STD-1553 information to find in the Lister display.</Description>
            </Property>
            <Property>
               <Name>PatternData</Name>
               <Location>Search3Serial2M1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.M1553;
	propertyValue = comobj.PatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.M1553;
	comobj.PatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the additional 11 bits when searching for the MIL-STD-1553 Remote Terminal Address + 11 Bits.</Description>
            </Property>
            <Property>
               <Name>RTA</Name>
               <Location>Search3Serial2M1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.M1553;
	propertyValue = comobj.RTA;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.M1553;
	comobj.RTA = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Remote Terminal Address (RTA) value when searching for MIL-STD-1553 events.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Serial2SPI</Name>
         <Description>IAgInfiniiVision2SearchSerialSPI interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Serial2SPI1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Mode</Name>
               <Location>Search3Serial2SPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.SPI;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.SPI;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchSPIModeMOSI" Value="AgInfiniiVisionSearchSPIModeMOSI"/>
                     <Enum Name="AgInfiniiVisionSearchSPIModeMISO" Value="AgInfiniiVisionSearchSPIModeMISO"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the SPI search will be on the MOSI data or the MISO data.</Description>
            </Property>
            <Property>
               <Name>PatternData</Name>
               <Location>Search3Serial2SPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.SPI;
	propertyValue = comobj.PatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.SPI;
	comobj.PatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data value when searching for SPI events.</Description>
            </Property>
            <Property>
               <Name>PatternWidth</Name>
               <Location>Search3Serial2SPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.SPI;
	propertyValue = comobj.PatternWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.SPI;
	comobj.PatternWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the width of the data value (in bytes) when searching for SPI events. Valid values are from 1 to 10.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Serial2UART</Name>
         <Description>IAgInfiniiVision2SearchSerialUART interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Serial2UART1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Condition</Name>
               <Location>Search3Serial2UART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.UART;
	propertyValue = comobj.Condition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.UART;
	comobj.Condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchUARTConditionEqual" Value="AgInfiniiVisionSearchUARTConditionEqual"/>
                     <Enum Name="AgInfiniiVisionSearchUARTConditionNotEqual" Value="AgInfiniiVisionSearchUARTConditionNotEqual"/>
                     <Enum Name="AgInfiniiVisionSearchUARTConditionGreaterThan" Value="AgInfiniiVisionSearchUARTConditionGreaterThan"/>
                     <Enum Name="AgInfiniiVisionSearchUARTConditionLessThan" Value="AgInfiniiVisionSearchUARTConditionLessThan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data value qualifier when searching for UART/RS232 events.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search3Serial2UART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.UART;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.UART;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchUARTModeRData" Value="AgInfiniiVisionSearchUARTModeRData"/>
                     <Enum Name="AgInfiniiVisionSearchUARTModeRD1" Value="AgInfiniiVisionSearchUARTModeRD1"/>
                     <Enum Name="AgInfiniiVisionSearchUARTModeRD0" Value="AgInfiniiVisionSearchUARTModeRD0"/>
                     <Enum Name="AgInfiniiVisionSearchUARTModeRDX" Value="AgInfiniiVisionSearchUARTModeRDX"/>
                     <Enum Name="AgInfiniiVisionSearchUARTModeTData" Value="AgInfiniiVisionSearchUARTModeTData"/>
                     <Enum Name="AgInfiniiVisionSearchUARTModeTD1" Value="AgInfiniiVisionSearchUARTModeTD1"/>
                     <Enum Name="AgInfiniiVisionSearchUARTModeTD0" Value="AgInfiniiVisionSearchUARTModeTD0"/>
                     <Enum Name="AgInfiniiVisionSearchUARTModeTDX" Value="AgInfiniiVisionSearchUARTModeTDX"/>
                     <Enum Name="AgInfiniiVisionSearchUARTModeParityError" Value="AgInfiniiVisionSearchUARTModeParityError"/>
                     <Enum Name="AgInfiniiVisionSearchUARTModeAnyError" Value="AgInfiniiVisionSearchUARTModeAnyError"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the type of UART/RS232 information to find in the Lister display</Description>
            </Property>
            <Property>
               <Name>PatternData</Name>
               <Location>Search3Serial2UART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.UART;
	propertyValue = comobj.PatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.UART;
	comobj.PatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies a data value when searching for UART/RS232 events.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Serial2USB</Name>
         <Description>IAgInfiniiVision2SerialBus2USB interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Serial2USB1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Address</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.Address;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.Address = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the 7-bit Address portion of the search value, in hex.</Description>
            </Property>
            <Property>
               <Name>Condition</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.Condition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.Condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchUSBConditionToken" Value="AgInfiniiVisionSearchUSBConditionToken"/>
                     <Enum Name="AgInfiniiVisionSearchUSBConditionData" Value="AgInfiniiVisionSearchUSBConditionData"/>
                     <Enum Name="AgInfiniiVisionSearchUSBConditionHandshake" Value="AgInfiniiVisionSearchUSBConditionHandshake"/>
                     <Enum Name="AgInfiniiVisionSearchUSBConditionSpecial" Value="AgInfiniiVisionSearchUSBConditionSpecial"/>
                     <Enum Name="AgInfiniiVisionSearchUSBConditionAllErrors" Value="AgInfiniiVisionSearchUSBConditionAllErrors"/>
                     <Enum Name="AgInfiniiVisionSearchUSBConditionPIDError" Value="AgInfiniiVisionSearchUSBConditionPIDError"/>
                     <Enum Name="AgInfiniiVisionSearchUSBConditionCRC5Error" Value="AgInfiniiVisionSearchUSBConditionCRC5Error"/>
                     <Enum Name="AgInfiniiVisionSearchUSBConditionCRC16Error" Value="AgInfiniiVisionSearchUSBConditionCRC16Error"/>
                     <Enum Name="AgInfiniiVisionSearchUSBConditionGlitchError" Value="AgInfiniiVisionSearchUSBConditionGlitchError"/>
                     <Enum Name="AgInfiniiVisionSearchUSBConditionStuffError" Value="AgInfiniiVisionSearchUSBConditionStuffError"/>
                     <Enum Name="AgInfiniiVisionSearchUSBConditionSE1Error" Value="AgInfiniiVisionSearchUSBConditionSE1Error"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the USB search mode.</Description>
            </Property>
            <Property>
               <Name>CRC</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.CRC;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.CRC = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the CRC portion of the search value, in hex.</Description>
            </Property>
            <Property>
               <Name>Data</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.Data;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.Data = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Data portion of the trigger, in hex.</Description>
            </Property>
            <Property>
               <Name>DataLength</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.DataLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.DataLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data length in bytes.</Description>
            </Property>
            <Property>
               <Name>EndPoint</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.EndPoint;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.EndPoint = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the 4-bit Endpoint portion of the search value, in hex.</Description>
            </Property>
            <Property>
               <Name>ET</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.ET;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.ET = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the 2-bit ET portion of the search value, in hex.</Description>
            </Property>
            <Property>
               <Name>Frame</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.Frame;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.Frame = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the 11-bit Frame portion of the search value, in hex.</Description>
            </Property>
            <Property>
               <Name>HubAddress</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.HubAddress;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.HubAddress = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the 7-bit Hub Address portion of the search value, in hex.</Description>
            </Property>
            <Property>
               <Name>PIDData</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.PIDData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.PIDData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionPIDDataData0" Value="AgInfiniiVisionPIDDataData0"/>
                     <Enum Name="AgInfiniiVisionPIDDataData1" Value="AgInfiniiVisionPIDDataData1"/>
                     <Enum Name="AgInfiniiVisionPIDDataData2" Value="AgInfiniiVisionPIDDataData2"/>
                     <Enum Name="AgInfiniiVisionPIDDataMData" Value="AgInfiniiVisionPIDDataMData"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the USB data PID to find.</Description>
            </Property>
            <Property>
               <Name>PIDHandshake</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.PIDHandshake;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.PIDHandshake = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionPIDHandshakeACK" Value="AgInfiniiVisionPIDHandshakeACK"/>
                     <Enum Name="AgInfiniiVisionPIDHandshakeNAK" Value="AgInfiniiVisionPIDHandshakeNAK"/>
                     <Enum Name="AgInfiniiVisionPIDHandshakeSTALL" Value="AgInfiniiVisionPIDHandshakeSTALL"/>
                     <Enum Name="AgInfiniiVisionPIDHandshakeNYET" Value="AgInfiniiVisionPIDHandshakeNYET"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the USB handshake PID to find.</Description>
            </Property>
            <Property>
               <Name>PIDSpecial</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.PIDSpecial;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.PIDSpecial = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionPIDSpecialPing" Value="AgInfiniiVisionPIDSpecialPing"/>
                     <Enum Name="AgInfiniiVisionPIDSpecialPreamble" Value="AgInfiniiVisionPIDSpecialPreamble"/>
                     <Enum Name="AgInfiniiVisionPIDSpecialERR" Value="AgInfiniiVisionPIDSpecialERR"/>
                     <Enum Name="AgInfiniiVisionPIDSpecialSplit" Value="AgInfiniiVisionPIDSpecialSplit"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the USB special PID to find.</Description>
            </Property>
            <Property>
               <Name>PIDToken</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.PIDToken;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.PIDToken = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionPIDTokenOut" Value="AgInfiniiVisionPIDTokenOut"/>
                     <Enum Name="AgInfiniiVisionPIDTokenIn" Value="AgInfiniiVisionPIDTokenIn"/>
                     <Enum Name="AgInfiniiVisionPIDTokenSetup" Value="AgInfiniiVisionPIDTokenSetup"/>
                     <Enum Name="AgInfiniiVisionPIDTokenSof" Value="AgInfiniiVisionPIDTokenSof"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the USB token PID to find.</Description>
            </Property>
            <Property>
               <Name>Port</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.Port;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.Port = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the 7-bit Port portion of the search value, in hex.</Description>
            </Property>
            <Property>
               <Name>SC</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.SC;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.SC = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the 1-bit SC portion of the search value, in hex.</Description>
            </Property>
            <Property>
               <Name>SEU</Name>
               <Location>Search3Serial2USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	propertyValue = comobj.SEU;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Serial2;
	comobj = comobj.USB;
	comobj.SEU = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the 2-bit S and E or U portion of the search value, in hex.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search3Transition</Name>
         <Description>IAgInfiniiVision2SearchTransition interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search3Transition1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Condition</Name>
               <Location>Search3Transition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Transition;
	propertyValue = comobj.Condition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Transition;
	comobj.Condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchTransitionConditionGreaterThan" Value="AgInfiniiVisionSearchTransitionConditionGreaterThan"/>
                     <Enum Name="AgInfiniiVisionSearchTransitionConditionLessThan" Value="AgInfiniiVisionSearchTransitionConditionLessThan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether to search for edge transitions greater than or less than a time.</Description>
            </Property>
            <Property>
               <Name>QualifierTime</Name>
               <Location>Search3Transition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Transition;
	propertyValue = comobj.QualifierTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Transition;
	comobj.QualifierTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The time (in seconds) of the transition to search for. You can search for transitions greater than or less than this time.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>Search3Transition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Transition;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Transition;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchTransitionSlopeNegative" Value="AgInfiniiVisionSearchTransitionSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionSearchTransitionSlopePositive" Value="AgInfiniiVisionSearchTransitionSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether to search for rising edge (Positive slope) transitions or falling edge (Negative slope) transitions.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Search3Transition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Transition;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search3;
	comobj = comobj.Transition;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The channel on which to search for edge transitions. The source is a string specified in the format: "Channel&lt;n&gt;", where &lt;n&gt; can be set to a value from 1 to the total number of analog channels available.&lt;/n&gt;&lt;/n&gt;</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Search3Transition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Slope, Condition, QualifierTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Search3;
comobj = comobj.Transition;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, Slope, Condition, double(QualifierTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the Source, Slope, Condition and QualifierTime properties for a transition search.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Search4</Name>
         <Description>IAgInfiniiVisionSearch4 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search41" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Search4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the number of search events found.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>Search4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the number of search events found.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchModeEdge" Value="AgInfiniiVisionSearchModeEdge"/>
                     <Enum Name="AgInfiniiVisionSearchModeGlitch" Value="AgInfiniiVisionSearchModeGlitch"/>
                     <Enum Name="AgInfiniiVisionSearchModeRunt" Value="AgInfiniiVisionSearchModeRunt"/>
                     <Enum Name="AgInfiniiVisionSearchModeTransition" Value="AgInfiniiVisionSearchModeTransition"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial1" Value="AgInfiniiVisionSearchModeSerial1"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial2" Value="AgInfiniiVisionSearchModeSerial2"/>
                     <Enum Name="AgInfiniiVisionSearchModeOff" Value="AgInfiniiVisionSearchModeOff"/>
                     <Enum Name="AgInfiniiVisionSearchModePeak" Value="AgInfiniiVisionSearchModePeak"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The oscilloscope search mode.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Search4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchModeEdge" Value="AgInfiniiVisionSearchModeEdge"/>
                     <Enum Name="AgInfiniiVisionSearchModeGlitch" Value="AgInfiniiVisionSearchModeGlitch"/>
                     <Enum Name="AgInfiniiVisionSearchModeRunt" Value="AgInfiniiVisionSearchModeRunt"/>
                     <Enum Name="AgInfiniiVisionSearchModeTransition" Value="AgInfiniiVisionSearchModeTransition"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial1" Value="AgInfiniiVisionSearchModeSerial1"/>
                     <Enum Name="AgInfiniiVisionSearchModeSerial2" Value="AgInfiniiVisionSearchModeSerial2"/>
                     <Enum Name="AgInfiniiVisionSearchModeOff" Value="AgInfiniiVisionSearchModeOff"/>
                     <Enum Name="AgInfiniiVisionSearchModePeak" Value="AgInfiniiVisionSearchModePeak"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The oscilloscope search mode.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search4Serial3</Name>
         <Description>IAgInfiniiVisionSearchSerial3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search4Serial31" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search4Serial3SENT</Name>
         <Description>IAgInfiniiVisionSearchSerial3SENT interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search4Serial3SENT1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Mode</Name>
               <Location>Search4Serial3SENT</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	comobj = comobj.Serial3;
	comobj = comobj.SENT;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	comobj = comobj.Serial3;
	comobj = comobj.SENT;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSearchSentFCData" Value="AgInfiniiVisionSearchSentFCData"/>
                     <Enum Name="AgInfiniiVisionSearchSentSCMsgid" Value="AgInfiniiVisionSearchSentSCMsgid"/>
                     <Enum Name="AgInfiniiVisionSearchSentSCData" Value="AgInfiniiVisionSearchSentSCData"/>
                     <Enum Name="AgInfiniiVisionSearchSentCRCError" Value="AgInfiniiVisionSearchSentCRCError"/>
                     <Enum Name="AgInfiniiVisionSearchSentPPError" Value="AgInfiniiVisionSearchSentPPError"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the search mode settings.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search4Serial3SENTFast</Name>
         <Description>IAgInfiniiVisionSearchSerial3SENTFast interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search4Serial3SENTFast1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Data</Name>
               <Location>Search4Serial3SENTFast</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	comobj = comobj.Serial3;
	comobj = comobj.SENT;
	comobj = comobj.Fast;
	propertyValue = comobj.Data;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	comobj = comobj.Serial3;
	comobj = comobj.SENT;
	comobj = comobj.Fast;
	comobj.Data = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the status and data nibbles that will be searched for when the FCData search mode is chosen.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Search4Serial3SENTSlow</Name>
         <Description>IAgInfiniiVisionSearchSerial3SENTSlow interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Search4Serial3SENTSlow1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Data</Name>
               <Location>Search4Serial3SENTSlow</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	comobj = comobj.Serial3;
	comobj = comobj.SENT;
	comobj = comobj.Slow;
	propertyValue = comobj.Data;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	comobj = comobj.Serial3;
	comobj = comobj.SENT;
	comobj = comobj.Slow;
	comobj.Data = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the data to search for in the Slow Channel Message ID and Data search mode.</Description>
            </Property>
            <Property>
               <Name>ID</Name>
               <Location>Search4Serial3SENTSlow</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	comobj = comobj.Serial3;
	comobj = comobj.SENT;
	comobj = comobj.Slow;
	propertyValue = comobj.ID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Search4;
	comobj = comobj.Serial3;
	comobj = comobj.SENT;
	comobj = comobj.Slow;
	comobj.ID = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets and gets the ID to seach for in the "Slow Channel Message ID" and "Slow Channel Message ID &amp; Data" trigger modes.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>SerialBuse</Name>
         <Description>IAgInfiniiVision2SerialBus interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuse1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>SerialBuse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the serial decode bus will be displayed or not. When Enabled is set to true, the serial decode bus is displayed. When false, the serial decode bus is not displayed.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>SerialBuse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the serial decode bus will be displayed or not. When Enabled is set to true, the serial decode bus is displayed. When false, the serial decode bus is not displayed.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>SerialBuse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusModeCAN" Value="AgInfiniiVisionSerialBusModeCAN"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeI2S" Value="AgInfiniiVisionSerialBusModeI2S"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeIIC" Value="AgInfiniiVisionSerialBusModeIIC"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeLIN" Value="AgInfiniiVisionSerialBusModeLIN"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeSPI" Value="AgInfiniiVisionSerialBusModeSPI"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeUART" Value="AgInfiniiVisionSerialBusModeUART"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeNone" Value="AgInfiniiVisionSerialBusModeNone"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeARINC429" Value="AgInfiniiVisionSerialBusModeARINC429"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeM1553" Value="AgInfiniiVisionSerialBusModeM1553"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeFlexRay" Value="AgInfiniiVisionSerialBusModeFlexRay"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeUSB" Value="AgInfiniiVisionSerialBusModeUSB"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeSENT" Value="AgInfiniiVisionSerialBusModeSENT"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Determines the decode mode for the serial bus.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>SerialBuse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusModeCAN" Value="AgInfiniiVisionSerialBusModeCAN"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeI2S" Value="AgInfiniiVisionSerialBusModeI2S"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeIIC" Value="AgInfiniiVisionSerialBusModeIIC"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeLIN" Value="AgInfiniiVisionSerialBusModeLIN"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeSPI" Value="AgInfiniiVisionSerialBusModeSPI"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeUART" Value="AgInfiniiVisionSerialBusModeUART"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeNone" Value="AgInfiniiVisionSerialBusModeNone"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeARINC429" Value="AgInfiniiVisionSerialBusModeARINC429"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeM1553" Value="AgInfiniiVisionSerialBusModeM1553"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeFlexRay" Value="AgInfiniiVisionSerialBusModeFlexRay"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeUSB" Value="AgInfiniiVisionSerialBusModeUSB"/>
                     <Enum Name="AgInfiniiVisionSerialBusModeSENT" Value="AgInfiniiVisionSerialBusModeSENT"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Determines the decode mode for the serial bus.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>SerialBuseARINC429</Name>
         <Description>IAgInfiniiVision2SerialBusARINC429 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuseARINC4291" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Base</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.Base;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.Base = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429BaseBinary" Value="AgInfiniiVisionSerialBusARINC429BaseBinary"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429BaseHexadecimal" Value="AgInfiniiVisionSerialBusARINC429BaseHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects between hexadecimal and binary display of the decoded data.</Description>
            </Property>
            <Property>
               <Name>Base</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.Base;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.Base = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429BaseBinary" Value="AgInfiniiVisionSerialBusARINC429BaseBinary"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429BaseHexadecimal" Value="AgInfiniiVisionSerialBusARINC429BaseHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects between hexadecimal and binary display of the decoded data.</Description>
            </Property>
            <Property>
               <Name>DisplayFormat</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.DisplayFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.DisplayFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429DisplayFormatLabelSDIDataSSM" Value="AgInfiniiVisionSerialBusARINC429DisplayFormatLabelSDIDataSSM"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429DisplayFormatLabelDataSSM" Value="AgInfiniiVisionSerialBusARINC429DisplayFormatLabelDataSSM"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429DisplayFormatLabelData" Value="AgInfiniiVisionSerialBusARINC429DisplayFormatLabelData"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the word decode format.</Description>
            </Property>
            <Property>
               <Name>DisplayFormat</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.DisplayFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.DisplayFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429DisplayFormatLabelSDIDataSSM" Value="AgInfiniiVisionSerialBusARINC429DisplayFormatLabelSDIDataSSM"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429DisplayFormatLabelDataSSM" Value="AgInfiniiVisionSerialBusARINC429DisplayFormatLabelDataSSM"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429DisplayFormatLabelData" Value="AgInfiniiVisionSerialBusARINC429DisplayFormatLabelData"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the word decode format.</Description>
            </Property>
            <Property>
               <Name>ErrorCount</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.ErrorCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the ARINC 429 error count.</Description>
            </Property>
            <Property>
               <Name>ErrorCount</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.ErrorCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the ARINC 429 error count.</Description>
            </Property>
            <Property>
               <Name>SignalType</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.SignalType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.SignalType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429SignalTypeLineA" Value="AgInfiniiVisionSerialBusARINC429SignalTypeLineA"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429SignalTypeLineB" Value="AgInfiniiVisionSerialBusARINC429SignalTypeLineB"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429SignalTypeDifferential" Value="AgInfiniiVisionSerialBusARINC429SignalTypeDifferential"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of ARINC 429 signal being probed. Line A (non-inverted), Line B (inverted), or Differential (A ? B).</Description>
            </Property>
            <Property>
               <Name>SignalType</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.SignalType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.SignalType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429SignalTypeLineA" Value="AgInfiniiVisionSerialBusARINC429SignalTypeLineA"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429SignalTypeLineB" Value="AgInfiniiVisionSerialBusARINC429SignalTypeLineB"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429SignalTypeDifferential" Value="AgInfiniiVisionSerialBusARINC429SignalTypeDifferential"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of ARINC 429 signal being probed. Line A (non-inverted), Line B (inverted), or Differential (A ? B).</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which signal is used as the source for the selected bus.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which signal is used as the source for the selected bus.</Description>
            </Property>
            <Property>
               <Name>Speed</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.Speed;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.Speed = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429SpeedLow" Value="AgInfiniiVisionSerialBusARINC429SpeedLow"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429SpeedHigh" Value="AgInfiniiVisionSerialBusARINC429SpeedHigh"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the speed of the ARINC 429 interface for the selected bus.</Description>
            </Property>
            <Property>
               <Name>Speed</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.Speed;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.Speed = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429SpeedLow" Value="AgInfiniiVisionSerialBusARINC429SpeedLow"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429SpeedHigh" Value="AgInfiniiVisionSerialBusARINC429SpeedHigh"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the speed of the ARINC 429 interface for the selected bus.</Description>
            </Property>
            <Property>
               <Name>TriggerLabel</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerLabel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerLabel = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Label portion of the trigger for the selected bus.</Description>
            </Property>
            <Property>
               <Name>TriggerLabel</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerLabel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerLabel = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Label portion of the trigger for the selected bus.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerPatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerPatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Data portion of the trigger for the selected bus, in binary.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerPatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerPatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Data portion of the trigger for the selected bus, in binary.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternSDI</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerPatternSDI;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerPatternSDI = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the SDI portion of the trigger for the selected bus, in binary. Length is always 2 bits.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternSDI</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerPatternSDI;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerPatternSDI = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the SDI portion of the trigger for the selected bus, in binary. Length is always 2 bits.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternSSM</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerPatternSSM;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerPatternSSM = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the SSM portion of the trigger for the selected bus, in binary. Length is always 2 bits.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternSSM</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerPatternSSM;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerPatternSSM = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the SSM portion of the trigger for the selected bus, in binary. Length is always 2 bits.</Description>
            </Property>
            <Property>
               <Name>TriggerThresholdHigh</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerThresholdHigh;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerThresholdHigh = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high threshold the oscilloscope uses for the ARINC429 serial bus mode.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>TriggerThresholdHigh</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerThresholdHigh;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerThresholdHigh = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high threshold the oscilloscope uses for the ARINC429 serial bus mode.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>TriggerThresholdLow</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerThresholdLow;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerThresholdLow = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The low threshold the oscilloscope uses for the ARINC429 serial bus mode.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>TriggerThresholdLow</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerThresholdLow;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerThresholdLow = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The low threshold the oscilloscope uses for the ARINC429 serial bus mode.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeWordStart" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeWordStart"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeWordStop" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeWordStop"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeLabel" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeLabel"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeLabelBits" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeLabelBits"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeLabelRange" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeLabelRange"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeParityError" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeParityError"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeWordError" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeWordError"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeWordOrGapError" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeWordOrGapError"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeAllErrors" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeAllErrors"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeAllBits" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeAllBits"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeAllZeroBits" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeAllZeroBits"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeAllOneBits" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeAllOneBits"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeGapError" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeGapError"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the ARINC 429 trigger mode for the selected bus.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.TriggerType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	comobj.TriggerType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeWordStart" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeWordStart"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeWordStop" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeWordStop"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeLabel" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeLabel"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeLabelBits" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeLabelBits"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeLabelRange" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeLabelRange"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeParityError" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeParityError"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeWordError" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeWordError"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeWordOrGapError" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeWordOrGapError"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeAllErrors" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeAllErrors"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeAllBits" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeAllBits"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeAllZeroBits" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeAllZeroBits"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeAllOneBits" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeAllOneBits"/>
                     <Enum Name="AgInfiniiVisionSerialBusARINC429TriggerTypeGapError" Value="AgInfiniiVisionSerialBusARINC429TriggerTypeGapError"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the ARINC 429 trigger mode for the selected bus.</Description>
            </Property>
            <Property>
               <Name>WordCount</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.WordCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the ARINC 429 word count.</Description>
            </Property>
            <Property>
               <Name>WordCount</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.ARINC429;
	propertyValue = comobj.WordCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the ARINC 429 word count.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>AutoSetup</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.ARINC429;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Automatically configures settings for the ARINC 429 serial bus mode.</Description>
            </Method>
            <Method>
               <Name>AutoSetup</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.ARINC429;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Automatically configures settings for the ARINC 429 serial bus mode.</Description>
            </Method>
            <Method>
               <Name>GetTriggerRange</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [LowerLimit, UpperLimit] = GetTriggerRange(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.ARINC429;
feature('COM_SafeArraySingleDim',1);
[LowerLimit, UpperLimit] = comobj.GetTriggerRange(0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Gets the range for the Label Range trigger mode for the selected bus.</Description>
            </Method>
            <Method>
               <Name>GetTriggerRange</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [LowerLimit, UpperLimit] = GetTriggerRange(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.ARINC429;
feature('COM_SafeArraySingleDim',1);
[LowerLimit, UpperLimit] = comobj.GetTriggerRange(0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Gets the range for the Label Range trigger mode for the selected bus.</Description>
            </Method>
            <Method>
               <Name>ResetCounters</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetCounters(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.ARINC429;
feature('COM_SafeArraySingleDim',1);
comobj.ResetCounters();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Resets the ARINC 429 counters.</Description>
            </Method>
            <Method>
               <Name>ResetCounters</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetCounters(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.ARINC429;
feature('COM_SafeArraySingleDim',1);
comobj.ResetCounters();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Resets the ARINC 429 counters.</Description>
            </Method>
            <Method>
               <Name>SetTriggerRange</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetTriggerRange(obj, LowerLimit, UpperLimit)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.ARINC429;
feature('COM_SafeArraySingleDim',1);
comobj.SetTriggerRange(LowerLimit, UpperLimit);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the range for the Label Range trigger mode for the selected bus.</Description>
            </Method>
            <Method>
               <Name>SetTriggerRange</Name>
               <Location>SerialBuseARINC429</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetTriggerRange(obj, LowerLimit, UpperLimit)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.ARINC429;
feature('COM_SafeArraySingleDim',1);
comobj.SetTriggerRange(LowerLimit, UpperLimit);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the range for the Label Range trigger mode for the selected bus.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SerialBuseCAN</Name>
         <Description>IAgInfiniiVision2SerialBusCAN interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuseCAN1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BaudRate</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.BaudRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.BaudRate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the standard baud rate of the CAN signal. The baud rate is set from 10 kb/s to 1 Mb/s in 100 b/s increments. If you enter a baud rate that is not divisible by 100 b/s, the baud rate is set to the nearest baud rate divisible by 100 b/s.</Description>
            </Property>
            <Property>
               <Name>BaudRate</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.BaudRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.BaudRate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the standard baud rate of the CAN signal. The baud rate is set from 10 kb/s to 1 Mb/s in 100 b/s increments. If you enter a baud rate that is not divisible by 100 b/s, the baud rate is set to the nearest baud rate divisible by 100 b/s.</Description>
            </Property>
            <Property>
               <Name>ErrorCount</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.ErrorCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the error frame count.</Description>
            </Property>
            <Property>
               <Name>ErrorCount</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.ErrorCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the error frame count.</Description>
            </Property>
            <Property>
               <Name>OverloadCount</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.OverloadCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the overload frame count.</Description>
            </Property>
            <Property>
               <Name>OverloadCount</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.OverloadCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the overload frame count.</Description>
            </Property>
            <Property>
               <Name>SamplePoint</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.SamplePoint;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.SamplePoint = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the point during the bit time where the bit level is sampled to determine whether the bit is dominant or recessive. The sample point represents the percentage of time between the beginning of the bit time to the end of the bit time.</Description>
            </Property>
            <Property>
               <Name>SamplePoint</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.SamplePoint;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.SamplePoint = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the point during the bit time where the bit level is sampled to determine whether the bit is dominant or recessive. The sample point represents the percentage of time between the beginning of the bit time to the end of the bit time.</Description>
            </Property>
            <Property>
               <Name>SignalType</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.SignalType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.SignalType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeCANH" Value="AgInfiniiVisionSerialBusCANSignalTypeCANH"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeCANL" Value="AgInfiniiVisionSerialBusCANSignalTypeCANL"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeRX" Value="AgInfiniiVisionSerialBusCANSignalTypeRX"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeTX" Value="AgInfiniiVisionSerialBusCANSignalTypeTX"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeDifferential" Value="AgInfiniiVisionSerialBusCANSignalTypeDifferential"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeDIFL" Value="AgInfiniiVisionSerialBusCANSignalTypeDIFL"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeDIFH" Value="AgInfiniiVisionSerialBusCANSignalTypeDIFH"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the CAN signal type when TriggerCondition is set to AgInfiniiVisionSerialBusCANTriggerConditionSOF (Start of Frame).</Description>
            </Property>
            <Property>
               <Name>SignalType</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.SignalType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.SignalType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeCANH" Value="AgInfiniiVisionSerialBusCANSignalTypeCANH"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeCANL" Value="AgInfiniiVisionSerialBusCANSignalTypeCANL"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeRX" Value="AgInfiniiVisionSerialBusCANSignalTypeRX"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeTX" Value="AgInfiniiVisionSerialBusCANSignalTypeTX"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeDifferential" Value="AgInfiniiVisionSerialBusCANSignalTypeDifferential"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeDIFL" Value="AgInfiniiVisionSerialBusCANSignalTypeDIFL"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANSignalTypeDIFH" Value="AgInfiniiVisionSerialBusCANSignalTypeDIFH"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the CAN signal type when TriggerCondition is set to AgInfiniiVisionSerialBusCANTriggerConditionSOF (Start of Frame).</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for the CAN signal</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for the CAN signal</Description>
            </Property>
            <Property>
               <Name>TotalCount</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.TotalCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the total frame count.</Description>
            </Property>
            <Property>
               <Name>TotalCount</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.TotalCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the total frame count.</Description>
            </Property>
            <Property>
               <Name>TriggerCondition</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.TriggerCondition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.TriggerCondition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionSOF" Value="AgInfiniiVisionSerialBusCANTriggerConditionSOF"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionData" Value="AgInfiniiVisionSerialBusCANTriggerConditionData"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionError" Value="AgInfiniiVisionSerialBusCANTriggerConditionError"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionIDData" Value="AgInfiniiVisionSerialBusCANTriggerConditionIDData"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionIDEither" Value="AgInfiniiVisionSerialBusCANTriggerConditionIDEither"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionIDRemote" Value="AgInfiniiVisionSerialBusCANTriggerConditionIDRemote"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionAllErrors" Value="AgInfiniiVisionSerialBusCANTriggerConditionAllErrors"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionOverload" Value="AgInfiniiVisionSerialBusCANTriggerConditionOverload"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionAckError" Value="AgInfiniiVisionSerialBusCANTriggerConditionAckError"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionEOF" Value="AgInfiniiVisionSerialBusCANTriggerConditionEOF"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionFDData" Value="AgInfiniiVisionSerialBusCANTriggerConditionFDData"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionFormError" Value="AgInfiniiVisionSerialBusCANTriggerConditionFormError"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionStuffError" Value="AgInfiniiVisionSerialBusCANTriggerConditionStuffError"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionCRCError" Value="AgInfiniiVisionSerialBusCANTriggerConditionCRCError"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionSpecError" Value="AgInfiniiVisionSerialBusCANTriggerConditionSpecError"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionBRSBit" Value="AgInfiniiVisionSerialBusCANTriggerConditionBRSBit"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionCRCDbit" Value="AgInfiniiVisionSerialBusCANTriggerConditionCRCDbit"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionEBActive" Value="AgInfiniiVisionSerialBusCANTriggerConditionEBActive"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionEBPassive" Value="AgInfiniiVisionSerialBusCANTriggerConditionEBPassive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the CAN trigger on condition</Description>
            </Property>
            <Property>
               <Name>TriggerCondition</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.TriggerCondition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.TriggerCondition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionSOF" Value="AgInfiniiVisionSerialBusCANTriggerConditionSOF"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionData" Value="AgInfiniiVisionSerialBusCANTriggerConditionData"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionError" Value="AgInfiniiVisionSerialBusCANTriggerConditionError"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionIDData" Value="AgInfiniiVisionSerialBusCANTriggerConditionIDData"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionIDEither" Value="AgInfiniiVisionSerialBusCANTriggerConditionIDEither"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionIDRemote" Value="AgInfiniiVisionSerialBusCANTriggerConditionIDRemote"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionAllErrors" Value="AgInfiniiVisionSerialBusCANTriggerConditionAllErrors"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionOverload" Value="AgInfiniiVisionSerialBusCANTriggerConditionOverload"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionAckError" Value="AgInfiniiVisionSerialBusCANTriggerConditionAckError"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionEOF" Value="AgInfiniiVisionSerialBusCANTriggerConditionEOF"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionFDData" Value="AgInfiniiVisionSerialBusCANTriggerConditionFDData"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionFormError" Value="AgInfiniiVisionSerialBusCANTriggerConditionFormError"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionStuffError" Value="AgInfiniiVisionSerialBusCANTriggerConditionStuffError"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionCRCError" Value="AgInfiniiVisionSerialBusCANTriggerConditionCRCError"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionSpecError" Value="AgInfiniiVisionSerialBusCANTriggerConditionSpecError"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionBRSBit" Value="AgInfiniiVisionSerialBusCANTriggerConditionBRSBit"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionCRCDbit" Value="AgInfiniiVisionSerialBusCANTriggerConditionCRCDbit"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionEBActive" Value="AgInfiniiVisionSerialBusCANTriggerConditionEBActive"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANTriggerConditionEBPassive" Value="AgInfiniiVisionSerialBusCANTriggerConditionEBPassive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the CAN trigger on condition</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.TriggerPatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.TriggerPatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the CAN data pattern resource according to the string parameter. This pattern, along with the data length (set by the TriggerPatternDataLength property), control the data pattern searched for in each CAN message.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.TriggerPatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.TriggerPatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the CAN data pattern resource according to the string parameter. This pattern, along with the data length (set by the TriggerPatternDataLength property), control the data pattern searched for in each CAN message.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternDataLength</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.TriggerPatternDataLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.TriggerPatternDataLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the number of 8-bit bytes in the CAN data string. The number of bytes in the string can be anywhere from 1 bytes to 8 bytes (64 bits). The value for these bytes is set by the TriggerPatternData property.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternDataLength</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.TriggerPatternDataLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.TriggerPatternDataLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the number of 8-bit bytes in the CAN data string. The number of bytes in the string can be anywhere from 1 bytes to 8 bytes (64 bits). The value for these bytes is set by the TriggerPatternData property.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternID</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.TriggerPatternID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.TriggerPatternID = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the CAN identifier pattern resource according to the string parameter. This pattern, along with the identifier mode (set by the TriggerPatternIDType property), control the identifier pattern searched for in each CAN message.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternID</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.TriggerPatternID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.TriggerPatternID = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the CAN identifier pattern resource according to the string parameter. This pattern, along with the identifier mode (set by the TriggerPatternIDType property), control the identifier pattern searched for in each CAN message.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternIDType</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.TriggerPatternIDType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.TriggerPatternIDType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusCANPatternIDTypeStandard" Value="AgInfiniiVisionSerialBusCANPatternIDTypeStandard"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANPatternIDTypeExtended" Value="AgInfiniiVisionSerialBusCANPatternIDTypeExtended"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the CAN identifier mode. The CAN identifier is set by the TriggerPatternID property.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternIDType</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.TriggerPatternIDType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	comobj.TriggerPatternIDType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusCANPatternIDTypeStandard" Value="AgInfiniiVisionSerialBusCANPatternIDTypeStandard"/>
                     <Enum Name="AgInfiniiVisionSerialBusCANPatternIDTypeExtended" Value="AgInfiniiVisionSerialBusCANPatternIDTypeExtended"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the CAN identifier mode. The CAN identifier is set by the TriggerPatternID property.</Description>
            </Property>
            <Property>
               <Name>Utilization</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.Utilization;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the percent utilization.</Description>
            </Property>
            <Property>
               <Name>Utilization</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.CAN;
	propertyValue = comobj.Utilization;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the percent utilization.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ResetCounters</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetCounters(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.CAN;
feature('COM_SafeArraySingleDim',1);
comobj.ResetCounters();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Resets the frame counters.</Description>
            </Method>
            <Method>
               <Name>ResetCounters</Name>
               <Location>SerialBuseCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetCounters(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.CAN;
feature('COM_SafeArraySingleDim',1);
comobj.ResetCounters();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Resets the frame counters.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SerialBuseFlexRay</Name>
         <Description>IAgInfiniiVision2SerialBusFlexRay interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuseFlexRay1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BaudRate</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.BaudRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.BaudRate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the baud rate. Valid values are: 2500000, 5000000, 10000000 b/s.</Description>
            </Property>
            <Property>
               <Name>BaudRate</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.BaudRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.BaudRate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the baud rate. Valid values are: 2500000, 5000000, 10000000 b/s.</Description>
            </Property>
            <Property>
               <Name>Channel</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.Channel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.Channel = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayChannelA" Value="AgInfiniiVisionSerialBusFlexRayChannelA"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayChannelB" Value="AgInfiniiVisionSerialBusFlexRayChannelB"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the bus channel, A or B, of the FlexRay signal.</Description>
            </Property>
            <Property>
               <Name>Channel</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.Channel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.Channel = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayChannelA" Value="AgInfiniiVisionSerialBusFlexRayChannelA"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayChannelB" Value="AgInfiniiVisionSerialBusFlexRayChannelB"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the bus channel, A or B, of the FlexRay signal.</Description>
            </Property>
            <Property>
               <Name>ErrorCount</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.ErrorCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the FlexRay error frame count.</Description>
            </Property>
            <Property>
               <Name>ErrorCount</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.ErrorCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the FlexRay error frame count.</Description>
            </Property>
            <Property>
               <Name>NullCount</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.NullCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the FlexRay null frame count.</Description>
            </Property>
            <Property>
               <Name>NullCount</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.NullCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the FlexRay null frame count.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the input source for the FlexRay signal.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the input source for the FlexRay signal.</Description>
            </Property>
            <Property>
               <Name>SyncCount</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.SyncCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the FlexRay sync frame count.</Description>
            </Property>
            <Property>
               <Name>SyncCount</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.SyncCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the FlexRay sync frame count.</Description>
            </Property>
            <Property>
               <Name>TotalCount</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TotalCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the FlexRay total frame count.</Description>
            </Property>
            <Property>
               <Name>TotalCount</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TotalCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the FlexRay total frame count.</Description>
            </Property>
            <Property>
               <Name>TriggerErrorType</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerErrorType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerErrorType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerErrorTypeAll" Value="AgInfiniiVisionSerialBusFlexRayTriggerErrorTypeAll"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerErrorTypeHeaderCRC" Value="AgInfiniiVisionSerialBusFlexRayTriggerErrorTypeHeaderCRC"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerErrorTypeFrameCRC" Value="AgInfiniiVisionSerialBusFlexRayTriggerErrorTypeFrameCRC"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FlexRay error type to trigger on. The error type setting is only valid when the FlexRay TriggerType property is set to Error.</Description>
            </Property>
            <Property>
               <Name>TriggerErrorType</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerErrorType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerErrorType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerErrorTypeAll" Value="AgInfiniiVisionSerialBusFlexRayTriggerErrorTypeAll"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerErrorTypeHeaderCRC" Value="AgInfiniiVisionSerialBusFlexRayTriggerErrorTypeHeaderCRC"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerErrorTypeFrameCRC" Value="AgInfiniiVisionSerialBusFlexRayTriggerErrorTypeFrameCRC"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FlexRay error type to trigger on. The error type setting is only valid when the FlexRay TriggerType property is set to Error.</Description>
            </Property>
            <Property>
               <Name>TriggerEventBSSID</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerEventBSSID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerEventBSSID = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the ByteStart Sequence ID.</Description>
            </Property>
            <Property>
               <Name>TriggerEventBSSID</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerEventBSSID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerEventBSSID = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the ByteStart Sequence ID.</Description>
            </Property>
            <Property>
               <Name>TriggerEventType</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerEventType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerEventType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeWakeUp" Value="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeWakeUp"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeTSS" Value="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeTSS"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeBSS" Value="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeBSS"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeFES" Value="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeFES"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeDTS" Value="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeDTS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FlexRay event to trigger on. The event setting is only valid when the FlexRay TriggerType property is set to Event.</Description>
            </Property>
            <Property>
               <Name>TriggerEventType</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerEventType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerEventType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeWakeUp" Value="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeWakeUp"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeTSS" Value="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeTSS"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeBSS" Value="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeBSS"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeFES" Value="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeFES"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeDTS" Value="AgInfiniiVisionSerialBusFlexRayTriggerEventTypeDTS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FlexRay event to trigger on. The event setting is only valid when the FlexRay TriggerType property is set to Event.</Description>
            </Property>
            <Property>
               <Name>TriggerFrameCCBase</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerFrameCCBase;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerFrameCCBase = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the base of the FlexRay cycle count (in the frame header) to trigger on. The cycle count base setting is only valid when the FlexRay TriggerType property is set to Frame.</Description>
            </Property>
            <Property>
               <Name>TriggerFrameCCBase</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerFrameCCBase;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerFrameCCBase = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the base of the FlexRay cycle count (in the frame header) to trigger on. The cycle count base setting is only valid when the FlexRay TriggerType property is set to Frame.</Description>
            </Property>
            <Property>
               <Name>TriggerFrameCCRepetition</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerFrameCCRepetition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerFrameCCRepetition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the repetition number of the FlexRay cycle count (in the frame header) to trigger on. The cycle count repetition setting is only valid when the FlexRay TriggerType property is set to Frame.</Description>
            </Property>
            <Property>
               <Name>TriggerFrameCCRepetition</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerFrameCCRepetition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerFrameCCRepetition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the repetition number of the FlexRay cycle count (in the frame header) to trigger on. The cycle count repetition setting is only valid when the FlexRay TriggerType property is set to Frame.</Description>
            </Property>
            <Property>
               <Name>TriggerFrameID</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerFrameID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerFrameID = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FlexRay frame ID to trigger on. The frame ID setting is only valid when the FlexRay TriggerType property is set to Frame.</Description>
            </Property>
            <Property>
               <Name>TriggerFrameID</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerFrameID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerFrameID = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FlexRay frame ID to trigger on. The frame ID setting is only valid when the FlexRay TriggerType property is set to Frame.</Description>
            </Property>
            <Property>
               <Name>TriggerFrameType</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerFrameType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerFrameType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNormal" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNormal"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeStartup" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeStartup"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNull" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNull"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeSync" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeSync"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNotStartup" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNotStartup"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNotNull" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNotNull"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNotSync" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNotSync"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeAll" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeAll"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FlexRay frame type to trigger on. The frame type setting is only valid when the FlexRay TriggerType property is set to Frame.</Description>
            </Property>
            <Property>
               <Name>TriggerFrameType</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerFrameType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerFrameType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNormal" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNormal"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeStartup" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeStartup"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNull" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNull"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeSync" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeSync"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNotStartup" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNotStartup"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNotNull" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNotNull"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNotSync" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeNotSync"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeAll" Value="AgInfiniiVisionSerialBusFlexRayTriggerFrameTypeAll"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FlexRay frame type to trigger on. The frame type setting is only valid when the FlexRay TriggerType property is set to Frame.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerTypeFrame" Value="AgInfiniiVisionSerialBusFlexRayTriggerTypeFrame"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerTypeError" Value="AgInfiniiVisionSerialBusFlexRayTriggerTypeError"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerTypeEvent" Value="AgInfiniiVisionSerialBusFlexRayTriggerTypeEvent"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FlexRay trigger on condition.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	propertyValue = comobj.TriggerType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.FlexRay;
	comobj.TriggerType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerTypeFrame" Value="AgInfiniiVisionSerialBusFlexRayTriggerTypeFrame"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerTypeError" Value="AgInfiniiVisionSerialBusFlexRayTriggerTypeError"/>
                     <Enum Name="AgInfiniiVisionSerialBusFlexRayTriggerTypeEvent" Value="AgInfiniiVisionSerialBusFlexRayTriggerTypeEvent"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the FlexRay trigger on condition.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>AutoSetup</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.FlexRay;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Automatically configures oscilloscope settings to facilitate FlexRay triggering and serial decode.</Description>
            </Method>
            <Method>
               <Name>AutoSetup</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.FlexRay;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Automatically configures oscilloscope settings to facilitate FlexRay triggering and serial decode.</Description>
            </Method>
            <Method>
               <Name>ResetCounters</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetCounters(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.FlexRay;
feature('COM_SafeArraySingleDim',1);
comobj.ResetCounters();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Resets the FlexRay frame counters.</Description>
            </Method>
            <Method>
               <Name>ResetCounters</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetCounters(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.FlexRay;
feature('COM_SafeArraySingleDim',1);
comobj.ResetCounters();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Resets the FlexRay frame counters.</Description>
            </Method>
            <Method>
               <Name>TriggerEventAutoSetup</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function TriggerEventAutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.FlexRay;
feature('COM_SafeArraySingleDim',1);
comobj.TriggerEventAutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Presets oscilloscope parameters for the selected event type.</Description>
            </Method>
            <Method>
               <Name>TriggerEventAutoSetup</Name>
               <Location>SerialBuseFlexRay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function TriggerEventAutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.FlexRay;
feature('COM_SafeArraySingleDim',1);
comobj.TriggerEventAutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Presets oscilloscope parameters for the selected event type.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SerialBuseI2S</Name>
         <Description>IAgInfiniiVision2SerialBusI2S interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuseI2S1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Base</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.Base;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.Base = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusI2SBaseDecimal" Value="AgInfiniiVisionSerialBusI2SBaseDecimal"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2SBaseHexadecimal" Value="AgInfiniiVisionSerialBusI2SBaseHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the base to use for the I2S decode display.</Description>
            </Property>
            <Property>
               <Name>Base</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.Base;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.Base = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusI2SBaseDecimal" Value="AgInfiniiVisionSerialBusI2SBaseDecimal"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2SBaseHexadecimal" Value="AgInfiniiVisionSerialBusI2SBaseHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the base to use for the I2S decode display.</Description>
            </Property>
            <Property>
               <Name>ClockSlope</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.ClockSlope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.ClockSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusI2SClockSlopeNegative" Value="AgInfiniiVisionSerialBusI2SClockSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2SClockSlopePositive" Value="AgInfiniiVisionSerialBusI2SClockSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which edge of the I2S serial clock signal clocks in data</Description>
            </Property>
            <Property>
               <Name>ClockSlope</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.ClockSlope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.ClockSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusI2SClockSlopeNegative" Value="AgInfiniiVisionSerialBusI2SClockSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2SClockSlopePositive" Value="AgInfiniiVisionSerialBusI2SClockSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which edge of the I2S serial clock signal clocks in data</Description>
            </Property>
            <Property>
               <Name>ClockSource</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which signal is used as the serial clock (SCLK) source by the serial decoder and/or trigger when in I2S mode.</Description>
            </Property>
            <Property>
               <Name>ClockSource</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which signal is used as the serial clock (SCLK) source by the serial decoder and/or trigger when in I2S mode.</Description>
            </Property>
            <Property>
               <Name>DataAlignment</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.DataAlignment;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.DataAlignment = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusI2SDataAlignmentStandard" Value="AgInfiniiVisionSerialBusI2SDataAlignmentStandard"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2SDataAlignmentLeftJustified" Value="AgInfiniiVisionSerialBusI2SDataAlignmentLeftJustified"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2SDataAlignmentRightJustified" Value="AgInfiniiVisionSerialBusI2SDataAlignmentRightJustified"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data alignment of the I2S bus for the serial decoder and/or trigger when in I2S mode.</Description>
            </Property>
            <Property>
               <Name>DataAlignment</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.DataAlignment;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.DataAlignment = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusI2SDataAlignmentStandard" Value="AgInfiniiVisionSerialBusI2SDataAlignmentStandard"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2SDataAlignmentLeftJustified" Value="AgInfiniiVisionSerialBusI2SDataAlignmentLeftJustified"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2SDataAlignmentRightJustified" Value="AgInfiniiVisionSerialBusI2SDataAlignmentRightJustified"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data alignment of the I2S bus for the serial decoder and/or trigger when in I2S mode.</Description>
            </Property>
            <Property>
               <Name>DataSource</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.DataSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.DataSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which signal is used as the serial data (SDATA) source by the serial decoder and/or trigger when in I2S mode.</Description>
            </Property>
            <Property>
               <Name>DataSource</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.DataSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.DataSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which signal is used as the serial data (SDATA) source by the serial decoder and/or trigger when in I2S mode.</Description>
            </Property>
            <Property>
               <Name>ReceiverWidth</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.ReceiverWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.ReceiverWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the width of the receiver (decoded) data word in I2S anywhere from 4 bits to 32 bits</Description>
            </Property>
            <Property>
               <Name>ReceiverWidth</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.ReceiverWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.ReceiverWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the width of the receiver (decoded) data word in I2S anywhere from 4 bits to 32 bits</Description>
            </Property>
            <Property>
               <Name>TransmittedWidth</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.TransmittedWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.TransmittedWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the width of the transmitted data word in I2S anywhere from 4 bits to 32 bits.</Description>
            </Property>
            <Property>
               <Name>TransmittedWidth</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.TransmittedWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.TransmittedWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the width of the transmitted data word in I2S anywhere from 4 bits to 32 bits.</Description>
            </Property>
            <Property>
               <Name>TriggerAudioChannel</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.TriggerAudioChannel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.TriggerAudioChannel = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerAudioChannelLeft" Value="AgInfiniiVisionSerialBusI2STriggerAudioChannelLeft"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerAudioChannelRight" Value="AgInfiniiVisionSerialBusI2STriggerAudioChannelRight"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerAudioChannelEither" Value="AgInfiniiVisionSerialBusI2STriggerAudioChannelEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the audio channel to trigger on.</Description>
            </Property>
            <Property>
               <Name>TriggerAudioChannel</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.TriggerAudioChannel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.TriggerAudioChannel = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerAudioChannelLeft" Value="AgInfiniiVisionSerialBusI2STriggerAudioChannelLeft"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerAudioChannelRight" Value="AgInfiniiVisionSerialBusI2STriggerAudioChannelRight"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerAudioChannelEither" Value="AgInfiniiVisionSerialBusI2STriggerAudioChannelEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the audio channel to trigger on.</Description>
            </Property>
            <Property>
               <Name>TriggerCondition</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.TriggerCondition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.TriggerCondition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionEqual" Value="AgInfiniiVisionSerialBusI2STriggerConditionEqual"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionNotEqual" Value="AgInfiniiVisionSerialBusI2STriggerConditionNotEqual"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionLessThan" Value="AgInfiniiVisionSerialBusI2STriggerConditionLessThan"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionGreaterThan" Value="AgInfiniiVisionSerialBusI2STriggerConditionGreaterThan"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionInRange" Value="AgInfiniiVisionSerialBusI2STriggerConditionInRange"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionOutRange" Value="AgInfiniiVisionSerialBusI2STriggerConditionOutRange"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionIncreasing" Value="AgInfiniiVisionSerialBusI2STriggerConditionIncreasing"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionDecreasing" Value="AgInfiniiVisionSerialBusI2STriggerConditionDecreasing"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specified the I2S trigger operator.</Description>
            </Property>
            <Property>
               <Name>TriggerCondition</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.TriggerCondition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.TriggerCondition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionEqual" Value="AgInfiniiVisionSerialBusI2STriggerConditionEqual"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionNotEqual" Value="AgInfiniiVisionSerialBusI2STriggerConditionNotEqual"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionLessThan" Value="AgInfiniiVisionSerialBusI2STriggerConditionLessThan"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionGreaterThan" Value="AgInfiniiVisionSerialBusI2STriggerConditionGreaterThan"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionInRange" Value="AgInfiniiVisionSerialBusI2STriggerConditionInRange"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionOutRange" Value="AgInfiniiVisionSerialBusI2STriggerConditionOutRange"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionIncreasing" Value="AgInfiniiVisionSerialBusI2STriggerConditionIncreasing"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2STriggerConditionDecreasing" Value="AgInfiniiVisionSerialBusI2STriggerConditionDecreasing"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specified the I2S trigger operator.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.TriggerPatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.TriggerPatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the I2S trigger data pattern searched for in each I2S message.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.TriggerPatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.TriggerPatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the I2S trigger data pattern searched for in each I2S message.</Description>
            </Property>
            <Property>
               <Name>WordSelectPolarity</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.WordSelectPolarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.WordSelectPolarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusI2SWordSelectPolarityLeft" Value="AgInfiniiVisionSerialBusI2SWordSelectPolarityLeft"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2SWordSelectPolarityRight" Value="AgInfiniiVisionSerialBusI2SWordSelectPolarityRight"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the polarity of the word select (WS) signal.</Description>
            </Property>
            <Property>
               <Name>WordSelectPolarity</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.WordSelectPolarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.WordSelectPolarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusI2SWordSelectPolarityLeft" Value="AgInfiniiVisionSerialBusI2SWordSelectPolarityLeft"/>
                     <Enum Name="AgInfiniiVisionSerialBusI2SWordSelectPolarityRight" Value="AgInfiniiVisionSerialBusI2SWordSelectPolarityRight"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the polarity of the word select (WS) signal.</Description>
            </Property>
            <Property>
               <Name>WordSelectSource</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.WordSelectSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.WordSelectSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which signal is used as the word select (WS) source by the serial decoder and/or trigger when in I2S mode.</Description>
            </Property>
            <Property>
               <Name>WordSelectSource</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	propertyValue = comobj.WordSelectSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.I2S;
	comobj.WordSelectSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which signal is used as the word select (WS) source by the serial decoder and/or trigger when in I2S mode.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>GetTriggerRange</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [LowerLimit, UpperLimit] = GetTriggerRange(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.I2S;
feature('COM_SafeArraySingleDim',1);
[LowerLimit, UpperLimit] = comobj.GetTriggerRange(0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Gets the currently set lower and upper range boundaries used by the InRange, OutRange, Increasing, and Decreasing trigger conditions.</Description>
            </Method>
            <Method>
               <Name>GetTriggerRange</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [LowerLimit, UpperLimit] = GetTriggerRange(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.I2S;
feature('COM_SafeArraySingleDim',1);
[LowerLimit, UpperLimit] = comobj.GetTriggerRange(0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Gets the currently set lower and upper range boundaries used by the InRange, OutRange, Increasing, and Decreasing trigger conditions.</Description>
            </Method>
            <Method>
               <Name>SetTriggerRange</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetTriggerRange(obj, LowerLimit, UpperLimit)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.I2S;
feature('COM_SafeArraySingleDim',1);
comobj.SetTriggerRange(LowerLimit, UpperLimit);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the lower and upper range boundaries used by the InRange, OutRange, Increasing, and Decreasing trigger conditions.</Description>
            </Method>
            <Method>
               <Name>SetTriggerRange</Name>
               <Location>SerialBuseI2S</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetTriggerRange(obj, LowerLimit, UpperLimit)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.I2S;
feature('COM_SafeArraySingleDim',1);
comobj.SetTriggerRange(LowerLimit, UpperLimit);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the lower and upper range boundaries used by the InRange, OutRange, Increasing, and Decreasing trigger conditions.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SerialBuseIIC</Name>
         <Description>IAgInfiniiVision2SerialBusIIC interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuseIIC1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AddressWidth</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.AddressWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.AddressWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusIICAddressWidthBit7" Value="AgInfiniiVisionSerialBusIICAddressWidthBit7"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICAddressWidthBit8" Value="AgInfiniiVisionSerialBusIICAddressWidthBit8"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the Read/Write bit is included as the LSB in the display of the IIC address field of the decode bus.</Description>
            </Property>
            <Property>
               <Name>AddressWidth</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.AddressWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.AddressWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusIICAddressWidthBit7" Value="AgInfiniiVisionSerialBusIICAddressWidthBit7"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICAddressWidthBit8" Value="AgInfiniiVisionSerialBusIICAddressWidthBit8"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the Read/Write bit is included as the LSB in the display of the IIC address field of the decode bus.</Description>
            </Property>
            <Property>
               <Name>ClockSource</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for the IIC serial clock (SCL).</Description>
            </Property>
            <Property>
               <Name>ClockSource</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for the IIC serial clock (SCL).</Description>
            </Property>
            <Property>
               <Name>DataSource</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.DataSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.DataSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for IIC serial data (SDA).</Description>
            </Property>
            <Property>
               <Name>DataSource</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.DataSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.DataSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for IIC serial data (SDA).</Description>
            </Property>
            <Property>
               <Name>TriggerCondition</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.TriggerCondition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.TriggerCondition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerConditionEqual" Value="AgInfiniiVisionSerialBusIICTriggerConditionEqual"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerConditionNotEqual" Value="AgInfiniiVisionSerialBusIICTriggerConditionNotEqual"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerConditionLessThan" Value="AgInfiniiVisionSerialBusIICTriggerConditionLessThan"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerConditionGreaterThan" Value="AgInfiniiVisionSerialBusIICTriggerConditionGreaterThan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the IIC data qualifier when the TriggerType property is set to AgInfiniiVisionSerialBusIICTriggerTypeReadEprom</Description>
            </Property>
            <Property>
               <Name>TriggerCondition</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.TriggerCondition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.TriggerCondition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerConditionEqual" Value="AgInfiniiVisionSerialBusIICTriggerConditionEqual"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerConditionNotEqual" Value="AgInfiniiVisionSerialBusIICTriggerConditionNotEqual"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerConditionLessThan" Value="AgInfiniiVisionSerialBusIICTriggerConditionLessThan"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerConditionGreaterThan" Value="AgInfiniiVisionSerialBusIICTriggerConditionGreaterThan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the IIC data qualifier when the TriggerType property is set to AgInfiniiVisionSerialBusIICTriggerTypeReadEprom</Description>
            </Property>
            <Property>
               <Name>TriggerPatternAddress</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.TriggerPatternAddress;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.TriggerPatternAddress = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the address for IIC data. The address can range from 0x00 to 0x7F (7-bit) or 0x3FF (10-bit) hexadecimal. Use the don't care address (-1 or 0xFFFFFFFF) to ignore the address value.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternAddress</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.TriggerPatternAddress;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.TriggerPatternAddress = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the address for IIC data. The address can range from 0x00 to 0x7F (7-bit) or 0x3FF (10-bit) hexadecimal. Use the don't care address (-1 or 0xFFFFFFFF) to ignore the address value.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.TriggerPatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.TriggerPatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the IIC data. The data value can range from 0x00 to 0x0FF (hexadecimal). Use the don't care data pattern (-1 or 0xFFFFFFFF) to ignore the data value.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.TriggerPatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.TriggerPatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the IIC data. The data value can range from 0x00 to 0x0FF (hexadecimal). Use the don't care data pattern (-1 or 0xFFFFFFFF) to ignore the data value.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData2</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.TriggerPatternData2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.TriggerPatternData2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the IIC data 2. The data value can range from 0x00 to 0x0FF (hexadecimal). Use the don't care data pattern (-1 or 0xFFFFFFFF) to ignore the data value.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData2</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.TriggerPatternData2;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.TriggerPatternData2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the IIC data 2. The data value can range from 0x00 to 0x0FF (hexadecimal). Use the don't care data pattern (-1 or 0xFFFFFFFF) to ignore the data value.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.TriggerType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.TriggerType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeStart" Value="AgInfiniiVisionSerialBusIICTriggerTypeStart"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeStop" Value="AgInfiniiVisionSerialBusIICTriggerTypeStop"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeRead7" Value="AgInfiniiVisionSerialBusIICTriggerTypeRead7"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeR7Data2" Value="AgInfiniiVisionSerialBusIICTriggerTypeR7Data2"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeReadEprom" Value="AgInfiniiVisionSerialBusIICTriggerTypeReadEprom"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeWrite7" Value="AgInfiniiVisionSerialBusIICTriggerTypeWrite7"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeW7Data2" Value="AgInfiniiVisionSerialBusIICTriggerTypeW7Data2"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeWrite10" Value="AgInfiniiVisionSerialBusIICTriggerTypeWrite10"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeMissingAcknowledge" Value="AgInfiniiVisionSerialBusIICTriggerTypeMissingAcknowledge"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeNoAcknowledge" Value="AgInfiniiVisionSerialBusIICTriggerTypeNoAcknowledge"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeRestart" Value="AgInfiniiVisionSerialBusIICTriggerTypeRestart"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the IIC trigger type.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>SerialBuseIIC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	propertyValue = comobj.TriggerType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.IIC;
	comobj.TriggerType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeStart" Value="AgInfiniiVisionSerialBusIICTriggerTypeStart"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeStop" Value="AgInfiniiVisionSerialBusIICTriggerTypeStop"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeRead7" Value="AgInfiniiVisionSerialBusIICTriggerTypeRead7"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeR7Data2" Value="AgInfiniiVisionSerialBusIICTriggerTypeR7Data2"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeReadEprom" Value="AgInfiniiVisionSerialBusIICTriggerTypeReadEprom"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeWrite7" Value="AgInfiniiVisionSerialBusIICTriggerTypeWrite7"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeW7Data2" Value="AgInfiniiVisionSerialBusIICTriggerTypeW7Data2"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeWrite10" Value="AgInfiniiVisionSerialBusIICTriggerTypeWrite10"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeMissingAcknowledge" Value="AgInfiniiVisionSerialBusIICTriggerTypeMissingAcknowledge"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeNoAcknowledge" Value="AgInfiniiVisionSerialBusIICTriggerTypeNoAcknowledge"/>
                     <Enum Name="AgInfiniiVisionSerialBusIICTriggerTypeRestart" Value="AgInfiniiVisionSerialBusIICTriggerTypeRestart"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the IIC trigger type.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>SerialBuseLIN</Name>
         <Description>IAgInfiniiVision2SerialBusLIN interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuseLIN1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BaudRate</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.BaudRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.BaudRate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the standard baud rate of the LIN signal from 2400 b/s to 625 kb/s in 100 b/s increments. If you enter a baud rate that is not divisible by 100 b/s, the baud rate is set to the nearest baud rate divisible by 100 b/s</Description>
            </Property>
            <Property>
               <Name>BaudRate</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.BaudRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.BaudRate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the standard baud rate of the LIN signal from 2400 b/s to 625 kb/s in 100 b/s increments. If you enter a baud rate that is not divisible by 100 b/s, the baud rate is set to the nearest baud rate divisible by 100 b/s</Description>
            </Property>
            <Property>
               <Name>ParityEnabled</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.ParityEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.ParityEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the parity bits are included as the most significant bits (MSB) in the display of the Frame Id field in the LIN decode bus.</Description>
            </Property>
            <Property>
               <Name>ParityEnabled</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.ParityEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.ParityEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the parity bits are included as the most significant bits (MSB) in the display of the Frame Id field in the LIN decode bus.</Description>
            </Property>
            <Property>
               <Name>SamplePoint</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.SamplePoint;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.SamplePoint = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the point during the bit time where the bit level is sampled to determine whether the bit is dominant or recessive. The sample point represents the percentage of time between the beginning of the bit time to the end of the bit time.</Description>
            </Property>
            <Property>
               <Name>SamplePoint</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.SamplePoint;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.SamplePoint = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the point during the bit time where the bit level is sampled to determine whether the bit is dominant or recessive. The sample point represents the percentage of time between the beginning of the bit time to the end of the bit time.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for the CAN signal.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for the CAN signal.</Description>
            </Property>
            <Property>
               <Name>Standard</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.Standard;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.Standard = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusLINStandardLIN13" Value="AgInfiniiVisionSerialBusLINStandardLIN13"/>
                     <Enum Name="AgInfiniiVisionSerialBusLINStandardLIN20" Value="AgInfiniiVisionSerialBusLINStandardLIN20"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the LIN standard in effect for triggering and decoding to be LIN1.3 or LIN2.0.</Description>
            </Property>
            <Property>
               <Name>Standard</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.Standard;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.Standard = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusLINStandardLIN13" Value="AgInfiniiVisionSerialBusLINStandardLIN13"/>
                     <Enum Name="AgInfiniiVisionSerialBusLINStandardLIN20" Value="AgInfiniiVisionSerialBusLINStandardLIN20"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the LIN standard in effect for triggering and decoding to be LIN1.3 or LIN2.0.</Description>
            </Property>
            <Property>
               <Name>SyncBreakLength</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.SyncBreakLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.SyncBreakLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the length of the LIN sync break to be greater than or equal to 11, 12, or 13 clock lengths. The sync break is the idle period in the bus activity at the beginning of each packet that distinguishes one information packet from the previous one.</Description>
            </Property>
            <Property>
               <Name>SyncBreakLength</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.SyncBreakLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.SyncBreakLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the length of the LIN sync break to be greater than or equal to 11, 12, or 13 clock lengths. The sync break is the idle period in the bus activity at the beginning of each packet that distinguishes one information packet from the previous one.</Description>
            </Property>
            <Property>
               <Name>TriggerCondition</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.TriggerCondition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.TriggerCondition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusLINTriggerConditionSyncBreak" Value="AgInfiniiVisionSerialBusLINTriggerConditionSyncBreak"/>
                     <Enum Name="AgInfiniiVisionSerialBusLINTriggerConditionID" Value="AgInfiniiVisionSerialBusLINTriggerConditionID"/>
                     <Enum Name="AgInfiniiVisionSerialBusLINTriggerConditionData" Value="AgInfiniiVisionSerialBusLINTriggerConditionData"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the LIN trigger condition.</Description>
            </Property>
            <Property>
               <Name>TriggerCondition</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.TriggerCondition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.TriggerCondition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusLINTriggerConditionSyncBreak" Value="AgInfiniiVisionSerialBusLINTriggerConditionSyncBreak"/>
                     <Enum Name="AgInfiniiVisionSerialBusLINTriggerConditionID" Value="AgInfiniiVisionSerialBusLINTriggerConditionID"/>
                     <Enum Name="AgInfiniiVisionSerialBusLINTriggerConditionData" Value="AgInfiniiVisionSerialBusLINTriggerConditionData"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the LIN trigger condition.</Description>
            </Property>
            <Property>
               <Name>TriggerID</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.TriggerID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.TriggerID = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the LIN identifier searched for in each CAN message when the LIN trigger mode is set to frame ID.</Description>
            </Property>
            <Property>
               <Name>TriggerID</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.TriggerID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.TriggerID = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the LIN identifier searched for in each CAN message when the LIN trigger mode is set to frame ID.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.TriggerPatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.TriggerPatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the LIN trigger data pattern searched for in each LIN data field.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.TriggerPatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.TriggerPatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the LIN trigger data pattern searched for in each LIN data field.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternDataLength</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.TriggerPatternDataLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.TriggerPatternDataLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>the number of 8-bit bytes in the LIN data string. The number of bytes in the string can be anywhere from 1 bytes to 8 bytes (64 bits). The value for these bytes is set by the TriggerPatternData property.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternDataLength</Name>
               <Location>SerialBuseLIN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	propertyValue = comobj.TriggerPatternDataLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.LIN;
	comobj.TriggerPatternDataLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>the number of 8-bit bytes in the LIN data string. The number of bytes in the string can be anywhere from 1 bytes to 8 bytes (64 bits). The value for these bytes is set by the TriggerPatternData property.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>SerialBuseM1553</Name>
         <Description>IAgInfiniiVision2SerialBusM1553 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuseM15531" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Base</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.Base;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.Base = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusM1553BaseBinary" Value="AgInfiniiVisionSerialBusM1553BaseBinary"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553BaseHexadecimal" Value="AgInfiniiVisionSerialBusM1553BaseHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the base to use for the MIL-STD 1553 decode display.</Description>
            </Property>
            <Property>
               <Name>Base</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.Base;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.Base = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusM1553BaseBinary" Value="AgInfiniiVisionSerialBusM1553BaseBinary"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553BaseHexadecimal" Value="AgInfiniiVisionSerialBusM1553BaseHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the base to use for the MIL-STD 1553 decode display.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which signal is used as the source for the selected bus.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which signal is used as the source for the selected bus.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.TriggerPatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.TriggerPatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the 11 bits to trigger on if the trigger type has been set to RTA11 (RTA + 11 Bits) using the TriggerType property.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternData</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.TriggerPatternData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.TriggerPatternData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the 11 bits to trigger on if the trigger type has been set to RTA11 (RTA + 11 Bits) using the TriggerType property.</Description>
            </Property>
            <Property>
               <Name>TriggerRTA</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.TriggerRTA;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.TriggerRTA = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Remote Terminal Address (RTA) to trigger on if the trigger type has been set to RTA using the TriggerType property.</Description>
            </Property>
            <Property>
               <Name>TriggerRTA</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.TriggerRTA;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.TriggerRTA = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Remote Terminal Address (RTA) to trigger on if the trigger type has been set to RTA using the TriggerType property.</Description>
            </Property>
            <Property>
               <Name>TriggerThresholdHigh</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.TriggerThresholdHigh;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.TriggerThresholdHigh = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high threshold the oscilloscope uses for the M1553 serial bus mode.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>TriggerThresholdHigh</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.TriggerThresholdHigh;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.TriggerThresholdHigh = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high threshold the oscilloscope uses for the M1553 serial bus mode.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>TriggerThresholdLow</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.TriggerThresholdLow;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.TriggerThresholdLow = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The low threshold the oscilloscope uses for the M1553 serial bus mode.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>TriggerThresholdLow</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.TriggerThresholdLow;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.TriggerThresholdLow = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The low threshold the oscilloscope uses for the M1553 serial bus mode.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.TriggerType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.TriggerType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeDataStart" Value="AgInfiniiVisionSerialBusM1553TriggerTypeDataStart"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeDataStop" Value="AgInfiniiVisionSerialBusM1553TriggerTypeDataStop"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeCommandStart" Value="AgInfiniiVisionSerialBusM1553TriggerTypeCommandStart"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeCommandStop" Value="AgInfiniiVisionSerialBusM1553TriggerTypeCommandStop"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeRTA" Value="AgInfiniiVisionSerialBusM1553TriggerTypeRTA"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeRTA11" Value="AgInfiniiVisionSerialBusM1553TriggerTypeRTA11"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeParityError" Value="AgInfiniiVisionSerialBusM1553TriggerTypeParityError"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeManchesterError" Value="AgInfiniiVisionSerialBusM1553TriggerTypeManchesterError"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeSyncError" Value="AgInfiniiVisionSerialBusM1553TriggerTypeSyncError"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of MIL-STD 1553 trigger to be used.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	propertyValue = comobj.TriggerType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.M1553;
	comobj.TriggerType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeDataStart" Value="AgInfiniiVisionSerialBusM1553TriggerTypeDataStart"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeDataStop" Value="AgInfiniiVisionSerialBusM1553TriggerTypeDataStop"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeCommandStart" Value="AgInfiniiVisionSerialBusM1553TriggerTypeCommandStart"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeCommandStop" Value="AgInfiniiVisionSerialBusM1553TriggerTypeCommandStop"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeRTA" Value="AgInfiniiVisionSerialBusM1553TriggerTypeRTA"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeRTA11" Value="AgInfiniiVisionSerialBusM1553TriggerTypeRTA11"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeParityError" Value="AgInfiniiVisionSerialBusM1553TriggerTypeParityError"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeManchesterError" Value="AgInfiniiVisionSerialBusM1553TriggerTypeManchesterError"/>
                     <Enum Name="AgInfiniiVisionSerialBusM1553TriggerTypeSyncError" Value="AgInfiniiVisionSerialBusM1553TriggerTypeSyncError"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of MIL-STD 1553 trigger to be used.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>AutoSetup</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.M1553;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method copies the position and volts/div from the upper threshold channel to the lower threshold channel, sets the upper/lower trigger levels to +/-500 mV.</Description>
            </Method>
            <Method>
               <Name>AutoSetup</Name>
               <Location>SerialBuseM1553</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.M1553;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method copies the position and volts/div from the upper threshold channel to the lower threshold channel, sets the upper/lower trigger levels to +/-500 mV.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SerialBuses</Name>
         <Description>IAgInfiniiVision2SerialBuses interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuses1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>SerialBuses</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the number of serial buses.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>SerialBuses</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionSerialBus interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>SerialBuses</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Read Only - Returns the serial bus name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SerialBuses2</Name>
         <Description>IAgInfiniiVisionSerialBuses2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuses21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>SerialBuses2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses2;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the number of serial buses.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>SerialBuses2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses2;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the number of serial buses.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>SerialBuses2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionSerialBus interface.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>SerialBuses2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionSerialBus interface.</Description>
            </Method>
            <Method>
               <Name>Item2</Name>
               <Location>SerialBuses2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item2(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item2(Name, varargin{:});
end
[Val] = comobj.Item2(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionSerialBus interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>SerialBuses2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Read Only - Returns the serial bus name for a given index.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>SerialBuses2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Read Only - Returns the serial bus name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SerialBuses2Lister</Name>
         <Description>IAgInfiniiVision2SerialBusesLister interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuses2Lister1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Display</Name>
               <Location>SerialBuses2Lister</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses2;
	comobj = comobj.Lister;
	propertyValue = comobj.Display;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses2;
	comobj = comobj.Lister;
	comobj.Display = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusListerDisplayOff" Value="AgInfiniiVisionSerialBusListerDisplayOff"/>
                     <Enum Name="AgInfiniiVisionSerialBusListerDisplaySerialBus1" Value="AgInfiniiVisionSerialBusListerDisplaySerialBus1"/>
                     <Enum Name="AgInfiniiVisionSerialBusListerDisplaySerialBus2" Value="AgInfiniiVisionSerialBusListerDisplaySerialBus2"/>
                     <Enum Name="AgInfiniiVisionSerialBusListerDisplayAll" Value="AgInfiniiVisionSerialBusListerDisplayAll"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The Lister Display setting. Configures which of the serial buses to display in the lister, or whether the lister is off.</Description>
            </Property>
            <Property>
               <Name>TimeReference</Name>
               <Location>SerialBuses2Lister</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses2;
	comobj = comobj.Lister;
	propertyValue = comobj.TimeReference;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses2;
	comobj = comobj.Lister;
	comobj.TimeReference = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusListerTimeReferenceTrigger" Value="AgInfiniiVisionSerialBusListerTimeReferenceTrigger"/>
                     <Enum Name="AgInfiniiVisionSerialBusListerTimeReferencePrevious" Value="AgInfiniiVisionSerialBusListerTimeReferencePrevious"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects whether the time value for a Lister row is relative to the trigger or the previous Lister row.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>GetData</Name>
               <Location>SerialBuses2Lister</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data] = GetData(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses2;
comobj = comobj.Lister;
feature('COM_SafeArraySingleDim',1);
[Data] = comobj.GetData('');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Gets the lister data as a string.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SerialBuses3</Name>
         <Description>IAgInfiniiVisionSerialBuses3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuses31" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>SerialBuses3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses3;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the number of serial buses.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>SerialBuses3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses3;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the number of serial buses.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>SerialBuses3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionSerialBus interface.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>SerialBuses3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionSerialBus interface.</Description>
            </Method>
            <Method>
               <Name>Item2</Name>
               <Location>SerialBuses3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item2(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item2(Name, varargin{:});
end
[Val] = comobj.Item2(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionSerialBus interface.</Description>
            </Method>
            <Method>
               <Name>Item2</Name>
               <Location>SerialBuses3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item2(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item2(Name, varargin{:});
end
[Val] = comobj.Item2(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionSerialBus interface.</Description>
            </Method>
            <Method>
               <Name>Item3</Name>
               <Location>SerialBuses3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item3(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item3(Name, varargin{:});
end
[Val] = comobj.Item3(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionSerialBus interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>SerialBuses3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Read Only - Returns the serial bus name for a given index.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>SerialBuses3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Read Only - Returns the serial bus name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SerialBuseSPI</Name>
         <Description>IAgInfiniiVision2SerialBusSPI interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuseSPI1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BitOrder</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.BitOrder;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.BitOrder = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusSPIBitOrderLSBFirst" Value="AgInfiniiVisionSerialBusSPIBitOrderLSBFirst"/>
                     <Enum Name="AgInfiniiVisionSerialBusSPIBitOrderMSBFirst" Value="AgInfiniiVisionSerialBusSPIBitOrderMSBFirst"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the bit order, most significant bit first (MSB) or least significant bit first (LSB), used when displaying data in the serial decode waveform and in the Lister.</Description>
            </Property>
            <Property>
               <Name>BitOrder</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.BitOrder;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.BitOrder = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusSPIBitOrderLSBFirst" Value="AgInfiniiVisionSerialBusSPIBitOrderLSBFirst"/>
                     <Enum Name="AgInfiniiVisionSerialBusSPIBitOrderMSBFirst" Value="AgInfiniiVisionSerialBusSPIBitOrderMSBFirst"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the bit order, most significant bit first (MSB) or least significant bit first (LSB), used when displaying data in the serial decode waveform and in the Lister.</Description>
            </Property>
            <Property>
               <Name>ClockSlope</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.ClockSlope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.ClockSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusSPIClockSlopeNegative" Value="AgInfiniiVisionSerialBusSPIClockSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionSerialBusSPIClockSlopePositive" Value="AgInfiniiVisionSerialBusSPIClockSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the rising edge (Positive) or falling edge (Negative) of the SPI clock source that will clock in the data.</Description>
            </Property>
            <Property>
               <Name>ClockSlope</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.ClockSlope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.ClockSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusSPIClockSlopeNegative" Value="AgInfiniiVisionSerialBusSPIClockSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionSerialBusSPIClockSlopePositive" Value="AgInfiniiVisionSerialBusSPIClockSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the rising edge (Positive) or falling edge (Negative) of the SPI clock source that will clock in the data.</Description>
            </Property>
            <Property>
               <Name>ClockSource</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for the SPI serial clock.</Description>
            </Property>
            <Property>
               <Name>ClockSource</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for the SPI serial clock.</Description>
            </Property>
            <Property>
               <Name>ClockTimeout</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.ClockTimeout;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.ClockTimeout = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the SPI signal clock timeout resource in seconds from 100 ns to 10 s when the Framing property is set to AgInfiniiVisionSerialBusSPIFramingTimeout. The timer is used to frame a signal by a clock timeout.</Description>
            </Property>
            <Property>
               <Name>ClockTimeout</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.ClockTimeout;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.ClockTimeout = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the SPI signal clock timeout resource in seconds from 100 ns to 10 s when the Framing property is set to AgInfiniiVisionSerialBusSPIFramingTimeout. The timer is used to frame a signal by a clock timeout.</Description>
            </Property>
            <Property>
               <Name>FrameSource</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.FrameSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.FrameSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the frame source when Framing property is set to AgInfiniiVisionSerialBusSPIFramingChipSelect or  AgInfiniiVisionSerialBusSPIFramingNChipSelect.</Description>
            </Property>
            <Property>
               <Name>FrameSource</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.FrameSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.FrameSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the frame source when Framing property is set to AgInfiniiVisionSerialBusSPIFramingChipSelect or  AgInfiniiVisionSerialBusSPIFramingNChipSelect.</Description>
            </Property>
            <Property>
               <Name>Framing</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.Framing;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.Framing = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusSPIFramingChipSelect" Value="AgInfiniiVisionSerialBusSPIFramingChipSelect"/>
                     <Enum Name="AgInfiniiVisionSerialBusSPIFramingNChipSelect" Value="AgInfiniiVisionSerialBusSPIFramingNChipSelect"/>
                     <Enum Name="AgInfiniiVisionSerialBusSPIFramingTimeout" Value="AgInfiniiVisionSerialBusSPIFramingTimeout"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the SPI trigger framing value. If AgInfiniiVisionSerialBusSPIFramingTimeout is selected, the timeout value is set by the ClockTimeout property.</Description>
            </Property>
            <Property>
               <Name>Framing</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.Framing;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.Framing = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusSPIFramingChipSelect" Value="AgInfiniiVisionSerialBusSPIFramingChipSelect"/>
                     <Enum Name="AgInfiniiVisionSerialBusSPIFramingNChipSelect" Value="AgInfiniiVisionSerialBusSPIFramingNChipSelect"/>
                     <Enum Name="AgInfiniiVisionSerialBusSPIFramingTimeout" Value="AgInfiniiVisionSerialBusSPIFramingTimeout"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the SPI trigger framing value. If AgInfiniiVisionSerialBusSPIFramingTimeout is selected, the timeout value is set by the ClockTimeout property.</Description>
            </Property>
            <Property>
               <Name>MISOSource</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.MISOSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.MISOSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for the SPI serial MISO data.</Description>
            </Property>
            <Property>
               <Name>MISOSource</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.MISOSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.MISOSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for the SPI serial MISO data.</Description>
            </Property>
            <Property>
               <Name>MOSISource</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.MOSISource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.MOSISource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for the SPI serial MOSI data.</Description>
            </Property>
            <Property>
               <Name>MOSISource</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.MOSISource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.MOSISource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source for the SPI serial MOSI data.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternMISOData</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.TriggerPatternMISOData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.TriggerPatternMISOData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the SPI data pattern resource according to the string parameter. This pattern, along with the data width, control the data pattern searched for in the data stream.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternMISOData</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.TriggerPatternMISOData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.TriggerPatternMISOData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the SPI data pattern resource according to the string parameter. This pattern, along with the data width, control the data pattern searched for in the data stream.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternMISOWidth</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.TriggerPatternMISOWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.TriggerPatternMISOWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the width of the SPI data pattern anywhere from 4 bits to 64 bits.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternMISOWidth</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.TriggerPatternMISOWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.TriggerPatternMISOWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the width of the SPI data pattern anywhere from 4 bits to 64 bits.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternMOSIData</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.TriggerPatternMOSIData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.TriggerPatternMOSIData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the SPI data pattern resource according to the string parameter. This pattern, along with the data width, control the data pattern searched for in the data stream.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternMOSIData</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.TriggerPatternMOSIData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.TriggerPatternMOSIData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the SPI data pattern resource according to the string parameter. This pattern, along with the data width, control the data pattern searched for in the data stream.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternMOSIWidth</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.TriggerPatternMOSIWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.TriggerPatternMOSIWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the width of the SPI data pattern anywhere from 4 bits to 64 bits.</Description>
            </Property>
            <Property>
               <Name>TriggerPatternMOSIWidth</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.TriggerPatternMOSIWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.TriggerPatternMOSIWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the width of the SPI data pattern anywhere from 4 bits to 64 bits.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.TriggerType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.TriggerType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusSPITriggerTypeMOSI" Value="AgInfiniiVisionSerialBusSPITriggerTypeMOSI"/>
                     <Enum Name="AgInfiniiVisionSerialBusSPITriggerTypeMISO" Value="AgInfiniiVisionSerialBusSPITriggerTypeMISO"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the SPI trigger will be on the MOSI data or the MISO data.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.TriggerType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.TriggerType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusSPITriggerTypeMOSI" Value="AgInfiniiVisionSerialBusSPITriggerTypeMOSI"/>
                     <Enum Name="AgInfiniiVisionSerialBusSPITriggerTypeMISO" Value="AgInfiniiVisionSerialBusSPITriggerTypeMISO"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the SPI trigger will be on the MOSI data or the MISO data.</Description>
            </Property>
            <Property>
               <Name>Width</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.Width;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.Width = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the number of bits in a word of data for SPI.</Description>
            </Property>
            <Property>
               <Name>Width</Name>
               <Location>SerialBuseSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	propertyValue = comobj.Width;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.SPI;
	comobj.Width = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the number of bits in a word of data for SPI.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>SerialBuseUART</Name>
         <Description>IAgInfiniiVision2SerialBusUART interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SerialBuseUART1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Base</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.Base;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.Base = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTBaseASCII" Value="AgInfiniiVisionSerialBusUARTBaseASCII"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTBaseBinary" Value="AgInfiniiVisionSerialBusUARTBaseBinary"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTBaseHexadecimal" Value="AgInfiniiVisionSerialBusUARTBaseHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the base to use for the UART decode and Lister display.</Description>
            </Property>
            <Property>
               <Name>Base</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.Base;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.Base = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTBaseASCII" Value="AgInfiniiVisionSerialBusUARTBaseASCII"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTBaseBinary" Value="AgInfiniiVisionSerialBusUARTBaseBinary"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTBaseHexadecimal" Value="AgInfiniiVisionSerialBusUARTBaseHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the base to use for the UART decode and Lister display.</Description>
            </Property>
            <Property>
               <Name>BaudRate</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.BaudRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.BaudRate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the bit rate (in bps) for the serial decoder and/or trigger when in UART mode. The baud rate can be set from 1200 b/s to 8 Mb/s in 100 b/s increments.</Description>
            </Property>
            <Property>
               <Name>BaudRate</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.BaudRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.BaudRate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the bit rate (in bps) for the serial decoder and/or trigger when in UART mode. The baud rate can be set from 1200 b/s to 8 Mb/s in 100 b/s increments.</Description>
            </Property>
            <Property>
               <Name>BitOrder</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.BitOrder;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.BitOrder = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTBitOrderLSBFirst" Value="AgInfiniiVisionSerialBusUARTBitOrderLSBFirst"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTBitOrderMSBFirst" Value="AgInfiniiVisionSerialBusUARTBitOrderMSBFirst"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the order of transmission used by the physical Tx and Rx input signals for the serial decoder and/or trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>BitOrder</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.BitOrder;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.BitOrder = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTBitOrderLSBFirst" Value="AgInfiniiVisionSerialBusUARTBitOrderLSBFirst"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTBitOrderMSBFirst" Value="AgInfiniiVisionSerialBusUARTBitOrderMSBFirst"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the order of transmission used by the physical Tx and Rx input signals for the serial decoder and/or trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>ErrorCount</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.ErrorCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the UART error frame count.</Description>
            </Property>
            <Property>
               <Name>ErrorCount</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.ErrorCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the UART error frame count.</Description>
            </Property>
            <Property>
               <Name>Framing</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.Framing;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.Framing = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the byte value to use for framing (end of packet) or to turn off framing for UART decode.</Description>
            </Property>
            <Property>
               <Name>Framing</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.Framing;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.Framing = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the byte value to use for framing (end of packet) or to turn off framing for UART decode.</Description>
            </Property>
            <Property>
               <Name>Parity</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.Parity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.Parity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTParityEven" Value="AgInfiniiVisionSerialBusUARTParityEven"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTParityOdd" Value="AgInfiniiVisionSerialBusUARTParityOdd"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTParityNone" Value="AgInfiniiVisionSerialBusUARTParityNone"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the parity to be used with each message "byte" for the serial decoder and/or trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>Parity</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.Parity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.Parity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTParityEven" Value="AgInfiniiVisionSerialBusUARTParityEven"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTParityOdd" Value="AgInfiniiVisionSerialBusUARTParityOdd"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTParityNone" Value="AgInfiniiVisionSerialBusUARTParityNone"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the parity to be used with each message "byte" for the serial decoder and/or trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTPolarityHigh" Value="AgInfiniiVisionSerialBusUARTPolarityHigh"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTPolarityLow" Value="AgInfiniiVisionSerialBusUARTPolarityLow"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the polarity as idle low or idle high for the serial decoder and/or trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTPolarityHigh" Value="AgInfiniiVisionSerialBusUARTPolarityHigh"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTPolarityLow" Value="AgInfiniiVisionSerialBusUARTPolarityLow"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the polarity as idle low or idle high for the serial decoder and/or trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>RxFrameCount</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.RxFrameCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the UART Rx frame count.</Description>
            </Property>
            <Property>
               <Name>RxFrameCount</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.RxFrameCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the UART Rx frame count.</Description>
            </Property>
            <Property>
               <Name>RxSource</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.RxSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.RxSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which signal is used as the Rx source by the serial decoder and/or trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>RxSource</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.RxSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.RxSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which signal is used as the Rx source by the serial decoder and/or trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>TriggerBase</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TriggerBase;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TriggerBase = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerBaseASCII" Value="AgInfiniiVisionSerialBusUARTTriggerBaseASCII"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerBaseHexadecimal" Value="AgInfiniiVisionSerialBusUARTTriggerBaseHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the front panel UART/RS232 trigger setup data selection.</Description>
            </Property>
            <Property>
               <Name>TriggerBase</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TriggerBase;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TriggerBase = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerBaseASCII" Value="AgInfiniiVisionSerialBusUARTTriggerBaseASCII"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerBaseHexadecimal" Value="AgInfiniiVisionSerialBusUARTTriggerBaseHexadecimal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the front panel UART/RS232 trigger setup data selection.</Description>
            </Property>
            <Property>
               <Name>TriggerBurst</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TriggerBurst;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TriggerBurst = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the burst value (Nth frame after idle period) in the range 1 to 4096 or OFF, for the trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>TriggerBurst</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TriggerBurst;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TriggerBurst = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the burst value (Nth frame after idle period) in the range 1 to 4096 or OFF, for the trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>TriggerCondition</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TriggerCondition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TriggerCondition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerConditionEqual" Value="AgInfiniiVisionSerialBusUARTTriggerConditionEqual"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerConditionNotEqual" Value="AgInfiniiVisionSerialBusUARTTriggerConditionNotEqual"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerConditionGreaterThan" Value="AgInfiniiVisionSerialBusUARTTriggerConditionGreaterThan"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerConditionLessThan" Value="AgInfiniiVisionSerialBusUARTTriggerConditionLessThan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data qualifier when TriggerType is set to RData, RD1, RD0, RDX, TData, TD1, TD0, or TDX for the trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>TriggerCondition</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TriggerCondition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TriggerCondition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerConditionEqual" Value="AgInfiniiVisionSerialBusUARTTriggerConditionEqual"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerConditionNotEqual" Value="AgInfiniiVisionSerialBusUARTTriggerConditionNotEqual"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerConditionGreaterThan" Value="AgInfiniiVisionSerialBusUARTTriggerConditionGreaterThan"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerConditionLessThan" Value="AgInfiniiVisionSerialBusUARTTriggerConditionLessThan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data qualifier when TriggerType is set to RData, RD1, RD0, RDX, TData, TD1, TD0, or TDX for the trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>TriggerData</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TriggerData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TriggerData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data byte value (0x00 to 0xFF) for the trigger condition when in UART mode. The data value is used when one of the RD or TD trigger types is selected.</Description>
            </Property>
            <Property>
               <Name>TriggerData</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TriggerData;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TriggerData = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the data byte value (0x00 to 0xFF) for the trigger condition when in UART mode. The data value is used when one of the RD or TD trigger types is selected.</Description>
            </Property>
            <Property>
               <Name>TriggerIdleTime</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TriggerIdleTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TriggerIdleTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value of the idle period for burst trigger in the range from 1 us to 10 s when in UART mode.</Description>
            </Property>
            <Property>
               <Name>TriggerIdleTime</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TriggerIdleTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TriggerIdleTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the value of the idle period for burst trigger in the range from 1 us to 10 s when in UART mode.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TriggerType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TriggerType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeRStart" Value="AgInfiniiVisionSerialBusUARTTriggerTypeRStart"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeRStop" Value="AgInfiniiVisionSerialBusUARTTriggerTypeRStop"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeRData" Value="AgInfiniiVisionSerialBusUARTTriggerTypeRData"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeRD1" Value="AgInfiniiVisionSerialBusUARTTriggerTypeRD1"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeRD0" Value="AgInfiniiVisionSerialBusUARTTriggerTypeRD0"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeRDX" Value="AgInfiniiVisionSerialBusUARTTriggerTypeRDX"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeParityError" Value="AgInfiniiVisionSerialBusUARTTriggerTypeParityError"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeTStart" Value="AgInfiniiVisionSerialBusUARTTriggerTypeTStart"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeTStop" Value="AgInfiniiVisionSerialBusUARTTriggerTypeTStop"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeTData" Value="AgInfiniiVisionSerialBusUARTTriggerTypeTData"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeTD1" Value="AgInfiniiVisionSerialBusUARTTriggerTypeTD1"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeTD0" Value="AgInfiniiVisionSerialBusUARTTriggerTypeTD0"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeTDX" Value="AgInfiniiVisionSerialBusUARTTriggerTypeTDX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the UART Trigger Type</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TriggerType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TriggerType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeRStart" Value="AgInfiniiVisionSerialBusUARTTriggerTypeRStart"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeRStop" Value="AgInfiniiVisionSerialBusUARTTriggerTypeRStop"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeRData" Value="AgInfiniiVisionSerialBusUARTTriggerTypeRData"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeRD1" Value="AgInfiniiVisionSerialBusUARTTriggerTypeRD1"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeRD0" Value="AgInfiniiVisionSerialBusUARTTriggerTypeRD0"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeRDX" Value="AgInfiniiVisionSerialBusUARTTriggerTypeRDX"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeParityError" Value="AgInfiniiVisionSerialBusUARTTriggerTypeParityError"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeTStart" Value="AgInfiniiVisionSerialBusUARTTriggerTypeTStart"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeTStop" Value="AgInfiniiVisionSerialBusUARTTriggerTypeTStop"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeTData" Value="AgInfiniiVisionSerialBusUARTTriggerTypeTData"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeTD1" Value="AgInfiniiVisionSerialBusUARTTriggerTypeTD1"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeTD0" Value="AgInfiniiVisionSerialBusUARTTriggerTypeTD0"/>
                     <Enum Name="AgInfiniiVisionSerialBusUARTTriggerTypeTDX" Value="AgInfiniiVisionSerialBusUARTTriggerTypeTDX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the UART Trigger Type</Description>
            </Property>
            <Property>
               <Name>TxFrameCount</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TxFrameCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the UART Tx frame count.</Description>
            </Property>
            <Property>
               <Name>TxFrameCount</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TxFrameCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Gets the UART Tx frame count.</Description>
            </Property>
            <Property>
               <Name>TxSource</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TxSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TxSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies  which signal is used as the Tx source by the serial decoder and/or trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>TxSource</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.TxSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.TxSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies  which signal is used as the Tx source by the serial decoder and/or trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>Width</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.Width;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.Width = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies  the number of bits (5-9) for each message "byte" for the serial decoder and/or trigger when in UART mode.</Description>
            </Property>
            <Property>
               <Name>Width</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	propertyValue = comobj.Width;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SerialBuses;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.UART;
	comobj.Width = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies  the number of bits (5-9) for each message "byte" for the serial decoder and/or trigger when in UART mode.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ResetCounters</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetCounters(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.UART;
feature('COM_SafeArraySingleDim',1);
comobj.ResetCounters();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method resets the UART frame counters.</Description>
            </Method>
            <Method>
               <Name>ResetCounters</Name>
               <Location>SerialBuseUART</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetCounters(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SerialBuses;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.UART;
feature('COM_SafeArraySingleDim',1);
comobj.ResetCounters();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method resets the UART frame counters.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>System</Name>
         <Description>IAgInfiniiVisionSystem interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Date</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.Date;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.Date = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current date formatted as 'YYYY, MM, DD'. YYYY is a four-digit representation of the year including century and millennium information. MM is a two-digit representation of the month where January is 1 and December is 12. DD is the day of the month.</Description>
            </Property>
            <Property>
               <Name>ProtectionEnabled</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.ProtectionEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.ProtectionEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the fifty ohm impedance setting for all analog channels. Query returns the analog channel protection lock status</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.SerialNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Instrument serial number.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.Time;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current time formatted as 'HH, MM, SS.SSS'. HH is the hour and its range is 0 to 23 inclusive. MM is the minute and its range is 0 to 59 inclusive. SS is the second in the range 0 to 59.999.</Description>
            </Property>
            <Property>
               <Name>TimeoutMilliseconds</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.TimeoutMilliseconds;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.TimeoutMilliseconds = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The value, in milliseconds, of the default timeout used by I/O operations. This property provides access to the driver's Visa Session Timeout. Only in rare, unusual circumstances should the client set this property.</Description>
            </Property>
            <Property>
               <Name>TraceEnabled</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.TraceEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.TraceEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, outputs a trace log of all driver calls to an xml file in the same directory as the application executable accessing the driver. Generates default unique file names based on date and time.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>DisableLocalControls</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.DisableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Puts the instrument into a state where all local controls, including return to local, are disabled from changing the state of the instrument. The power switch is excluded.</Description>
            </Method>
            <Method>
               <Name>EnableLocalControls</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function EnableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.EnableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Allows an operator to examine and change the instrument's state through its local controls. The client can allow an operator to interact directly with the instrument through its front panel for a period of time.</Description>
            </Method>
            <Method>
               <Name>GetState</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data] = GetState(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
[Data] = comobj.GetState(uint8([0;0]));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Binary current instrument state. May be restored using PutState method. Data is in internal instrument format, do not alter.</Description>
            </Method>
            <Method>
               <Name>PutState</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function PutState(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.PutState(uint8(Data));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Writes binary instrument state as saved by GetState method.</Description>
            </Method>
            <Method>
               <Name>RecallState</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RecallState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.RecallState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restore the instrument to a state previously stored in the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>SaveState</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SaveState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.SaveState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save the instrument's state to the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>WaitForOperationComplete</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitForOperationComplete(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.WaitForOperationComplete(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Does not return until previously started operations complete or more MaxTimeMilliseconds milliseconds of time have expired.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>System2</Name>
         <Description>IAgInfiniiVisionSystem2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Date</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.Date;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.Date = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current date formatted as 'YYYY, MM, DD'. YYYY is a four-digit representation of the year including century and millennium information. MM is a two-digit representation of the month where January is 1 and December is 12. DD is the day of the month.</Description>
            </Property>
            <Property>
               <Name>Date</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.Date;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.Date = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current date formatted as 'YYYY, MM, DD'. YYYY is a four-digit representation of the year including century and millennium information. MM is a two-digit representation of the month where January is 1 and December is 12. DD is the day of the month.</Description>
            </Property>
            <Property>
               <Name>ProtectionEnabled</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.ProtectionEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.ProtectionEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the fifty ohm impedance setting for all analog channels. Query returns the analog channel protection lock status</Description>
            </Property>
            <Property>
               <Name>ProtectionEnabled</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.ProtectionEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.ProtectionEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the fifty ohm impedance setting for all analog channels. Query returns the analog channel protection lock status</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.SerialNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Instrument serial number.</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.SerialNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Instrument serial number.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.Time;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current time formatted as 'HH, MM, SS.SSS'. HH is the hour and its range is 0 to 23 inclusive. MM is the minute and its range is 0 to 59 inclusive. SS is the second in the range 0 to 59.999.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.Time;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current time formatted as 'HH, MM, SS.SSS'. HH is the hour and its range is 0 to 23 inclusive. MM is the minute and its range is 0 to 59 inclusive. SS is the second in the range 0 to 59.999.</Description>
            </Property>
            <Property>
               <Name>TimeoutMilliseconds</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.TimeoutMilliseconds;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.TimeoutMilliseconds = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The value, in milliseconds, of the default timeout used by I/O operations. This property provides access to the driver's Visa Session Timeout. Only in rare, unusual circumstances should the client set this property.</Description>
            </Property>
            <Property>
               <Name>TimeoutMilliseconds</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.TimeoutMilliseconds;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.TimeoutMilliseconds = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The value, in milliseconds, of the default timeout used by I/O operations. This property provides access to the driver's Visa Session Timeout. Only in rare, unusual circumstances should the client set this property.</Description>
            </Property>
            <Property>
               <Name>TouchScreenEnabled</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.TouchScreenEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.TouchScreenEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Disables or enables the touchscreen.</Description>
            </Property>
            <Property>
               <Name>TraceEnabled</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.TraceEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.TraceEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, outputs a trace log of all driver calls to an xml file in the same directory as the application executable accessing the driver. Generates default unique file names based on date and time.</Description>
            </Property>
            <Property>
               <Name>TraceEnabled</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.TraceEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.TraceEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, outputs a trace log of all driver calls to an xml file in the same directory as the application executable accessing the driver. Generates default unique file names based on date and time.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearIO</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearIO(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.ClearIO();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Performs an IEEE 488.1-style clear of the device.</Description>
            </Method>
            <Method>
               <Name>DisableLocalControls</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.DisableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Puts the instrument into a state where all local controls, including return to local, are disabled from changing the state of the instrument. The power switch is excluded.</Description>
            </Method>
            <Method>
               <Name>DisableLocalControls</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.DisableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Puts the instrument into a state where all local controls, including return to local, are disabled from changing the state of the instrument. The power switch is excluded.</Description>
            </Method>
            <Method>
               <Name>EnableLocalControls</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function EnableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.EnableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Allows an operator to examine and change the instrument's state through its local controls. The client can allow an operator to interact directly with the instrument through its front panel for a period of time.</Description>
            </Method>
            <Method>
               <Name>EnableLocalControls</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function EnableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.EnableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Allows an operator to examine and change the instrument's state through its local controls. The client can allow an operator to interact directly with the instrument through its front panel for a period of time.</Description>
            </Method>
            <Method>
               <Name>GetState</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data] = GetState(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
[Data] = comobj.GetState(uint8([0;0]));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Binary current instrument state. May be restored using PutState method. Data is in internal instrument format, do not alter.</Description>
            </Method>
            <Method>
               <Name>GetState</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data] = GetState(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
[Data] = comobj.GetState(uint8([0;0]));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Binary current instrument state. May be restored using PutState method. Data is in internal instrument format, do not alter.</Description>
            </Method>
            <Method>
               <Name>PutState</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function PutState(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.PutState(uint8(Data));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Writes binary instrument state as saved by GetState method.</Description>
            </Method>
            <Method>
               <Name>PutState</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function PutState(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.PutState(uint8(Data));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Writes binary instrument state as saved by GetState method.</Description>
            </Method>
            <Method>
               <Name>ReadBytes</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = ReadBytes(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.ReadBytes();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads a complete response from the instrument and returns it as an array of bytes.</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = ReadString(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.ReadString();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads a complete response from the instrument and returns it as a string.</Description>
            </Method>
            <Method>
               <Name>RecallState</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RecallState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.RecallState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restore the instrument to a state previously stored in the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>RecallState</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RecallState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.RecallState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restore the instrument to a state previously stored in the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>SaveState</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SaveState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.SaveState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save the instrument's state to the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>SaveState</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SaveState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.SaveState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save the instrument's state to the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>WaitForOperationComplete</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitForOperationComplete(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.WaitForOperationComplete(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Does not return until previously started operations complete or more MaxTimeMilliseconds milliseconds of time have expired.</Description>
            </Method>
            <Method>
               <Name>WaitForOperationComplete</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitForOperationComplete(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.WaitForOperationComplete(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Does not return until previously started operations complete or more MaxTimeMilliseconds milliseconds of time have expired.</Description>
            </Method>
            <Method>
               <Name>WriteBytes</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteBytes(obj, Buffer)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.WriteBytes(uint8(Buffer));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write an array of bytes to the device.</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteString(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.WriteString(Data);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a string to the device.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>System3</Name>
         <Description>IAgInfiniiVisionSystem3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System31" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Date</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.Date;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj.Date = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current date formatted as 'YYYY, MM, DD'. YYYY is a four-digit representation of the year including century and millennium information. MM is a two-digit representation of the month where January is 1 and December is 12. DD is the day of the month.</Description>
            </Property>
            <Property>
               <Name>Date</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.Date;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj.Date = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current date formatted as 'YYYY, MM, DD'. YYYY is a four-digit representation of the year including century and millennium information. MM is a two-digit representation of the month where January is 1 and December is 12. DD is the day of the month.</Description>
            </Property>
            <Property>
               <Name>ProtectionEnabled</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.ProtectionEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj.ProtectionEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the fifty ohm impedance setting for all analog channels. Query returns the analog channel protection lock status</Description>
            </Property>
            <Property>
               <Name>ProtectionEnabled</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.ProtectionEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj.ProtectionEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the fifty ohm impedance setting for all analog channels. Query returns the analog channel protection lock status</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.SerialNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Instrument serial number.</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.SerialNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Instrument serial number.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.Time;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current time formatted as 'HH, MM, SS.SSS'. HH is the hour and its range is 0 to 23 inclusive. MM is the minute and its range is 0 to 59 inclusive. SS is the second in the range 0 to 59.999.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.Time;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current time formatted as 'HH, MM, SS.SSS'. HH is the hour and its range is 0 to 23 inclusive. MM is the minute and its range is 0 to 59 inclusive. SS is the second in the range 0 to 59.999.</Description>
            </Property>
            <Property>
               <Name>TimeoutMilliseconds</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.TimeoutMilliseconds;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj.TimeoutMilliseconds = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The value, in milliseconds, of the default timeout used by I/O operations. This property provides access to the driver's Visa Session Timeout. Only in rare, unusual circumstances should the client set this property.</Description>
            </Property>
            <Property>
               <Name>TimeoutMilliseconds</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.TimeoutMilliseconds;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj.TimeoutMilliseconds = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The value, in milliseconds, of the default timeout used by I/O operations. This property provides access to the driver's Visa Session Timeout. Only in rare, unusual circumstances should the client set this property.</Description>
            </Property>
            <Property>
               <Name>TouchScreenEnabled</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.TouchScreenEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj.TouchScreenEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Disables or enables the touchscreen.</Description>
            </Property>
            <Property>
               <Name>TouchScreenEnabled</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.TouchScreenEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj.TouchScreenEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Disables or enables the touchscreen.</Description>
            </Property>
            <Property>
               <Name>TraceEnabled</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.TraceEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj.TraceEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, outputs a trace log of all driver calls to an xml file in the same directory as the application executable accessing the driver. Generates default unique file names based on date and time.</Description>
            </Property>
            <Property>
               <Name>TraceEnabled</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	propertyValue = comobj.TraceEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj.TraceEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, outputs a trace log of all driver calls to an xml file in the same directory as the application executable accessing the driver. Generates default unique file names based on date and time.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearIO</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearIO(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.ClearIO();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Performs an IEEE 488.1-style clear of the device.</Description>
            </Method>
            <Method>
               <Name>ClearIO</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearIO(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.ClearIO();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Performs an IEEE 488.1-style clear of the device.</Description>
            </Method>
            <Method>
               <Name>DisableLocalControls</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.DisableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Puts the instrument into a state where all local controls, including return to local, are disabled from changing the state of the instrument. The power switch is excluded.</Description>
            </Method>
            <Method>
               <Name>DisableLocalControls</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.DisableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Puts the instrument into a state where all local controls, including return to local, are disabled from changing the state of the instrument. The power switch is excluded.</Description>
            </Method>
            <Method>
               <Name>EnableLocalControls</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function EnableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.EnableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Allows an operator to examine and change the instrument's state through its local controls. The client can allow an operator to interact directly with the instrument through its front panel for a period of time.</Description>
            </Method>
            <Method>
               <Name>EnableLocalControls</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function EnableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.EnableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Allows an operator to examine and change the instrument's state through its local controls. The client can allow an operator to interact directly with the instrument through its front panel for a period of time.</Description>
            </Method>
            <Method>
               <Name>GetState</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data] = GetState(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
[Data] = comobj.GetState(uint8([0;0]));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Binary current instrument state. May be restored using PutState method. Data is in internal instrument format, do not alter.</Description>
            </Method>
            <Method>
               <Name>GetState</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data] = GetState(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
[Data] = comobj.GetState(uint8([0;0]));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Binary current instrument state. May be restored using PutState method. Data is in internal instrument format, do not alter.</Description>
            </Method>
            <Method>
               <Name>PutState</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function PutState(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.PutState(uint8(Data));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Writes binary instrument state as saved by GetState method.</Description>
            </Method>
            <Method>
               <Name>PutState</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function PutState(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.PutState(uint8(Data));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Writes binary instrument state as saved by GetState method.</Description>
            </Method>
            <Method>
               <Name>ReadBytes</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = ReadBytes(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.ReadBytes();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads a complete response from the instrument and returns it as an array of bytes.</Description>
            </Method>
            <Method>
               <Name>ReadBytes</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = ReadBytes(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.ReadBytes();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads a complete response from the instrument and returns it as an array of bytes.</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = ReadString(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.ReadString();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads a complete response from the instrument and returns it as a string.</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = ReadString(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.ReadString();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads a complete response from the instrument and returns it as a string.</Description>
            </Method>
            <Method>
               <Name>RecallState</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RecallState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.RecallState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restore the instrument to a state previously stored in the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>RecallState</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RecallState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.RecallState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restore the instrument to a state previously stored in the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>SaveState</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SaveState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.SaveState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save the instrument's state to the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>SaveState</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SaveState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.SaveState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save the instrument's state to the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>WaitForOperationComplete</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitForOperationComplete(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.WaitForOperationComplete(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Does not return until previously started operations complete or more MaxTimeMilliseconds milliseconds of time have expired.</Description>
            </Method>
            <Method>
               <Name>WaitForOperationComplete</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitForOperationComplete(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.WaitForOperationComplete(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Does not return until previously started operations complete or more MaxTimeMilliseconds milliseconds of time have expired.</Description>
            </Method>
            <Method>
               <Name>WriteBytes</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteBytes(obj, Buffer)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.WriteBytes(uint8(Buffer));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write an array of bytes to the device.</Description>
            </Method>
            <Method>
               <Name>WriteBytes</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteBytes(obj, Buffer)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.WriteBytes(uint8(Buffer));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write an array of bytes to the device.</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteString(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.WriteString(Data);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a string to the device.</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>System3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteString(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
feature('COM_SafeArraySingleDim',1);
comobj.WriteString(Data);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a string to the device.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>System3DirectIO</Name>
         <Description>IEEE 488.2 Formatted I/O Interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System3DirectIO1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>InstrumentBigEndian</Name>
               <Location>System3DirectIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	propertyValue = comobj.InstrumentBigEndian;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj.InstrumentBigEndian = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether the instrument communicates in Big Endian (IEEE 488.2) format</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>FlushRead</Name>
               <Location>System3DirectIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function FlushRead(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
feature('COM_SafeArraySingleDim',1);
comobj.FlushRead();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Flush the Read Buffer</Description>
            </Method>
            <Method>
               <Name>FlushWrite</Name>
               <Location>System3DirectIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function FlushWrite(obj, sendEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
feature('COM_SafeArraySingleDim',1);
comobj.FlushWrite(logical(sendEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Flush the Write Buffer and optionally send the END signal</Description>
            </Method>
            <Method>
               <Name>ReadIEEEBlock</Name>
               <Location>System3DirectIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadIEEEBlock(obj, type, seekToBlock, flushToEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadIEEEBlock(type, logical(seekToBlock), logical(flushToEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read a definite-length IEEE block from the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>ReadList</Name>
               <Location>System3DirectIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadList(obj, type, listSeperator)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadList(type, listSeperator);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read a list of values in ASCII format from the I/O Stream, convert them to the specified type, and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>ReadNumber</Name>
               <Location>System3DirectIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadNumber(obj, type, flushToEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadNumber(type, logical(flushToEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read a single number from the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>System3DirectIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadString(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadString();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the entire contents of the buffer until the termination character / END signal and return the data as a string</Description>
            </Method>
            <Method>
               <Name>SetBufferSize</Name>
               <Location>System3DirectIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetBufferSize(obj, mask, size)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
feature('COM_SafeArraySingleDim',1);
comobj.SetBufferSize(mask, int32(size));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the formatted I/O read or write buffer size</Description>
            </Method>
            <Method>
               <Name>WriteIEEEBlock</Name>
               <Location>System3DirectIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteIEEEBlock(obj, Command, data, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteIEEEBlock(Command, logical(flushAndEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a command followed by an IEEE 488.2 definite-length binary block terminated with the Stream's termination character to the I/O Stream</Description>
            </Method>
            <Method>
               <Name>WriteList</Name>
               <Location>System3DirectIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteList(obj, data, type, listSeperator, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteList(type, listSeperator, logical(flushAndEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a list of values to the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>WriteNumber</Name>
               <Location>System3DirectIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteNumber(obj, data, type, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteNumber(type, logical(flushAndEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a single number to the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>System3DirectIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteString(obj, data, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteString(data, logical(flushAndEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a string to the I/O Stream and optionally flush the buffer</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>System3DirectIOIO</Name>
         <Description>Message Based Interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System3DirectIOIO1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ComponentVersion</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.ComponentVersion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the implementation version of the component</Description>
            </Property>
            <Property>
               <Name>ComponentVersion</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.ComponentVersion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the implementation version of the component</Description>
            </Property>
            <Property>
               <Name>HardwareInterfaceName</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.HardwareInterfaceName;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get a description of the hardware interface</Description>
            </Property>
            <Property>
               <Name>HardwareInterfaceName</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.HardwareInterfaceName;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get a description of the hardware interface</Description>
            </Property>
            <Property>
               <Name>HardwareInterfaceNumber</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.HardwareInterfaceNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the hardware interface number</Description>
            </Property>
            <Property>
               <Name>HardwareInterfaceNumber</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.HardwareInterfaceNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the hardware interface number</Description>
            </Property>
            <Property>
               <Name>HardwareInterfaceType</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.HardwareInterfaceType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the hardware interface type</Description>
            </Property>
            <Property>
               <Name>HardwareInterfaceType</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.HardwareInterfaceType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the hardware interface type</Description>
            </Property>
            <Property>
               <Name>IOProtocol</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.IOProtocol;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	comobj.IOProtocol = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="PROT_NORMAL" Value="PROT_NORMAL"/>
                     <Enum Name="PROT_FDC" Value="PROT_FDC"/>
                     <Enum Name="PROT_HS488" Value="PROT_HS488"/>
                     <Enum Name="PROT_4882_STRS" Value="PROT_4882_STRS"/>
                     <Enum Name="PROT_USBTMC_VENDOR" Value="PROT_USBTMC_VENDOR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set which I/O protocol to use</Description>
            </Property>
            <Property>
               <Name>IOProtocol</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.IOProtocol;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	comobj.IOProtocol = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="PROT_NORMAL" Value="PROT_NORMAL"/>
                     <Enum Name="PROT_FDC" Value="PROT_FDC"/>
                     <Enum Name="PROT_HS488" Value="PROT_HS488"/>
                     <Enum Name="PROT_4882_STRS" Value="PROT_4882_STRS"/>
                     <Enum Name="PROT_USBTMC_VENDOR" Value="PROT_USBTMC_VENDOR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set which I/O protocol to use</Description>
            </Property>
            <Property>
               <Name>LastStatus</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand/>
                  </Commands>
               </Code>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>LastStatus</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand/>
                  </Commands>
               </Code>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>LockState</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.LockState;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NO_LOCK" Value="NO_LOCK"/>
                     <Enum Name="EXCLUSIVE_LOCK" Value="EXCLUSIVE_LOCK"/>
                     <Enum Name="SHARED_LOCK" Value="SHARED_LOCK"/>
                     <Enum Name="LOAD_CONFIG" Value="LOAD_CONFIG"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the current lock state of the resource</Description>
            </Property>
            <Property>
               <Name>LockState</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.LockState;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NO_LOCK" Value="NO_LOCK"/>
                     <Enum Name="EXCLUSIVE_LOCK" Value="EXCLUSIVE_LOCK"/>
                     <Enum Name="SHARED_LOCK" Value="SHARED_LOCK"/>
                     <Enum Name="LOAD_CONFIG" Value="LOAD_CONFIG"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the current lock state of the resource</Description>
            </Property>
            <Property>
               <Name>OptionString</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.OptionString;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the current state of all settable properties</Description>
            </Property>
            <Property>
               <Name>OptionString</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.OptionString;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the current state of all settable properties</Description>
            </Property>
            <Property>
               <Name>ProgID</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.ProgID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the ProgID of the component</Description>
            </Property>
            <Property>
               <Name>ProgID</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.ProgID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the ProgID of the component</Description>
            </Property>
            <Property>
               <Name>ResourceName</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.ResourceName;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the resource name</Description>
            </Property>
            <Property>
               <Name>ResourceName</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.ResourceName;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the resource name</Description>
            </Property>
            <Property>
               <Name>SendEndEnabled</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.SendEndEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	comobj.SendEndEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether to assert END on Write</Description>
            </Property>
            <Property>
               <Name>SendEndEnabled</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.SendEndEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	comobj.SendEndEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether to assert END on Write</Description>
            </Property>
            <Property>
               <Name>SessionType</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.SessionType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the session class type</Description>
            </Property>
            <Property>
               <Name>SessionType</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.SessionType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the session class type</Description>
            </Property>
            <Property>
               <Name>SoftwareManufacturerID</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.SoftwareManufacturerID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the manufacturer ID of the component</Description>
            </Property>
            <Property>
               <Name>SoftwareManufacturerID</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.SoftwareManufacturerID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the manufacturer ID of the component</Description>
            </Property>
            <Property>
               <Name>SoftwareManufacturerName</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.SoftwareManufacturerName;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the manufacturer name of the component</Description>
            </Property>
            <Property>
               <Name>SoftwareManufacturerName</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.SoftwareManufacturerName;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the manufacturer name of the component</Description>
            </Property>
            <Property>
               <Name>SpecVersion</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.SpecVersion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the VISA COM I/O specification version</Description>
            </Property>
            <Property>
               <Name>SpecVersion</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.SpecVersion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the VISA COM I/O specification version</Description>
            </Property>
            <Property>
               <Name>TerminationCharacter</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.TerminationCharacter;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	comobj.TerminationCharacter = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set the termination character</Description>
            </Property>
            <Property>
               <Name>TerminationCharacter</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.TerminationCharacter;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	comobj.TerminationCharacter = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set the termination character</Description>
            </Property>
            <Property>
               <Name>TerminationCharacterEnabled</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.TerminationCharacterEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	comobj.TerminationCharacterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether to use the termination character on Read</Description>
            </Property>
            <Property>
               <Name>TerminationCharacterEnabled</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.TerminationCharacterEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	comobj.TerminationCharacterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether to use the termination character on Read</Description>
            </Property>
            <Property>
               <Name>Timeout</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.Timeout;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	comobj.Timeout = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set the I/O timeout in milliseconds</Description>
            </Property>
            <Property>
               <Name>Timeout</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	propertyValue = comobj.Timeout;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.DirectIO;
	comobj = comobj.IO;
	comobj.Timeout = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set the I/O timeout in milliseconds</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>AssertTrigger</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AssertTrigger(obj, protocol)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.AssertTrigger(protocol);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Assert a trigger</Description>
            </Method>
            <Method>
               <Name>AssertTrigger</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AssertTrigger(obj, protocol)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.AssertTrigger(protocol);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Assert a trigger</Description>
            </Method>
            <Method>
               <Name>Clear</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clear the device</Description>
            </Method>
            <Method>
               <Name>Clear</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clear the device</Description>
            </Method>
            <Method>
               <Name>Close</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Close(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.Close();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Close the session</Description>
            </Method>
            <Method>
               <Name>Close</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Close(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.Close();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Close the session</Description>
            </Method>
            <Method>
               <Name>Init</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Init(obj, ResourceName, mode, initTimeout, OptionString)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.Init(ResourceName, mode, int32(initTimeout), OptionString);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initialize a session to the specified resource name</Description>
            </Method>
            <Method>
               <Name>Init</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Init(obj, ResourceName, mode, initTimeout, OptionString)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.Init(ResourceName, mode, int32(initTimeout), OptionString);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initialize a session to the specified resource name</Description>
            </Method>
            <Method>
               <Name>LockRsrc</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pAccessKey] = LockRsrc(obj, type, lockTimeout, requestedKey)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pAccessKey] = comobj.LockRsrc(type, int32(lockTimeout), requestedKey);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Establish ownership of the resource</Description>
            </Method>
            <Method>
               <Name>LockRsrc</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pAccessKey] = LockRsrc(obj, type, lockTimeout, requestedKey)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pAccessKey] = comobj.LockRsrc(type, int32(lockTimeout), requestedKey);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Establish ownership of the resource</Description>
            </Method>
            <Method>
               <Name>Read</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pBuffer] = Read(obj, count)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pBuffer] = comobj.Read(int32(count));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the specified number of bytes</Description>
            </Method>
            <Method>
               <Name>ReadSTB</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pStatusByte] = ReadSTB(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pStatusByte] = comobj.ReadSTB();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the status byte</Description>
            </Method>
            <Method>
               <Name>ReadSTB</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pStatusByte] = ReadSTB(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pStatusByte] = comobj.ReadSTB();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the status byte</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pBuffer] = ReadString(obj, count)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pBuffer] = comobj.ReadString(int32(count));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the specified number of bytes as a string</Description>
            </Method>
            <Method>
               <Name>UnlockRsrc</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function UnlockRsrc(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.UnlockRsrc();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Relinquish ownership of the resource</Description>
            </Method>
            <Method>
               <Name>UnlockRsrc</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function UnlockRsrc(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.UnlockRsrc();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Relinquish ownership of the resource</Description>
            </Method>
            <Method>
               <Name>Write</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pRetCount] = Write(obj, buffer, count)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pRetCount] = comobj.Write(uint8(buffer), int32(count));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write the specified data</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>System3DirectIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pRetCount] = WriteString(obj, buffer)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System3;
comobj = comobj.DirectIO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pRetCount] = comobj.WriteString(buffer);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write the specified string</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>System3Precision</Name>
         <Description>IAgInfiniiVisionSystem3Precision interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System3Precision1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>System3Precision</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.Precision;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.Precision;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the oscilloscope's precision analysis setting.</Description>
            </Property>
            <Property>
               <Name>RecordLength</Name>
               <Location>System3Precision</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.Precision;
	propertyValue = comobj.RecordLength;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System3;
	comobj = comobj.Precision;
	comobj.RecordLength = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of the precision analysis record (when precision measurements and math functions mode is enabled).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>System4</Name>
         <Description>IAgInfiniiVisionSystem4 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System41" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Date</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.Date;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.Date = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current date formatted as 'YYYY, MM, DD'. YYYY is a four-digit representation of the year including century and millennium information. MM is a two-digit representation of the month where January is 1 and December is 12. DD is the day of the month.</Description>
            </Property>
            <Property>
               <Name>Date</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.Date;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.Date = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current date formatted as 'YYYY, MM, DD'. YYYY is a four-digit representation of the year including century and millennium information. MM is a two-digit representation of the month where January is 1 and December is 12. DD is the day of the month.</Description>
            </Property>
            <Property>
               <Name>IOTimeout</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.IOTimeout;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.IOTimeout = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The I/O timeout in milliseconds.  The client program should normally not need to set the timeout.  Driver methods  with operations which take a significant time to perform are responsible for adjusting the I/O timeout to an appropriate value.</Description>
            </Property>
            <Property>
               <Name>ProtectionEnabled</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.ProtectionEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.ProtectionEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the fifty ohm impedance setting for all analog channels. Query returns the analog channel protection lock status</Description>
            </Property>
            <Property>
               <Name>ProtectionEnabled</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.ProtectionEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.ProtectionEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the fifty ohm impedance setting for all analog channels. Query returns the analog channel protection lock status</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.SerialNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Instrument serial number.</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.SerialNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Instrument serial number.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.Time;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current time formatted as 'HH, MM, SS.SSS'. HH is the hour and its range is 0 to 23 inclusive. MM is the minute and its range is 0 to 59 inclusive. SS is the second in the range 0 to 59.999.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.Time;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current time formatted as 'HH, MM, SS.SSS'. HH is the hour and its range is 0 to 23 inclusive. MM is the minute and its range is 0 to 59 inclusive. SS is the second in the range 0 to 59.999.</Description>
            </Property>
            <Property>
               <Name>TimeoutMilliseconds</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.TimeoutMilliseconds;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.TimeoutMilliseconds = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The value, in milliseconds, of the default timeout used by I/O operations. This property provides access to the driver's Visa Session Timeout. Only in rare, unusual circumstances should the client set this property.</Description>
            </Property>
            <Property>
               <Name>TimeoutMilliseconds</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.TimeoutMilliseconds;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.TimeoutMilliseconds = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The value, in milliseconds, of the default timeout used by I/O operations. This property provides access to the driver's Visa Session Timeout. Only in rare, unusual circumstances should the client set this property.</Description>
            </Property>
            <Property>
               <Name>TouchScreenEnabled</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.TouchScreenEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.TouchScreenEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Disables or enables the touchscreen.</Description>
            </Property>
            <Property>
               <Name>TouchScreenEnabled</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.TouchScreenEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.TouchScreenEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Disables or enables the touchscreen.</Description>
            </Property>
            <Property>
               <Name>TraceEnabled</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.TraceEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.TraceEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, outputs a trace log of all driver calls to an xml file in the same directory as the application executable accessing the driver. Generates default unique file names based on date and time.</Description>
            </Property>
            <Property>
               <Name>TraceEnabled</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	propertyValue = comobj.TraceEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System4;
	comobj.TraceEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, outputs a trace log of all driver calls to an xml file in the same directory as the application executable accessing the driver. Generates default unique file names based on date and time.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearIO</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearIO(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.ClearIO();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Performs an IEEE 488.1-style clear of the device.</Description>
            </Method>
            <Method>
               <Name>ClearIO</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearIO(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.ClearIO();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Performs an IEEE 488.1-style clear of the device.</Description>
            </Method>
            <Method>
               <Name>DisableLocalControls</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.DisableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Puts the instrument into a state where all local controls, including return to local, are disabled from changing the state of the instrument. The power switch is excluded.</Description>
            </Method>
            <Method>
               <Name>DisableLocalControls</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.DisableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Puts the instrument into a state where all local controls, including return to local, are disabled from changing the state of the instrument. The power switch is excluded.</Description>
            </Method>
            <Method>
               <Name>EnableLocalControls</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function EnableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.EnableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Allows an operator to examine and change the instrument's state through its local controls. The client can allow an operator to interact directly with the instrument through its front panel for a period of time.</Description>
            </Method>
            <Method>
               <Name>EnableLocalControls</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function EnableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.EnableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Allows an operator to examine and change the instrument's state through its local controls. The client can allow an operator to interact directly with the instrument through its front panel for a period of time.</Description>
            </Method>
            <Method>
               <Name>GetState</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data] = GetState(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
[Data] = comobj.GetState(uint8([0;0]));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Binary current instrument state. May be restored using PutState method. Data is in internal instrument format, do not alter.</Description>
            </Method>
            <Method>
               <Name>GetState</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data] = GetState(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
[Data] = comobj.GetState(uint8([0;0]));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Binary current instrument state. May be restored using PutState method. Data is in internal instrument format, do not alter.</Description>
            </Method>
            <Method>
               <Name>PutState</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function PutState(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.PutState(uint8(Data));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Writes binary instrument state as saved by GetState method.</Description>
            </Method>
            <Method>
               <Name>PutState</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function PutState(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.PutState(uint8(Data));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Writes binary instrument state as saved by GetState method.</Description>
            </Method>
            <Method>
               <Name>ReadBytes</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = ReadBytes(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.ReadBytes();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads a complete response from the instrument and returns it as an array of bytes.</Description>
            </Method>
            <Method>
               <Name>ReadBytes</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = ReadBytes(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.ReadBytes();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads a complete response from the instrument and returns it as an array of bytes.</Description>
            </Method>
            <Method>
               <Name>ReadBytes2</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = ReadBytes2(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.ReadBytes2();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads a complete response from the instrument and returns it as an array of bytes.</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = ReadString(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.ReadString();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads a complete response from the instrument and returns it as a string.</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = ReadString(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.ReadString();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads a complete response from the instrument and returns it as a string.</Description>
            </Method>
            <Method>
               <Name>RecallState</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RecallState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.RecallState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restore the instrument to a state previously stored in the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>RecallState</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RecallState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.RecallState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restore the instrument to a state previously stored in the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>SaveState</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SaveState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.SaveState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save the instrument's state to the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>SaveState</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SaveState(obj, MemoryLocation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.SaveState(MemoryLocation);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save the instrument's state to the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>WaitForOperationComplete</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitForOperationComplete(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.WaitForOperationComplete(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Does not return until previously started operations complete or more MaxTimeMilliseconds milliseconds of time have expired.</Description>
            </Method>
            <Method>
               <Name>WaitForOperationComplete</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitForOperationComplete(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.WaitForOperationComplete(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Does not return until previously started operations complete or more MaxTimeMilliseconds milliseconds of time have expired.</Description>
            </Method>
            <Method>
               <Name>WriteBytes</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteBytes(obj, Buffer)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.WriteBytes(uint8(Buffer));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write an array of bytes to the device.</Description>
            </Method>
            <Method>
               <Name>WriteBytes</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteBytes(obj, Buffer)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.WriteBytes(uint8(Buffer));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write an array of bytes to the device.</Description>
            </Method>
            <Method>
               <Name>WriteBytes2</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = WriteBytes2(obj, Buffer)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.WriteBytes2(uint8(Buffer));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write an array of bytes to the device.</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteString(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.WriteString(Data);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a string to the device.</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteString(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.WriteString(Data);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a string to the device.</Description>
            </Method>
            <Method>
               <Name>WriteString2</Name>
               <Location>System4</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteString2(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System4;
feature('COM_SafeArraySingleDim',1);
comobj.WriteString2(Data);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a string to the device.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Timebase</Name>
         <Description>IAgInfiniiVisionTimebase interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Timebase1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>HorizontalScale</Name>
               <Location>Timebase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	propertyValue = comobj.HorizontalScale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	comobj.HorizontalScale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Horizontal scale or seconds per division for the main window.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>Timebase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTimebaseModeMain" Value="AgInfiniiVisionTimebaseModeMain"/>
                     <Enum Name="AgInfiniiVisionTimebaseModeWindow" Value="AgInfiniiVisionTimebaseModeWindow"/>
                     <Enum Name="AgInfiniiVisionTimebaseModeXY" Value="AgInfiniiVisionTimebaseModeXY"/>
                     <Enum Name="AgInfiniiVisionTimebaseModeRoll" Value="AgInfiniiVisionTimebaseModeRoll"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current time base mode.</Description>
            </Property>
            <Property>
               <Name>TimeReference</Name>
               <Location>Timebase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	propertyValue = comobj.TimeReference;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	comobj.TimeReference = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTimebaseReferenceLeft" Value="AgInfiniiVisionTimebaseReferenceLeft"/>
                     <Enum Name="AgInfiniiVisionTimebaseReferenceCenter" Value="AgInfiniiVisionTimebaseReferenceCenter"/>
                     <Enum Name="AgInfiniiVisionTimebaseReferenceRight" Value="AgInfiniiVisionTimebaseReferenceRight"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Time reference selection can be made to one division from the left side of the screen, to the center of the screen, or to one division from the right side of the screen</Description>
            </Property>
            <Property>
               <Name>VernierEnabled</Name>
               <Location>Timebase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	propertyValue = comobj.VernierEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	comobj.VernierEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Time base control's vernier.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TimebaseWindow</Name>
         <Description>IAgInfiniiVisionTimebaseWindow interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TimebaseWindow1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>HorizontalPosition</Name>
               <Location>TimebaseWindow</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	comobj = comobj.Window;
	propertyValue = comobj.HorizontalPosition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	comobj = comobj.Window;
	comobj.HorizontalPosition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Horizontal window position in the zoomed view of the main sweep.</Description>
            </Property>
            <Property>
               <Name>HorizontalScale</Name>
               <Location>TimebaseWindow</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	comobj = comobj.Window;
	propertyValue = comobj.HorizontalScale;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	comobj = comobj.Window;
	comobj.HorizontalScale = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Horizontal scale or seconds/division of the zoomed(delayed) window, its maximum value can be half of horizontal scale of Main Window</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>TimebaseWindow</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	comobj = comobj.Window;
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Timebase;
	comobj = comobj.Window;
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Full-scale horizontal time in seconds for the zoomed (delayed) window. The maximum value is one half of the horizontal time of main window.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Trigger</Name>
         <Description>IVI Scope class-compliant trigger interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Continuous</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Continuous;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Continuous = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope waits trigger holdoff seconds after a waveform acquisition is complete and then immediately enters the wait for trigger state without passing through the idle state.</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerCouplingAC" Value="AgInfiniiVisionTriggerCouplingAC"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingDC" Value="AgInfiniiVisionTriggerCouplingDC"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingHFReject" Value="AgInfiniiVisionTriggerCouplingHFReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingLFReject" Value="AgInfiniiVisionTriggerCouplingLFReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingNoiseReject" Value="AgInfiniiVisionTriggerCouplingNoiseReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingTV" Value="AgInfiniiVisionTriggerCouplingTV"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>How the oscilloscope couples the trigger source.</Description>
            </Property>
            <Property>
               <Name>HFRejectFilterEnabled</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.HFRejectFilterEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.HFRejectFilterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high frequency reject filter adds a 50 kHz low-pass filter in the trigger path to remove high frequency components from the trigger waveform.</Description>
            </Property>
            <Property>
               <Name>Holdoff</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Holdoff;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Holdoff = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time to wait after detecting a trigger before enabling the trigger subsystem again. The units are seconds.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Level;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage threshold for the trigger subsystem.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>Modifier</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Modifier;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Modifier = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerModifierNone" Value="AgInfiniiVisionTriggerModifierNone"/>
                     <Enum Name="AgInfiniiVisionTriggerModifierAuto" Value="AgInfiniiVisionTriggerModifierAuto"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Trigger sweep mode. The trigger modifier determines the oscilloscope's behavior in the absence of a trigger.</Description>
            </Property>
            <Property>
               <Name>NoiseRejectFilterEnabled</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.NoiseRejectFilterEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.NoiseRejectFilterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the noise reject filter. When the noise reject filter is on, the trigger circuitry is less sensitive to noise but may require a greater amplitude waveform to trigger the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Input Source for trigger operations. Source is dependent on Trigger Type. Set Trigger Type before setting source.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerTypeEdge" Value="AgInfiniiVisionTriggerTypeEdge"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeWidth" Value="AgInfiniiVisionTriggerTypeWidth"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeRunt" Value="AgInfiniiVisionTriggerTypeRunt"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeGlitch" Value="AgInfiniiVisionTriggerTypeGlitch"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeTV" Value="AgInfiniiVisionTriggerTypeTV"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeACLine" Value="AgInfiniiVisionTriggerTypeACLine"/>
                     <Enum Name="AgInfiniiVisionTriggerTypePattern" Value="AgInfiniiVisionTriggerTypePattern"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeDelay" Value="AgInfiniiVisionTriggerTypeDelay"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeEBurst" Value="AgInfiniiVisionTriggerTypeEBurst"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSHold" Value="AgInfiniiVisionTriggerTypeSHold"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeTransition" Value="AgInfiniiVisionTriggerTypeTransition"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSerialBus1" Value="AgInfiniiVisionTriggerTypeSerialBus1"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSerialBus2" Value="AgInfiniiVisionTriggerTypeSerialBus2"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeUSB" Value="AgInfiniiVisionTriggerTypeUSB"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeNone" Value="AgInfiniiVisionTriggerTypeNone"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeOR" Value="AgInfiniiVisionTriggerTypeOR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The kind of event that triggers the oscilloscope.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Type, Holdoff)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Type, double(Holdoff));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures trigger Type and Holdoff. Holdoff units are seconds.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger2</Name>
         <Description>IAgInfiniiVisionTrigger2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Continuous</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Continuous;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Continuous = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope waits trigger holdoff seconds after a waveform acquisition is complete and then immediately enters the wait for trigger state without passing through the idle state.</Description>
            </Property>
            <Property>
               <Name>Continuous</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Continuous;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Continuous = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope waits trigger holdoff seconds after a waveform acquisition is complete and then immediately enters the wait for trigger state without passing through the idle state.</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerCouplingAC" Value="AgInfiniiVisionTriggerCouplingAC"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingDC" Value="AgInfiniiVisionTriggerCouplingDC"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingHFReject" Value="AgInfiniiVisionTriggerCouplingHFReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingLFReject" Value="AgInfiniiVisionTriggerCouplingLFReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingNoiseReject" Value="AgInfiniiVisionTriggerCouplingNoiseReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingTV" Value="AgInfiniiVisionTriggerCouplingTV"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>How the oscilloscope couples the trigger source.</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerCouplingAC" Value="AgInfiniiVisionTriggerCouplingAC"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingDC" Value="AgInfiniiVisionTriggerCouplingDC"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingHFReject" Value="AgInfiniiVisionTriggerCouplingHFReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingLFReject" Value="AgInfiniiVisionTriggerCouplingLFReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingNoiseReject" Value="AgInfiniiVisionTriggerCouplingNoiseReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingTV" Value="AgInfiniiVisionTriggerCouplingTV"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>How the oscilloscope couples the trigger source.</Description>
            </Property>
            <Property>
               <Name>HFRejectFilterEnabled</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.HFRejectFilterEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.HFRejectFilterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high frequency reject filter adds a 50 kHz low-pass filter in the trigger path to remove high frequency components from the trigger waveform.</Description>
            </Property>
            <Property>
               <Name>HFRejectFilterEnabled</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.HFRejectFilterEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.HFRejectFilterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high frequency reject filter adds a 50 kHz low-pass filter in the trigger path to remove high frequency components from the trigger waveform.</Description>
            </Property>
            <Property>
               <Name>Holdoff</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Holdoff;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Holdoff = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time to wait after detecting a trigger before enabling the trigger subsystem again. The units are seconds.</Description>
            </Property>
            <Property>
               <Name>Holdoff</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Holdoff;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Holdoff = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time to wait after detecting a trigger before enabling the trigger subsystem again. The units are seconds.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Level;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage threshold for the trigger subsystem.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Level;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage threshold for the trigger subsystem.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>Modifier</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Modifier;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Modifier = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerModifierNone" Value="AgInfiniiVisionTriggerModifierNone"/>
                     <Enum Name="AgInfiniiVisionTriggerModifierAuto" Value="AgInfiniiVisionTriggerModifierAuto"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Trigger sweep mode. The trigger modifier determines the oscilloscope's behavior in the absence of a trigger.</Description>
            </Property>
            <Property>
               <Name>Modifier</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Modifier;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Modifier = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerModifierNone" Value="AgInfiniiVisionTriggerModifierNone"/>
                     <Enum Name="AgInfiniiVisionTriggerModifierAuto" Value="AgInfiniiVisionTriggerModifierAuto"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Trigger sweep mode. The trigger modifier determines the oscilloscope's behavior in the absence of a trigger.</Description>
            </Property>
            <Property>
               <Name>NoiseRejectFilterEnabled</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.NoiseRejectFilterEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.NoiseRejectFilterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the noise reject filter. When the noise reject filter is on, the trigger circuitry is less sensitive to noise but may require a greater amplitude waveform to trigger the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>NoiseRejectFilterEnabled</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.NoiseRejectFilterEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.NoiseRejectFilterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the noise reject filter. When the noise reject filter is on, the trigger circuitry is less sensitive to noise but may require a greater amplitude waveform to trigger the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Input Source for trigger operations. Source is dependent on Trigger Type. Set Trigger Type before setting source.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Input Source for trigger operations. Source is dependent on Trigger Type. Set Trigger Type before setting source.</Description>
            </Property>
            <Property>
               <Name>Trigger2Type</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerTypeEdge" Value="AgInfiniiVisionTriggerTypeEdge"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeWidth" Value="AgInfiniiVisionTriggerTypeWidth"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeRunt" Value="AgInfiniiVisionTriggerTypeRunt"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeGlitch" Value="AgInfiniiVisionTriggerTypeGlitch"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeTV" Value="AgInfiniiVisionTriggerTypeTV"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeACLine" Value="AgInfiniiVisionTriggerTypeACLine"/>
                     <Enum Name="AgInfiniiVisionTriggerTypePattern" Value="AgInfiniiVisionTriggerTypePattern"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeDelay" Value="AgInfiniiVisionTriggerTypeDelay"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeEBurst" Value="AgInfiniiVisionTriggerTypeEBurst"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSHold" Value="AgInfiniiVisionTriggerTypeSHold"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeTransition" Value="AgInfiniiVisionTriggerTypeTransition"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSerialBus1" Value="AgInfiniiVisionTriggerTypeSerialBus1"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSerialBus2" Value="AgInfiniiVisionTriggerTypeSerialBus2"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeUSB" Value="AgInfiniiVisionTriggerTypeUSB"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeNone" Value="AgInfiniiVisionTriggerTypeNone"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeOR" Value="AgInfiniiVisionTriggerTypeOR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The kind of event that triggers the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>Trigger2Type</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerTypeEdge" Value="AgInfiniiVisionTriggerTypeEdge"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeWidth" Value="AgInfiniiVisionTriggerTypeWidth"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeRunt" Value="AgInfiniiVisionTriggerTypeRunt"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeGlitch" Value="AgInfiniiVisionTriggerTypeGlitch"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeTV" Value="AgInfiniiVisionTriggerTypeTV"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeACLine" Value="AgInfiniiVisionTriggerTypeACLine"/>
                     <Enum Name="AgInfiniiVisionTriggerTypePattern" Value="AgInfiniiVisionTriggerTypePattern"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeDelay" Value="AgInfiniiVisionTriggerTypeDelay"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeEBurst" Value="AgInfiniiVisionTriggerTypeEBurst"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSHold" Value="AgInfiniiVisionTriggerTypeSHold"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeTransition" Value="AgInfiniiVisionTriggerTypeTransition"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSerialBus1" Value="AgInfiniiVisionTriggerTypeSerialBus1"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSerialBus2" Value="AgInfiniiVisionTriggerTypeSerialBus2"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeUSB" Value="AgInfiniiVisionTriggerTypeUSB"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeNone" Value="AgInfiniiVisionTriggerTypeNone"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeOR" Value="AgInfiniiVisionTriggerTypeOR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The kind of event that triggers the oscilloscope.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Type, Holdoff)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Type, double(Holdoff));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures trigger Type and Holdoff. Holdoff units are seconds.</Description>
            </Method>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Type, Holdoff)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Type, double(Holdoff));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures trigger Type and Holdoff. Holdoff units are seconds.</Description>
            </Method>
            <Method>
               <Name>ForceTrigger</Name>
               <Location>Trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ForceTrigger(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
feature('COM_SafeArraySingleDim',1);
comobj.ForceTrigger();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method causes an acquisition to be captured even though the trigger condition has not been met. This command is equivalent to the front panel [Force Trigger] key.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3</Name>
         <Description>IAgInfiniiVisionTrigger3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger31" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Continuous</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Continuous;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Continuous = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope waits trigger holdoff seconds after a waveform acquisition is complete and then immediately enters the wait for trigger state without passing through the idle state.</Description>
            </Property>
            <Property>
               <Name>Continuous</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Continuous;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Continuous = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope waits trigger holdoff seconds after a waveform acquisition is complete and then immediately enters the wait for trigger state without passing through the idle state.</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerCouplingAC" Value="AgInfiniiVisionTriggerCouplingAC"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingDC" Value="AgInfiniiVisionTriggerCouplingDC"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingHFReject" Value="AgInfiniiVisionTriggerCouplingHFReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingLFReject" Value="AgInfiniiVisionTriggerCouplingLFReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingNoiseReject" Value="AgInfiniiVisionTriggerCouplingNoiseReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingTV" Value="AgInfiniiVisionTriggerCouplingTV"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>How the oscilloscope couples the trigger source.</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerCouplingAC" Value="AgInfiniiVisionTriggerCouplingAC"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingDC" Value="AgInfiniiVisionTriggerCouplingDC"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingHFReject" Value="AgInfiniiVisionTriggerCouplingHFReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingLFReject" Value="AgInfiniiVisionTriggerCouplingLFReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingNoiseReject" Value="AgInfiniiVisionTriggerCouplingNoiseReject"/>
                     <Enum Name="AgInfiniiVisionTriggerCouplingTV" Value="AgInfiniiVisionTriggerCouplingTV"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>How the oscilloscope couples the trigger source.</Description>
            </Property>
            <Property>
               <Name>HFRejectFilterEnabled</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.HFRejectFilterEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.HFRejectFilterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high frequency reject filter adds a 50 kHz low-pass filter in the trigger path to remove high frequency components from the trigger waveform.</Description>
            </Property>
            <Property>
               <Name>HFRejectFilterEnabled</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.HFRejectFilterEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.HFRejectFilterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high frequency reject filter adds a 50 kHz low-pass filter in the trigger path to remove high frequency components from the trigger waveform.</Description>
            </Property>
            <Property>
               <Name>Holdoff</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Holdoff;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Holdoff = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time to wait after detecting a trigger before enabling the trigger subsystem again. The units are seconds.</Description>
            </Property>
            <Property>
               <Name>Holdoff</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Holdoff;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Holdoff = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time to wait after detecting a trigger before enabling the trigger subsystem again. The units are seconds.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Level;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage threshold for the trigger subsystem.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Level;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage threshold for the trigger subsystem.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>Modifier</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Modifier;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Modifier = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerModifierNone" Value="AgInfiniiVisionTriggerModifierNone"/>
                     <Enum Name="AgInfiniiVisionTriggerModifierAuto" Value="AgInfiniiVisionTriggerModifierAuto"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Trigger sweep mode. The trigger modifier determines the oscilloscope's behavior in the absence of a trigger.</Description>
            </Property>
            <Property>
               <Name>Modifier</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Modifier;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Modifier = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerModifierNone" Value="AgInfiniiVisionTriggerModifierNone"/>
                     <Enum Name="AgInfiniiVisionTriggerModifierAuto" Value="AgInfiniiVisionTriggerModifierAuto"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Trigger sweep mode. The trigger modifier determines the oscilloscope's behavior in the absence of a trigger.</Description>
            </Property>
            <Property>
               <Name>NoiseRejectFilterEnabled</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.NoiseRejectFilterEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.NoiseRejectFilterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the noise reject filter. When the noise reject filter is on, the trigger circuitry is less sensitive to noise but may require a greater amplitude waveform to trigger the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>NoiseRejectFilterEnabled</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.NoiseRejectFilterEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.NoiseRejectFilterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables the noise reject filter. When the noise reject filter is on, the trigger circuitry is less sensitive to noise but may require a greater amplitude waveform to trigger the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Input Source for trigger operations. Source is dependent on Trigger Type. Set Trigger Type before setting source.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Input Source for trigger operations. Source is dependent on Trigger Type. Set Trigger Type before setting source.</Description>
            </Property>
            <Property>
               <Name>Trigger3Type</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerTypeEdge" Value="AgInfiniiVisionTriggerTypeEdge"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeWidth" Value="AgInfiniiVisionTriggerTypeWidth"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeRunt" Value="AgInfiniiVisionTriggerTypeRunt"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeGlitch" Value="AgInfiniiVisionTriggerTypeGlitch"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeTV" Value="AgInfiniiVisionTriggerTypeTV"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeACLine" Value="AgInfiniiVisionTriggerTypeACLine"/>
                     <Enum Name="AgInfiniiVisionTriggerTypePattern" Value="AgInfiniiVisionTriggerTypePattern"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeDelay" Value="AgInfiniiVisionTriggerTypeDelay"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeEBurst" Value="AgInfiniiVisionTriggerTypeEBurst"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSHold" Value="AgInfiniiVisionTriggerTypeSHold"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeTransition" Value="AgInfiniiVisionTriggerTypeTransition"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSerialBus1" Value="AgInfiniiVisionTriggerTypeSerialBus1"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSerialBus2" Value="AgInfiniiVisionTriggerTypeSerialBus2"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeUSB" Value="AgInfiniiVisionTriggerTypeUSB"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeNone" Value="AgInfiniiVisionTriggerTypeNone"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeOR" Value="AgInfiniiVisionTriggerTypeOR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The kind of event that triggers the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>Trigger3Type</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerTypeEdge" Value="AgInfiniiVisionTriggerTypeEdge"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeWidth" Value="AgInfiniiVisionTriggerTypeWidth"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeRunt" Value="AgInfiniiVisionTriggerTypeRunt"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeGlitch" Value="AgInfiniiVisionTriggerTypeGlitch"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeTV" Value="AgInfiniiVisionTriggerTypeTV"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeACLine" Value="AgInfiniiVisionTriggerTypeACLine"/>
                     <Enum Name="AgInfiniiVisionTriggerTypePattern" Value="AgInfiniiVisionTriggerTypePattern"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeDelay" Value="AgInfiniiVisionTriggerTypeDelay"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeEBurst" Value="AgInfiniiVisionTriggerTypeEBurst"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSHold" Value="AgInfiniiVisionTriggerTypeSHold"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeTransition" Value="AgInfiniiVisionTriggerTypeTransition"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSerialBus1" Value="AgInfiniiVisionTriggerTypeSerialBus1"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeSerialBus2" Value="AgInfiniiVisionTriggerTypeSerialBus2"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeUSB" Value="AgInfiniiVisionTriggerTypeUSB"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeNone" Value="AgInfiniiVisionTriggerTypeNone"/>
                     <Enum Name="AgInfiniiVisionTriggerTypeOR" Value="AgInfiniiVisionTriggerTypeOR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The kind of event that triggers the oscilloscope.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>AutoSetup</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>It automatically sets the trigger levels of all displayed analog channels to their waveforms' 50% values.</Description>
            </Method>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Type, Holdoff)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Type, double(Holdoff));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures trigger Type and Holdoff. Holdoff units are seconds.</Description>
            </Method>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Type, Holdoff)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Type, double(Holdoff));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures trigger Type and Holdoff. Holdoff units are seconds.</Description>
            </Method>
            <Method>
               <Name>ForceTrigger</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ForceTrigger(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
feature('COM_SafeArraySingleDim',1);
comobj.ForceTrigger();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method causes an acquisition to be captured even though the trigger condition has not been met. This command is equivalent to the front panel [Force Trigger] key.</Description>
            </Method>
            <Method>
               <Name>ForceTrigger</Name>
               <Location>Trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ForceTrigger(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
feature('COM_SafeArraySingleDim',1);
comobj.ForceTrigger();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method causes an acquisition to be captured even though the trigger condition has not been met. This command is equivalent to the front panel [Force Trigger] key.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3AcLine</Name>
         <Description>IAgInfiniiVisionTriggerAcLine interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3AcLine1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>Trigger3AcLine</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.AcLine;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.AcLine;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionACLineSlopePositive" Value="AgInfiniiVisionACLineSlopePositive"/>
                     <Enum Name="AgInfiniiVisionACLineSlopeNegative" Value="AgInfiniiVisionACLineSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The slope of the zero crossing upon which the scope triggers.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Trigger3Delay</Name>
         <Description>IAgInfiniiVisionTrigger2Delay interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Delay1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ArmingSlope</Name>
               <Location>Trigger3Delay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Delay;
	propertyValue = comobj.ArmingSlope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Delay;
	comobj.ArmingSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerDelaySlopeNegative" Value="AgInfiniiVisionTriggerDelaySlopeNegative"/>
                     <Enum Name="AgInfiniiVisionTriggerDelaySlopePositive" Value="AgInfiniiVisionTriggerDelaySlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies rising (Positive) or falling (Negative) for the arming edge in the Edge Then Edge trigger.</Description>
            </Property>
            <Property>
               <Name>ArmingSource</Name>
               <Location>Trigger3Delay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Delay;
	propertyValue = comobj.ArmingSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Delay;
	comobj.ArmingSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the input used for the arming edge in the Edge Then Edge trigger.</Description>
            </Property>
            <Property>
               <Name>EdgeCount</Name>
               <Location>Trigger3Delay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Delay;
	propertyValue = comobj.EdgeCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Delay;
	comobj.EdgeCount = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets/Gets the Nth edge of the trigger source to trigger on</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>Trigger3Delay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Delay;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Delay;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerDelaySlopeNegative" Value="AgInfiniiVisionTriggerDelaySlopeNegative"/>
                     <Enum Name="AgInfiniiVisionTriggerDelaySlopePositive" Value="AgInfiniiVisionTriggerDelaySlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies rising (Positive) or falling (Negative) for the trigger edge in the Edge Then Edge trigger.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>Trigger3Delay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Delay;
	propertyValue = comobj.Time;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Delay;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets/Gets the delay time between the arming edge and the trigger edge in the Edge Then Edge trigger. The time is in seconds and must be from 4 ns to 10 s.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3Delay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, TriggerSource, TriggerSlope, EdgeCount, ArmingSource, ArmingSlope, DelayTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Delay;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(TriggerSource, TriggerSlope, int32(EdgeCount), ArmingSource, ArmingSlope, double(DelayTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the trigger source, trigger slope, edge count, arming source, arming slope and the delay time parameters for the Edge Then Edge trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3Edge</Name>
         <Description>IVI Scope class-compliant edge trigger interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Edge1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>RejectFilterType</Name>
               <Location>Trigger3Edge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Edge;
	propertyValue = comobj.RejectFilterType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Edge;
	comobj.RejectFilterType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerEdgeRejectFilterTypeHighFrequency" Value="AgInfiniiVisionTriggerEdgeRejectFilterTypeHighFrequency"/>
                     <Enum Name="AgInfiniiVisionTriggerEdgeRejectFilterTypeLowFrequency" Value="AgInfiniiVisionTriggerEdgeRejectFilterTypeLowFrequency"/>
                     <Enum Name="AgInfiniiVisionTriggerEdgeRejectFilterTypeOff" Value="AgInfiniiVisionTriggerEdgeRejectFilterTypeOff"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable the type of reject filter.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>Trigger3Edge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Edge;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Edge;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerSlopePositive" Value="AgInfiniiVisionTriggerSlopePositive"/>
                     <Enum Name="AgInfiniiVisionTriggerSlopeNegative" Value="AgInfiniiVisionTriggerSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionTriggerSlopeEither" Value="AgInfiniiVisionTriggerSlopeEither"/>
                     <Enum Name="AgInfiniiVisionTriggerSlopeAlternate" Value="AgInfiniiVisionTriggerSlopeAlternate"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The slope, a rising or a falling edge, that triggers the oscilloscope.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3Edge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Level, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Edge;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(Level), Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the conditions for edge trigger. An edge trigger occurs when the trigger source signal passes through the trigger level with the specified slope.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3EdgeBurst</Name>
         <Description>IAgInfiniiVisionTrigger2EdgeBurst interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3EdgeBurst1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>IdleTime</Name>
               <Location>Trigger3EdgeBurst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.EdgeBurst;
	propertyValue = comobj.IdleTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.EdgeBurst;
	comobj.IdleTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets/Gets the Nth edge in a burst idle resource (in seconds from 10 ns to 10 s). The timer is used to set the minimum time before the next burst.</Description>
            </Property>
            <Property>
               <Name>NthEdge</Name>
               <Location>Trigger3EdgeBurst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.EdgeBurst;
	propertyValue = comobj.NthEdge;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.EdgeBurst;
	comobj.NthEdge = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets/Gets the Nth edge at burst counter resource. The edge counter is used in the trigger stage to determine which edge in a burst will generate a trigger.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>Trigger3EdgeBurst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.EdgeBurst;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.EdgeBurst;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerEdgeBurstSlopeNegative" Value="AgInfiniiVisionTriggerEdgeBurstSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionTriggerEdgeBurstSlopePositive" Value="AgInfiniiVisionTriggerEdgeBurstSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the rising edge (Positive) or falling edge (Negative) of the Nth edge in a burst will generate a trigger.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3EdgeBurst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Slope, IdleTime, NthEdge)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.EdgeBurst;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, Slope, double(IdleTime), int32(NthEdge));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the trigger source, trigger slope, idle time and edge count parameters for the Nth Edge Burst trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3Glitch</Name>
         <Description>IVI Scope class-compliant glitch trigger interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Glitch1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Condition</Name>
               <Location>Trigger3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Glitch;
	propertyValue = comobj.Condition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Glitch;
	comobj.Condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionGlitchConditionLessThan" Value="AgInfiniiVisionGlitchConditionLessThan"/>
                     <Enum Name="AgInfiniiVisionGlitchConditionGreaterThan" Value="AgInfiniiVisionGlitchConditionGreaterThan"/>
                     <Enum Name="AgInfiniiVisionGlitchConditionRange" Value="AgInfiniiVisionGlitchConditionRange"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Glitch condition determines whether it glitches less than or greater than the specified duration.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>Trigger3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Glitch;
	propertyValue = comobj.Level;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Glitch;
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Trigger level voltage for the active pulse width trigger.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>Trigger3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Glitch;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Glitch;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionGlitchPolarityPositive" Value="AgInfiniiVisionGlitchPolarityPositive"/>
                     <Enum Name="AgInfiniiVisionGlitchPolarityNegative" Value="AgInfiniiVisionGlitchPolarityNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the glitch that triggers the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>Width</Name>
               <Location>Trigger3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Glitch;
	propertyValue = comobj.Width;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Glitch;
	comobj.Width = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Pulse width duration for the selected source. The units are seconds. Set condition to either GreaterThan or LessThan, prior to setting Width.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Level, Width, Polarity, Condition)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Glitch;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(Level), double(Width), Polarity, Condition);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configure the glitch trigger Source, Level, Width, Polarity, and Condition. A glitch trigger occurs when the edge of a pulse that matches the Width and Polarity crosses the specified Level (in Volts).</Description>
            </Method>
            <Method>
               <Name>GetRange</Name>
               <Location>Trigger3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [LowerLimit, UpperLimit] = GetRange(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Glitch;
feature('COM_SafeArraySingleDim',1);
[LowerLimit, UpperLimit] = comobj.GetRange(0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>READ ONLY- Gets the pulse width duration time for trigger source.</Description>
            </Method>
            <Method>
               <Name>SetRange</Name>
               <Location>Trigger3Glitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetRange(obj, LowerLimit, UpperLimit)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Glitch;
feature('COM_SafeArraySingleDim',1);
comobj.SetRange(double(LowerLimit), double(UpperLimit));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Pulse width duration for the selected source.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3OR</Name>
         <Description>IAgInfiniiVisionTrigger2OR interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3OR1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>EdgePattern</Name>
               <Location>Trigger3OR</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.OR;
	propertyValue = comobj.EdgePattern;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.OR;
	comobj.EdgePattern = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the edges to include in the OR'ed edge trigger.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Trigger3Pattern</Name>
         <Description>IAgInfiniiVisionTriggerPattern interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Pattern1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AnalogPattern</Name>
               <Location>Trigger3Pattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Pattern;
	propertyValue = comobj.AnalogPattern;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Pattern;
	comobj.AnalogPattern = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The analog channel pattern. Only permissible character starting left side of the string will be accepted, rest of the string will be truncated.</Description>
            </Property>
            <Property>
               <Name>Condition</Name>
               <Location>Trigger3Pattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Pattern;
	propertyValue = comobj.Condition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Pattern;
	comobj.Condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionPatternMatchingModeEnter" Value="AgInfiniiVisionPatternMatchingModeEnter"/>
                     <Enum Name="AgInfiniiVisionPatternMatchingModeGreaterThan" Value="AgInfiniiVisionPatternMatchingModeGreaterThan"/>
                     <Enum Name="AgInfiniiVisionPatternMatchingModeLessThan" Value="AgInfiniiVisionPatternMatchingModeLessThan"/>
                     <Enum Name="AgInfiniiVisionPatternMatchingModeInRange" Value="AgInfiniiVisionPatternMatchingModeInRange"/>
                     <Enum Name="AgInfiniiVisionPatternMatchingModeOutRange" Value="AgInfiniiVisionPatternMatchingModeOutRange"/>
                     <Enum Name="AgInfiniiVisionPatternMatchingModeTimeout" Value="AgInfiniiVisionPatternMatchingModeTimeout"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The pattern matching condition. This attribute specifies when the trigger event occurs with respect to the pattern, either trigger on entering the specified pattern or exiting the specified pattern.</Description>
            </Property>
            <Property>
               <Name>DigitalPattern</Name>
               <Location>Trigger3Pattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Pattern;
	propertyValue = comobj.DigitalPattern;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Pattern;
	comobj.DigitalPattern = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The digital channel pattern. Only permissible character starting left side of the string will be accepted, rest of the string will be truncated.</Description>
            </Property>
            <Property>
               <Name>MaxDuration</Name>
               <Location>Trigger3Pattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Pattern;
	propertyValue = comobj.MaxDuration;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Pattern;
	comobj.MaxDuration = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Maximum duration for the defined pattern when pattern condition is set to LESSthan. The units are seconds.</Description>
            </Property>
            <Property>
               <Name>MinDuration</Name>
               <Location>Trigger3Pattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Pattern;
	propertyValue = comobj.MinDuration;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Pattern;
	comobj.MinDuration = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Minimum duration for the defined pattern when pattern condition is set to GREaterthan. The units are seconds. It can also specify the timeout value when the pattern condition is set to TIMeout.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3Pattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, AnalogPattern, DigitalPattern, Condition)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Pattern;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(AnalogPattern, DigitalPattern, Condition);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the pattern trigger</Description>
            </Method>
            <Method>
               <Name>GetRange</Name>
               <Location>Trigger3Pattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [LessThanTime, GreaterThanTime] = GetRange(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Pattern;
feature('COM_SafeArraySingleDim',1);
[LessThanTime, GreaterThanTime] = comobj.GetRange(0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the duration time for the defined pattern.</Description>
            </Method>
            <Method>
               <Name>SetRange</Name>
               <Location>Trigger3Pattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetRange(obj, LessThanTime, GreaterThanTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Pattern;
feature('COM_SafeArraySingleDim',1);
comobj.SetRange(double(LessThanTime), double(GreaterThanTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Duration for the defined pattern when the pattern condition is set to INRange or OUTRange</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3Runt</Name>
         <Description>IVI Scope class-compliant runt trigger interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Runt1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Condition</Name>
               <Location>Trigger3Runt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Runt;
	propertyValue = comobj.Condition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Runt;
	comobj.Condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerRuntConditionNone" Value="AgInfiniiVisionTriggerRuntConditionNone"/>
                     <Enum Name="AgInfiniiVisionTriggerRuntConditionLessThan" Value="AgInfiniiVisionTriggerRuntConditionLessThan"/>
                     <Enum Name="AgInfiniiVisionTriggerRuntConditionGreaterThan" Value="AgInfiniiVisionTriggerRuntConditionGreaterThan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Condition used for specifying runt pulse widths.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>Trigger3Runt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Runt;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Runt;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionRuntPolarityPositive" Value="AgInfiniiVisionRuntPolarityPositive"/>
                     <Enum Name="AgInfiniiVisionRuntPolarityNegative" Value="AgInfiniiVisionRuntPolarityNegative"/>
                     <Enum Name="AgInfiniiVisionRuntPolarityEither" Value="AgInfiniiVisionRuntPolarityEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the runt that triggers the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>QualifierTime</Name>
               <Location>Trigger3Runt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Runt;
	propertyValue = comobj.QualifierTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Runt;
	comobj.QualifierTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Time used for triggering on runt pulses whose width is greater than or less than the specified time value.</Description>
            </Property>
            <Property>
               <Name>ThresholdHigh</Name>
               <Location>Trigger3Runt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Runt;
	propertyValue = comobj.ThresholdHigh;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Runt;
	comobj.ThresholdHigh = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high threshold the oscilloscope uses for runt triggering.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>ThresholdLow</Name>
               <Location>Trigger3Runt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Runt;
	propertyValue = comobj.ThresholdLow;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Runt;
	comobj.ThresholdLow = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The low threshold the oscilloscope uses for runt triggering.  The units are volts.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3Runt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, ThresholdLow, ThresholdHigh, Polarity)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Runt;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(ThresholdLow), double(ThresholdHigh), Polarity);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the runt trigger Source, ThresholdLow, ThresholdHigh, and Polarity. A runt trigger occurs when the trigger signal crosses one of the runt thresholds twice without crossing the other runt threshold.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3SetupAndHold</Name>
         <Description>IAgInfiniiVisionTrigger2SetupAndHold interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3SetupAndHold1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ClockSource</Name>
               <Location>Trigger3SetupAndHold</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.SetupAndHold;
	propertyValue = comobj.ClockSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.SetupAndHold;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the channel used to produce the trigger.</Description>
            </Property>
            <Property>
               <Name>DataSource</Name>
               <Location>Trigger3SetupAndHold</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.SetupAndHold;
	propertyValue = comobj.DataSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.SetupAndHold;
	comobj.DataSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the channel used to produce the trigger.</Description>
            </Property>
            <Property>
               <Name>HoldTime</Name>
               <Location>Trigger3SetupAndHold</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.SetupAndHold;
	propertyValue = comobj.HoldTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.SetupAndHold;
	comobj.HoldTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets/Gets the hold time.</Description>
            </Property>
            <Property>
               <Name>SetupTime</Name>
               <Location>Trigger3SetupAndHold</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.SetupAndHold;
	propertyValue = comobj.SetupTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.SetupAndHold;
	comobj.SetupTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets/Gets the setup time.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>Trigger3SetupAndHold</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.SetupAndHold;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.SetupAndHold;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerSetupAndHoldSlopeNegative" Value="AgInfiniiVisionTriggerSetupAndHoldSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionTriggerSetupAndHoldSlopePositive" Value="AgInfiniiVisionTriggerSetupAndHoldSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the clock signal's active edge.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3SetupAndHold</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, ClockSource, Slope, DataSource, SetupTime, HoldTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.SetupAndHold;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(ClockSource, Slope, DataSource, double(SetupTime), double(HoldTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the clock source, slope, data source, setup time and hold time parameters for the Setup and Hold trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3Transition</Name>
         <Description>IAgInfiniiVisionTrigger2Transition interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Transition1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Condition</Name>
               <Location>Trigger3Transition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Transition;
	propertyValue = comobj.Condition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Transition;
	comobj.Condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerTransitionConditionGreaterThan" Value="AgInfiniiVisionTriggerTransitionConditionGreaterThan"/>
                     <Enum Name="AgInfiniiVisionTriggerTransitionConditionLessThan" Value="AgInfiniiVisionTriggerTransitionConditionLessThan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether you are looking for rise/fall times greater than or less than a certain time value. The time value is set using the QualifierTime property.</Description>
            </Property>
            <Property>
               <Name>QualifierTime</Name>
               <Location>Trigger3Transition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Transition;
	propertyValue = comobj.QualifierTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Transition;
	comobj.QualifierTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the time value for rise/fall time triggers. You also use the Condition property to specify whether you are triggering on times greater than or less than this time value.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>Trigger3Transition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Transition;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Transition;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerTransitionSlopeNegative" Value="AgInfiniiVisionTriggerTransitionSlopeNegative"/>
                     <Enum Name="AgInfiniiVisionTriggerTransitionSlopePositive" Value="AgInfiniiVisionTriggerTransitionSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies a Positive rising edge or a Negative falling edge.</Description>
            </Property>
            <Property>
               <Name>ThresholdHigh</Name>
               <Location>Trigger3Transition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Transition;
	propertyValue = comobj.ThresholdHigh;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Transition;
	comobj.ThresholdHigh = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high threshold the oscilloscope uses for the transition trigger.  The units are volts.</Description>
            </Property>
            <Property>
               <Name>ThresholdLow</Name>
               <Location>Trigger3Transition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Transition;
	propertyValue = comobj.ThresholdLow;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Transition;
	comobj.ThresholdLow = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The low threshold the oscilloscope uses for the transition trigger.  The units are volts.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3Transition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Slope, Condition, QualifierTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Transition;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, Slope, Condition, double(QualifierTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the source, slope, condition and qualifier time parameters for the Transition trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3TV</Name>
         <Description>IAgInfiniiVisionTriggerTV interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3TV1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Event</Name>
               <Location>Trigger3TV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV;
	propertyValue = comobj.Event;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV;
	comobj.Event = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTVTriggerEventField1" Value="AgInfiniiVisionTVTriggerEventField1"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventField2" Value="AgInfiniiVisionTVTriggerEventField2"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventAnyField" Value="AgInfiniiVisionTVTriggerEventAnyField"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventAnyLine" Value="AgInfiniiVisionTVTriggerEventAnyLine"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventLineNumber" Value="AgInfiniiVisionTVTriggerEventLineNumber"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventLineNumberAlternate" Value="AgInfiniiVisionTVTriggerEventLineNumberAlternate"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventLineNumberVertical" Value="AgInfiniiVisionTVTriggerEventLineNumberVertical"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventVertical" Value="AgInfiniiVisionTVTriggerEventVertical"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The TV trigger mode and field.</Description>
            </Property>
            <Property>
               <Name>LineNumber</Name>
               <Location>Trigger3TV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV;
	propertyValue = comobj.LineNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV;
	comobj.LineNumber = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The Line number which allows triggering on a specific line of video. The line number limit varies with the signal format and event.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>Trigger3TV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTVTriggerPolarityPositive" Value="AgInfiniiVisionTVTriggerPolarityPositive"/>
                     <Enum Name="AgInfiniiVisionTVTriggerPolarityNegative" Value="AgInfiniiVisionTVTriggerPolarityNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the TV that triggers the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>SignalFormat</Name>
               <Location>Trigger3TV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV;
	propertyValue = comobj.SignalFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV;
	comobj.SignalFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTVSignalFormatNTSC" Value="AgInfiniiVisionTVSignalFormatNTSC"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatPAL" Value="AgInfiniiVisionTVSignalFormatPAL"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatSECAM" Value="AgInfiniiVisionTVSignalFormatSECAM"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatPALM" Value="AgInfiniiVisionTVSignalFormatPALM"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatGeneric" Value="AgInfiniiVisionTVSignalFormatGeneric"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP480" Value="AgInfiniiVisionTVSignalFormatP480"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatI1080" Value="AgInfiniiVisionTVSignalFormatI1080"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP720" Value="AgInfiniiVisionTVSignalFormatP720"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP1080" Value="AgInfiniiVisionTVSignalFormatP1080"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP1080L25HZ" Value="AgInfiniiVisionTVSignalFormatP1080L25HZ"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP1080L50HZ" Value="AgInfiniiVisionTVSignalFormatP1080L50HZ"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP1080L60HZ" Value="AgInfiniiVisionTVSignalFormatP1080L60HZ"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatI1080L60HZ" Value="AgInfiniiVisionTVSignalFormatI1080L60HZ"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The format of TV signal on which the oscilloscope triggers. Currently, only NTSC, PAL, PAL-M and SECAM are supported.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3TV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, SignalFormat, Event, Polarity)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.TV;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, SignalFormat, Event, Polarity);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the TV Trigger parameters.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3TV2</Name>
         <Description>IAgInfiniiVisionTriggerTV2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3TV21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Event</Name>
               <Location>Trigger3TV2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	propertyValue = comobj.Event;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj.Event = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTVTriggerEventField1" Value="AgInfiniiVisionTVTriggerEventField1"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventField2" Value="AgInfiniiVisionTVTriggerEventField2"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventAnyField" Value="AgInfiniiVisionTVTriggerEventAnyField"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventAnyLine" Value="AgInfiniiVisionTVTriggerEventAnyLine"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventLineNumber" Value="AgInfiniiVisionTVTriggerEventLineNumber"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventLineNumberAlternate" Value="AgInfiniiVisionTVTriggerEventLineNumberAlternate"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventLineNumberVertical" Value="AgInfiniiVisionTVTriggerEventLineNumberVertical"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventVertical" Value="AgInfiniiVisionTVTriggerEventVertical"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The TV trigger mode and field.</Description>
            </Property>
            <Property>
               <Name>Event</Name>
               <Location>Trigger3TV2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	propertyValue = comobj.Event;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj.Event = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTVTriggerEventField1" Value="AgInfiniiVisionTVTriggerEventField1"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventField2" Value="AgInfiniiVisionTVTriggerEventField2"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventAnyField" Value="AgInfiniiVisionTVTriggerEventAnyField"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventAnyLine" Value="AgInfiniiVisionTVTriggerEventAnyLine"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventLineNumber" Value="AgInfiniiVisionTVTriggerEventLineNumber"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventLineNumberAlternate" Value="AgInfiniiVisionTVTriggerEventLineNumberAlternate"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventLineNumberVertical" Value="AgInfiniiVisionTVTriggerEventLineNumberVertical"/>
                     <Enum Name="AgInfiniiVisionTVTriggerEventVertical" Value="AgInfiniiVisionTVTriggerEventVertical"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The TV trigger mode and field.</Description>
            </Property>
            <Property>
               <Name>LineNumber</Name>
               <Location>Trigger3TV2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	propertyValue = comobj.LineNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj.LineNumber = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The Line number which allows triggering on a specific line of video. The line number limit varies with the signal format and event.</Description>
            </Property>
            <Property>
               <Name>LineNumber</Name>
               <Location>Trigger3TV2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	propertyValue = comobj.LineNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj.LineNumber = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The Line number which allows triggering on a specific line of video. The line number limit varies with the signal format and event.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>Trigger3TV2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTVTriggerPolarityPositive" Value="AgInfiniiVisionTVTriggerPolarityPositive"/>
                     <Enum Name="AgInfiniiVisionTVTriggerPolarityNegative" Value="AgInfiniiVisionTVTriggerPolarityNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the TV that triggers the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>Trigger3TV2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTVTriggerPolarityPositive" Value="AgInfiniiVisionTVTriggerPolarityPositive"/>
                     <Enum Name="AgInfiniiVisionTVTriggerPolarityNegative" Value="AgInfiniiVisionTVTriggerPolarityNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the TV that triggers the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>SignalFormat</Name>
               <Location>Trigger3TV2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	propertyValue = comobj.SignalFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj.SignalFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTVSignalFormatNTSC" Value="AgInfiniiVisionTVSignalFormatNTSC"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatPAL" Value="AgInfiniiVisionTVSignalFormatPAL"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatSECAM" Value="AgInfiniiVisionTVSignalFormatSECAM"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatPALM" Value="AgInfiniiVisionTVSignalFormatPALM"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatGeneric" Value="AgInfiniiVisionTVSignalFormatGeneric"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP480" Value="AgInfiniiVisionTVSignalFormatP480"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatI1080" Value="AgInfiniiVisionTVSignalFormatI1080"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP720" Value="AgInfiniiVisionTVSignalFormatP720"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP1080" Value="AgInfiniiVisionTVSignalFormatP1080"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP1080L25HZ" Value="AgInfiniiVisionTVSignalFormatP1080L25HZ"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP1080L50HZ" Value="AgInfiniiVisionTVSignalFormatP1080L50HZ"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP1080L60HZ" Value="AgInfiniiVisionTVSignalFormatP1080L60HZ"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatI1080L60HZ" Value="AgInfiniiVisionTVSignalFormatI1080L60HZ"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The format of TV signal on which the oscilloscope triggers. Currently, only NTSC, PAL, PAL-M and SECAM are supported.</Description>
            </Property>
            <Property>
               <Name>SignalFormat</Name>
               <Location>Trigger3TV2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	propertyValue = comobj.SignalFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj.SignalFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTVSignalFormatNTSC" Value="AgInfiniiVisionTVSignalFormatNTSC"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatPAL" Value="AgInfiniiVisionTVSignalFormatPAL"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatSECAM" Value="AgInfiniiVisionTVSignalFormatSECAM"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatPALM" Value="AgInfiniiVisionTVSignalFormatPALM"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatGeneric" Value="AgInfiniiVisionTVSignalFormatGeneric"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP480" Value="AgInfiniiVisionTVSignalFormatP480"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatI1080" Value="AgInfiniiVisionTVSignalFormatI1080"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP720" Value="AgInfiniiVisionTVSignalFormatP720"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP1080" Value="AgInfiniiVisionTVSignalFormatP1080"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP1080L25HZ" Value="AgInfiniiVisionTVSignalFormatP1080L25HZ"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP1080L50HZ" Value="AgInfiniiVisionTVSignalFormatP1080L50HZ"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatP1080L60HZ" Value="AgInfiniiVisionTVSignalFormatP1080L60HZ"/>
                     <Enum Name="AgInfiniiVisionTVSignalFormatI1080L60HZ" Value="AgInfiniiVisionTVSignalFormatI1080L60HZ"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The format of TV signal on which the oscilloscope triggers. Currently, only NTSC, PAL, PAL-M and SECAM are supported.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3TV2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, SignalFormat, Event, Polarity)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.TV2;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, SignalFormat, Event, Polarity);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the TV Trigger parameters.</Description>
            </Method>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3TV2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, SignalFormat, Event, Polarity)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.TV2;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, SignalFormat, Event, Polarity);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the TV Trigger parameters.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3TV2UDTV</Name>
         <Description>IAgInfiniiVisionTriggerTV2UDTV interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3TV2UDTV1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>EdgeNumber</Name>
               <Location>Trigger3TV2UDTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj = comobj.UDTV;
	propertyValue = comobj.EdgeNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj = comobj.UDTV;
	comobj.EdgeNumber = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the Generic video trigger's Nth edge to trigger on after synchronizing with the vertical sync.</Description>
            </Property>
            <Property>
               <Name>HorizontalSyncEnabled</Name>
               <Location>Trigger3TV2UDTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj = comobj.UDTV;
	propertyValue = comobj.HorizontalSyncEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj = comobj.UDTV;
	comobj.HorizontalSyncEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the horizontal sync control in the Generic video trigger.</Description>
            </Property>
            <Property>
               <Name>HorizontalSyncTime</Name>
               <Location>Trigger3TV2UDTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj = comobj.UDTV;
	propertyValue = comobj.HorizontalSyncTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj = comobj.UDTV;
	comobj.HorizontalSyncTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>When the HorizontalSyncEnabled property is set to true, this property sets the minimum time the horizontal sync pulse must be present to be considered valid.</Description>
            </Property>
            <Property>
               <Name>MinTime</Name>
               <Location>Trigger3TV2UDTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj = comobj.UDTV;
	propertyValue = comobj.MinTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.TV2;
	comobj = comobj.UDTV;
	comobj.MinTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the "greater than the sync pulse width" time in the Generic video trigger. This setting allows oscilloscope synchronization to the vertical sync.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Trigger3USB</Name>
         <Description>IAgInfiniiVisionTrigger2USB interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3USB1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Condition</Name>
               <Location>Trigger3USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.USB;
	propertyValue = comobj.Condition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.USB;
	comobj.Condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerUSBConditionStartOfPacket" Value="AgInfiniiVisionTriggerUSBConditionStartOfPacket"/>
                     <Enum Name="AgInfiniiVisionTriggerUSBConditionEndOfPacket" Value="AgInfiniiVisionTriggerUSBConditionEndOfPacket"/>
                     <Enum Name="AgInfiniiVisionTriggerUSBConditionEnterSuspend" Value="AgInfiniiVisionTriggerUSBConditionEnterSuspend"/>
                     <Enum Name="AgInfiniiVisionTriggerUSBConditionExitSuspend" Value="AgInfiniiVisionTriggerUSBConditionExitSuspend"/>
                     <Enum Name="AgInfiniiVisionTriggerUSBConditionReset" Value="AgInfiniiVisionTriggerUSBConditionReset"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>CURRENTLY NOT SUPPORTED FOR 4000X and 6000X SERIES. Specifies where the USB trigger will occur.</Description>
            </Property>
            <Property>
               <Name>DMinusSource</Name>
               <Location>Trigger3USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.USB;
	propertyValue = comobj.DMinusSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.USB;
	comobj.DMinusSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>CURRENTLY NOT SUPPORTED FOR 4000X and 6000X SERIES. Specifies the source for the USB D- signal.</Description>
            </Property>
            <Property>
               <Name>DPlusSource</Name>
               <Location>Trigger3USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.USB;
	propertyValue = comobj.DPlusSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.USB;
	comobj.DPlusSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>CURRENTLY NOT SUPPORTED FOR 4000X and 6000X SERIES. Specifies the source for the USB D+ signal.</Description>
            </Property>
            <Property>
               <Name>Speed</Name>
               <Location>Trigger3USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.USB;
	propertyValue = comobj.Speed;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.USB;
	comobj.Speed = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionTriggerUSBSpeedLow" Value="AgInfiniiVisionTriggerUSBSpeedLow"/>
                     <Enum Name="AgInfiniiVisionTriggerUSBSpeedFull" Value="AgInfiniiVisionTriggerUSBSpeedFull"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>CURRENTLY NOT SUPPORTED FOR 4000X and 6000X SERIES. Specifies the expected USB signal speed to be Low Speed (1.5 Mb/s) or Full Speed (12 Mb/s).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3USB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Condition, Speed, DPlusSource, DMinusSource)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.USB;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Condition, Speed, DPlusSource, DMinusSource);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>CURRENTLY NOT SUPPORTED FOR 4000X and 6000X SERIES. Configures the condition, speed, D+ source and D- source parameters for a USB trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3Width</Name>
         <Description>IAgInfiniiVisionTriggerWidth interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Width1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Condition</Name>
               <Location>Trigger3Width</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Width;
	propertyValue = comobj.Condition;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Width;
	comobj.Condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWidthConditionWithin" Value="AgInfiniiVisionWidthConditionWithin"/>
                     <Enum Name="AgInfiniiVisionWidthConditionOutside" Value="AgInfiniiVisionWidthConditionOutside"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Whether a pulse within or outside the high and low thresholds triggers the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>Trigger3Width</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Width;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Width;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWidthPolarityPositive" Value="AgInfiniiVisionWidthPolarityPositive"/>
                     <Enum Name="AgInfiniiVisionWidthPolarityNegative" Value="AgInfiniiVisionWidthPolarityNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the pulse that triggers the oscilloscope. Need to set Source before setting polarity.</Description>
            </Property>
            <Property>
               <Name>ThresholdHigh</Name>
               <Location>Trigger3Width</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Width;
	propertyValue = comobj.ThresholdHigh;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Width;
	comobj.ThresholdHigh = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high width threshold time in seconds.</Description>
            </Property>
            <Property>
               <Name>ThresholdLow</Name>
               <Location>Trigger3Width</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Width;
	propertyValue = comobj.ThresholdLow;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Width;
	comobj.ThresholdLow = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The low width threshold time in seconds.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger3Width</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Level, ThresholdLow, ThresholdHigh, Polarity, Condition)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Width;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(Level), double(ThresholdLow), double(ThresholdHigh), Polarity, Condition);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the width trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger3Zone</Name>
         <Description>IAgInfiniiVisionTrigger3Zone interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Zone1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Source</Name>
               <Location>Trigger3Zone</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Zone;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Zone;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the analog source channel shared by all zones.  Permissible Values are Channel&lt;n&gt;.&lt;/n&gt;</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Enabled</Name>
               <Location>Trigger3Zone</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Enabled(obj, Zone, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Zone;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Enabled(Zone, varargin{:});
end
[Val] = comobj.Enabled(Zone);
</MCode>
               </Code>
               <Description>Specifies the state for Zone 1 or Zone 2.</Description>
            </Method>
            <Method>
               <Name>GetZonePlacement</Name>
               <Location>Trigger3Zone</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Width, Height, XCenter, YCenter] = GetZonePlacement(obj, Zone, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Zone;
feature('COM_SafeArraySingleDim',1);
[Width, Height, XCenter, YCenter] = comobj.GetZonePlacement(Zone, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Queries the size and location of Zone 1 or Zone 2.</Description>
            </Method>
            <Method>
               <Name>Mode</Name>
               <Location>Trigger3Zone</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Mode(obj, Zone, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Zone;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Mode(Zone, varargin{:});
end
[Val] = comobj.Mode(Zone);
</MCode>
               </Code>
               <Description>Specifies the zone qualifying condition for Zone 1 or Zone 2 as either "Must Intersect" or "Must Not Intersect".</Description>
            </Method>
            <Method>
               <Name>SetZonePlacement</Name>
               <Location>Trigger3Zone</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetZonePlacement(obj, Zone, Width, Height, XCenter, YCenter)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Zone;
feature('COM_SafeArraySingleDim',1);
comobj.SetZonePlacement(Zone, double(Width), double(Height), double(XCenter), double(YCenter));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the size and location of Zone 1 or Zone 2.</Description>
            </Method>
            <Method>
               <Name>Validity</Name>
               <Location>Trigger3Zone</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Validity(obj, Zone, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Zone;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Validity(Zone, varargin{:});
end
[Val] = comobj.Validity(Zone);
</MCode>
               </Code>
               <Description>Read Only - Query returns the validity of Zone 1 or Zone 2.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Utility</Name>
         <Description>IVI Driver utility interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Utility1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>Disable</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Disable(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.Disable();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Quickly places the instrument in a state where it has no, or minimal, effect on the external system to which it is connected.  This state is not necessarily a known state.</Description>
            </Method>
            <Method>
               <Name>ErrorQuery</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorCode, ErrorMessage] = ErrorQuery(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
[ErrorCode, ErrorMessage] = comobj.ErrorQuery(0, '');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Queries the instrument and returns instrument specific error information.  This function can be used when QueryInstrumentStatus is True to retrieve error details when the driver detects an instrument error.</Description>
            </Method>
            <Method>
               <Name>LockObject</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LockObject(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.LockObject();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Obtains a multithread lock on the driver after waiting until all other execution threads have released their locks on the instrument session.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Places the instrument in a known state and configures instrument options on which the IVI specific driver depends (for example, enabling/disabling headers).  For an IEEE 488.2 instrument, Reset sends the command string *RST to the instrument.</Description>
            </Method>
            <Method>
               <Name>ResetWithDefaults</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetWithDefaults(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.ResetWithDefaults();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Does the equivalent of Reset and then, (1) disables class extension capability groups, (2) sets attributes to initial values defined by class specs, and (3) configures the driver to option string settings used when Initialize was last executed.</Description>
            </Method>
            <Method>
               <Name>SelfTest</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [TestResult, TestMessage] = SelfTest(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
[TestResult, TestMessage] = comobj.SelfTest(0, '');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Performs an instrument self test, waits for the instrument to complete the test, and queries the instrument for the results.  If the instrument passes the test, TestResult is zero and TestMessage is 'Self test passed'.</Description>
            </Method>
            <Method>
               <Name>UnlockObject</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function UnlockObject(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.UnlockObject();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Releases a previously obtained mutlithread lock.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Waveform</Name>
         <Description>IAgInfiniiVisionWaveform interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Waveform1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ByteOrder</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.ByteOrder;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	comobj.ByteOrder = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformByteOrderLSBFirst" Value="AgInfiniiVisionWaveformByteOrderLSBFirst"/>
                     <Enum Name="AgInfiniiVisionWaveformByteOrderMSBFirst" Value="AgInfiniiVisionWaveformByteOrderMSBFirst"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Output sequence of the WORD data. It decides which significant byte to be transmitted first.</Description>
            </Property>
            <Property>
               <Name>DataFormat</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.DataFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	comobj.DataFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformDataFormatWord" Value="AgInfiniiVisionWaveformDataFormatWord"/>
                     <Enum Name="AgInfiniiVisionWaveformDataFormatByte" Value="AgInfiniiVisionWaveformDataFormatByte"/>
                     <Enum Name="AgInfiniiVisionWaveformDataFormatAscii" Value="AgInfiniiVisionWaveformDataFormatAscii"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Data transmission mode for waveform data points. It controls how the data is formatted when sent from the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>PointCount</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.PointCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	comobj.PointCount = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Number of waveform points to be transferred with the Waveform data</Description>
            </Property>
            <Property>
               <Name>PointMode</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.PointMode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	comobj.PointMode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformPointModeNormal" Value="AgInfiniiVisionWaveformPointModeNormal"/>
                     <Enum Name="AgInfiniiVisionWaveformPointModeMaximum" Value="AgInfiniiVisionWaveformPointModeMaximum"/>
                     <Enum Name="AgInfiniiVisionWaveformPointModeRaw" Value="AgInfiniiVisionWaveformPointModeRaw"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of data record to be transferred</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Source for the waveform.</Description>
            </Property>
            <Property>
               <Name>UnsignedModeEnable</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.UnsignedModeEnable;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	comobj.UnsignedModeEnable = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables unsigned mode of data values which sends integers as unsigned or signed.</Description>
            </Property>
            <Property>
               <Name>View</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.View;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	comobj.View = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>View setting associated with the currently selected waveform. The only legal value for the view setting is MAIN.</Description>
            </Property>
            <Property>
               <Name>XIncrement</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.XIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - X-increment value for the currently specified source. This value is the time difference between consecutive data points in seconds.</Description>
            </Property>
            <Property>
               <Name>XOrigin</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.XOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the returns the x-origin value for the currently specified source. This value is first data point((XREFerence = 0) specified by IAgInfiniiVisionXReference.</Description>
            </Property>
            <Property>
               <Name>XReference</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.XReference;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - X-reference value for the currently specified source. This value specifies the index of the data point associated with the x-origin data value</Description>
            </Property>
            <Property>
               <Name>YIncrement</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.YIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the y-increment value in volts for the currently specified source. This value is voltage difference between consecutive data values. For digital waveforms it is always "1".</Description>
            </Property>
            <Property>
               <Name>YOrigin</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.YOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Y-origin value for the currently specified source. This value is the voltage at center screen specified IAgInfiniVisionYReference.</Description>
            </Property>
            <Property>
               <Name>YReference</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform;
	propertyValue = comobj.YReference;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Y-reference value for the currently specified source. This value specifies the data point value where the y-origin occurs. The data point is value of the center of the screen. It is undefined if the format is ASCii</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Preamble</Name>
               <Location>Waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Preamble(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Waveform;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.Preamble();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the Preamble information for the selected waveform source. The preamble data contains information concerning the vertical and horizontal scaling of the data of the corresponding channel</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Waveform2</Name>
         <Description>IAgInfiniiVisionWaveform2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Waveform21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ByteOrder</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.ByteOrder;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.ByteOrder = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformByteOrderLSBFirst" Value="AgInfiniiVisionWaveformByteOrderLSBFirst"/>
                     <Enum Name="AgInfiniiVisionWaveformByteOrderMSBFirst" Value="AgInfiniiVisionWaveformByteOrderMSBFirst"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Output sequence of the WORD data. It decides which significant byte to be transmitted first.</Description>
            </Property>
            <Property>
               <Name>ByteOrder</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.ByteOrder;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.ByteOrder = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformByteOrderLSBFirst" Value="AgInfiniiVisionWaveformByteOrderLSBFirst"/>
                     <Enum Name="AgInfiniiVisionWaveformByteOrderMSBFirst" Value="AgInfiniiVisionWaveformByteOrderMSBFirst"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Output sequence of the WORD data. It decides which significant byte to be transmitted first.</Description>
            </Property>
            <Property>
               <Name>DataFormat</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.DataFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.DataFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformDataFormatWord" Value="AgInfiniiVisionWaveformDataFormatWord"/>
                     <Enum Name="AgInfiniiVisionWaveformDataFormatByte" Value="AgInfiniiVisionWaveformDataFormatByte"/>
                     <Enum Name="AgInfiniiVisionWaveformDataFormatAscii" Value="AgInfiniiVisionWaveformDataFormatAscii"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Data transmission mode for waveform data points. It controls how the data is formatted when sent from the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>DataFormat</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.DataFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.DataFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformDataFormatWord" Value="AgInfiniiVisionWaveformDataFormatWord"/>
                     <Enum Name="AgInfiniiVisionWaveformDataFormatByte" Value="AgInfiniiVisionWaveformDataFormatByte"/>
                     <Enum Name="AgInfiniiVisionWaveformDataFormatAscii" Value="AgInfiniiVisionWaveformDataFormatAscii"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Data transmission mode for waveform data points. It controls how the data is formatted when sent from the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>PointCount</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.PointCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.PointCount = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Number of waveform points to be transferred with the Waveform data</Description>
            </Property>
            <Property>
               <Name>PointCount</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.PointCount;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.PointCount = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Number of waveform points to be transferred with the Waveform data</Description>
            </Property>
            <Property>
               <Name>PointMode</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.PointMode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.PointMode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformPointModeNormal" Value="AgInfiniiVisionWaveformPointModeNormal"/>
                     <Enum Name="AgInfiniiVisionWaveformPointModeMaximum" Value="AgInfiniiVisionWaveformPointModeMaximum"/>
                     <Enum Name="AgInfiniiVisionWaveformPointModeRaw" Value="AgInfiniiVisionWaveformPointModeRaw"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of data record to be transferred</Description>
            </Property>
            <Property>
               <Name>PointMode</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.PointMode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.PointMode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformPointModeNormal" Value="AgInfiniiVisionWaveformPointModeNormal"/>
                     <Enum Name="AgInfiniiVisionWaveformPointModeMaximum" Value="AgInfiniiVisionWaveformPointModeMaximum"/>
                     <Enum Name="AgInfiniiVisionWaveformPointModeRaw" Value="AgInfiniiVisionWaveformPointModeRaw"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of data record to be transferred</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Source for the waveform.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Source for the waveform.</Description>
            </Property>
            <Property>
               <Name>SubSource</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.SubSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.SubSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformSubSourceSUB0" Value="AgInfiniiVisionWaveformSubSourceSUB0"/>
                     <Enum Name="AgInfiniiVisionWaveformSubSourceSUB1" Value="AgInfiniiVisionWaveformSubSourceSUB1"/>
                     <Enum Name="AgInfiniiVisionWaveformSubSourceSlow" Value="AgInfiniiVisionWaveformSubSourceSlow"/>
                     <Enum Name="AgInfiniiVisionWaveformSubSourceFast" Value="AgInfiniiVisionWaveformSubSourceFast"/>
                     <Enum Name="AgInfiniiVisionWaveformSubSourceRx" Value="AgInfiniiVisionWaveformSubSourceRx"/>
                     <Enum Name="AgInfiniiVisionWaveformSubSourceTx" Value="AgInfiniiVisionWaveformSubSourceTx"/>
                     <Enum Name="AgInfiniiVisionWaveformSubSourceMISO" Value="AgInfiniiVisionWaveformSubSourceMISO"/>
                     <Enum Name="AgInfiniiVisionWaveformSubSourceMOSI" Value="AgInfiniiVisionWaveformSubSourceMOSI"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the sub-source for those sources that have more than one possibility.</Description>
            </Property>
            <Property>
               <Name>UnsignedModeEnable</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.UnsignedModeEnable;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.UnsignedModeEnable = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables unsigned mode of data values which sends integers as unsigned or signed.</Description>
            </Property>
            <Property>
               <Name>UnsignedModeEnable</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.UnsignedModeEnable;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.UnsignedModeEnable = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables unsigned mode of data values which sends integers as unsigned or signed.</Description>
            </Property>
            <Property>
               <Name>View</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.View;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.View = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>View setting associated with the currently selected waveform. The only legal value for the view setting is MAIN.</Description>
            </Property>
            <Property>
               <Name>View</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.View;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	comobj.View = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>View setting associated with the currently selected waveform. The only legal value for the view setting is MAIN.</Description>
            </Property>
            <Property>
               <Name>XIncrement</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.XIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - X-increment value for the currently specified source. This value is the time difference between consecutive data points in seconds.</Description>
            </Property>
            <Property>
               <Name>XIncrement</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.XIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - X-increment value for the currently specified source. This value is the time difference between consecutive data points in seconds.</Description>
            </Property>
            <Property>
               <Name>XOrigin</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.XOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the returns the x-origin value for the currently specified source. This value is first data point((XREFerence = 0) specified by IAgInfiniiVisionXReference.</Description>
            </Property>
            <Property>
               <Name>XOrigin</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.XOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the returns the x-origin value for the currently specified source. This value is first data point((XREFerence = 0) specified by IAgInfiniiVisionXReference.</Description>
            </Property>
            <Property>
               <Name>XReference</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.XReference;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - X-reference value for the currently specified source. This value specifies the index of the data point associated with the x-origin data value</Description>
            </Property>
            <Property>
               <Name>XReference</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.XReference;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - X-reference value for the currently specified source. This value specifies the index of the data point associated with the x-origin data value</Description>
            </Property>
            <Property>
               <Name>YIncrement</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.YIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the y-increment value in volts for the currently specified source. This value is voltage difference between consecutive data values. For digital waveforms it is always "1".</Description>
            </Property>
            <Property>
               <Name>YIncrement</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.YIncrement;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns the y-increment value in volts for the currently specified source. This value is voltage difference between consecutive data values. For digital waveforms it is always "1".</Description>
            </Property>
            <Property>
               <Name>YOrigin</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.YOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Y-origin value for the currently specified source. This value is the voltage at center screen specified IAgInfiniVisionYReference.</Description>
            </Property>
            <Property>
               <Name>YOrigin</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.YOrigin;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Y-origin value for the currently specified source. This value is the voltage at center screen specified IAgInfiniVisionYReference.</Description>
            </Property>
            <Property>
               <Name>YReference</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.YReference;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Y-reference value for the currently specified source. This value specifies the data point value where the y-origin occurs. The data point is value of the center of the screen. It is undefined if the format is ASCii</Description>
            </Property>
            <Property>
               <Name>YReference</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Waveform2;
	propertyValue = comobj.YReference;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Y-reference value for the currently specified source. This value specifies the data point value where the y-origin occurs. The data point is value of the center of the screen. It is undefined if the format is ASCii</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Preamble</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Preamble(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Waveform2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.Preamble();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the Preamble information for the selected waveform source. The preamble data contains information concerning the vertical and horizontal scaling of the data of the corresponding channel</Description>
            </Method>
            <Method>
               <Name>Preamble</Name>
               <Location>Waveform2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Preamble(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Waveform2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.Preamble();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the Preamble information for the selected waveform source. The preamble data contains information concerning the vertical and horizontal scaling of the data of the corresponding channel</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveformGenerator</Name>
         <Description>IAgInfiniiVisionWaveformGenerator interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformGenerator1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Amplitude</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	propertyValue = comobj.Amplitude;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	comobj.Amplitude = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Amplitude in volts for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>DutyCycle</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	propertyValue = comobj.DutyCycle;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	comobj.DutyCycle = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Square wave duty cycle(20% to 80%) for Square waveforms.</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	propertyValue = comobj.Frequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency for Sine, Square, Ramp, and Pulse waveforms</Description>
            </Property>
            <Property>
               <Name>Function</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	propertyValue = comobj.Function;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	comobj.Function = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSinusoid" Value="AgInfiniiVisionWaveformGeneratorFunctionSinusoid"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSquare" Value="AgInfiniiVisionWaveformGeneratorFunctionSquare"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionRamp" Value="AgInfiniiVisionWaveformGeneratorFunctionRamp"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionPulse" Value="AgInfiniiVisionWaveformGeneratorFunctionPulse"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionNoise" Value="AgInfiniiVisionWaveformGeneratorFunctionNoise"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionDC" Value="AgInfiniiVisionWaveformGeneratorFunctionDC"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSineCardinal" Value="AgInfiniiVisionWaveformGeneratorFunctionSineCardinal"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionExponentialRise" Value="AgInfiniiVisionWaveformGeneratorFunctionExponentialRise"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionExponentialFall" Value="AgInfiniiVisionWaveformGeneratorFunctionExponentialFall"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionCardiac" Value="AgInfiniiVisionWaveformGeneratorFunctionCardiac"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionGaussianPulse" Value="AgInfiniiVisionWaveformGeneratorFunctionGaussianPulse"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionArbitrary" Value="AgInfiniiVisionWaveformGeneratorFunctionArbitrary"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of waveform.</Description>
            </Property>
            <Property>
               <Name>HighVoltage</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	propertyValue = comobj.HighVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	comobj.HighVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>High-level voltage for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>LowVoltage</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	propertyValue = comobj.LowVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	comobj.LowVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Low-level voltage for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>OffsetVoltage</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	propertyValue = comobj.OffsetVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	comobj.OffsetVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage offset for Sine, Square, Ramp, Pulse, and Noise waveforms</Description>
            </Property>
            <Property>
               <Name>OutputEnabled</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	propertyValue = comobj.OutputEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	comobj.OutputEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables waveform generator signal output.</Description>
            </Property>
            <Property>
               <Name>OutputLoadImpedance</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	propertyValue = comobj.OutputLoadImpedance;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	comobj.OutputLoadImpedance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceOneMeg" Value="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceOneMeg"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceFifty" Value="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceFifty"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Expected output load impedance. The output load selection lets the waveform generator display the correct amplitude and offset levels for the expected output load.</Description>
            </Property>
            <Property>
               <Name>Period</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	propertyValue = comobj.Period;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	comobj.Period = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Period in seconds for Sine, Square, Ramp, and Pulse waveforms</Description>
            </Property>
            <Property>
               <Name>PulseWidth</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	propertyValue = comobj.PulseWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	comobj.PulseWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Pulse width in seconds for Pulse waveforms. The pulse width can be adjusted from 20 ns to the period minus 20 ns.</Description>
            </Property>
            <Property>
               <Name>RampSymmetry</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	propertyValue = comobj.RampSymmetry;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator;
	comobj.RampSymmetry = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Symmetry percentage from 0% to 100% for Ramp waveform. Symmetry represents the amount of time per cycle that the ramp waveform is rising.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Reset</Name>
               <Location>WaveformGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveformGenerator;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restores the waveform generator factory default settings-1 kHz sine wave, 500 mVpp, 0 V offset.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveformGenerator2</Name>
         <Description>IAgInfiniiVisionWaveformGenerator2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformGenerator21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AdditionalNoise</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.AdditionalNoise;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.AdditionalNoise = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the amount of noise to add to the currently selected signal.</Description>
            </Property>
            <Property>
               <Name>Amplitude</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.Amplitude;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.Amplitude = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Amplitude in volts for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>Amplitude</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.Amplitude;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.Amplitude = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Amplitude in volts for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>DutyCycle</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.DutyCycle;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.DutyCycle = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Square wave duty cycle(20% to 80%) for Square waveforms.</Description>
            </Property>
            <Property>
               <Name>DutyCycle</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.DutyCycle;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.DutyCycle = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Square wave duty cycle(20% to 80%) for Square waveforms.</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.Frequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency for Sine, Square, Ramp, and Pulse waveforms</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.Frequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency for Sine, Square, Ramp, and Pulse waveforms</Description>
            </Property>
            <Property>
               <Name>Function</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.Function;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.Function = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSinusoid" Value="AgInfiniiVisionWaveformGeneratorFunctionSinusoid"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSquare" Value="AgInfiniiVisionWaveformGeneratorFunctionSquare"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionRamp" Value="AgInfiniiVisionWaveformGeneratorFunctionRamp"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionPulse" Value="AgInfiniiVisionWaveformGeneratorFunctionPulse"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionNoise" Value="AgInfiniiVisionWaveformGeneratorFunctionNoise"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionDC" Value="AgInfiniiVisionWaveformGeneratorFunctionDC"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSineCardinal" Value="AgInfiniiVisionWaveformGeneratorFunctionSineCardinal"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionExponentialRise" Value="AgInfiniiVisionWaveformGeneratorFunctionExponentialRise"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionExponentialFall" Value="AgInfiniiVisionWaveformGeneratorFunctionExponentialFall"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionCardiac" Value="AgInfiniiVisionWaveformGeneratorFunctionCardiac"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionGaussianPulse" Value="AgInfiniiVisionWaveformGeneratorFunctionGaussianPulse"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionArbitrary" Value="AgInfiniiVisionWaveformGeneratorFunctionArbitrary"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of waveform.</Description>
            </Property>
            <Property>
               <Name>Function</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.Function;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.Function = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSinusoid" Value="AgInfiniiVisionWaveformGeneratorFunctionSinusoid"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSquare" Value="AgInfiniiVisionWaveformGeneratorFunctionSquare"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionRamp" Value="AgInfiniiVisionWaveformGeneratorFunctionRamp"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionPulse" Value="AgInfiniiVisionWaveformGeneratorFunctionPulse"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionNoise" Value="AgInfiniiVisionWaveformGeneratorFunctionNoise"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionDC" Value="AgInfiniiVisionWaveformGeneratorFunctionDC"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSineCardinal" Value="AgInfiniiVisionWaveformGeneratorFunctionSineCardinal"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionExponentialRise" Value="AgInfiniiVisionWaveformGeneratorFunctionExponentialRise"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionExponentialFall" Value="AgInfiniiVisionWaveformGeneratorFunctionExponentialFall"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionCardiac" Value="AgInfiniiVisionWaveformGeneratorFunctionCardiac"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionGaussianPulse" Value="AgInfiniiVisionWaveformGeneratorFunctionGaussianPulse"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionArbitrary" Value="AgInfiniiVisionWaveformGeneratorFunctionArbitrary"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of waveform.</Description>
            </Property>
            <Property>
               <Name>HighVoltage</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.HighVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.HighVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>High-level voltage for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>HighVoltage</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.HighVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.HighVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>High-level voltage for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>LowVoltage</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.LowVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.LowVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Low-level voltage for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>LowVoltage</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.LowVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.LowVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Low-level voltage for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>OffsetVoltage</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.OffsetVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.OffsetVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage offset for Sine, Square, Ramp, Pulse, and Noise waveforms</Description>
            </Property>
            <Property>
               <Name>OffsetVoltage</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.OffsetVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.OffsetVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage offset for Sine, Square, Ramp, Pulse, and Noise waveforms</Description>
            </Property>
            <Property>
               <Name>OutputEnabled</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.OutputEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.OutputEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables waveform generator signal output.</Description>
            </Property>
            <Property>
               <Name>OutputEnabled</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.OutputEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.OutputEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables/Disables waveform generator signal output.</Description>
            </Property>
            <Property>
               <Name>OutputLoadImpedance</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.OutputLoadImpedance;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.OutputLoadImpedance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceOneMeg" Value="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceOneMeg"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceFifty" Value="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceFifty"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Expected output load impedance. The output load selection lets the waveform generator display the correct amplitude and offset levels for the expected output load.</Description>
            </Property>
            <Property>
               <Name>OutputLoadImpedance</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.OutputLoadImpedance;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.OutputLoadImpedance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceOneMeg" Value="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceOneMeg"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceFifty" Value="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceFifty"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Expected output load impedance. The output load selection lets the waveform generator display the correct amplitude and offset levels for the expected output load.</Description>
            </Property>
            <Property>
               <Name>Period</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.Period;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.Period = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Period in seconds for Sine, Square, Ramp, and Pulse waveforms</Description>
            </Property>
            <Property>
               <Name>Period</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.Period;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.Period = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Period in seconds for Sine, Square, Ramp, and Pulse waveforms</Description>
            </Property>
            <Property>
               <Name>PulseWidth</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.PulseWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.PulseWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Pulse width in seconds for Pulse waveforms. The pulse width can be adjusted from 20 ns to the period minus 20 ns.</Description>
            </Property>
            <Property>
               <Name>PulseWidth</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.PulseWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.PulseWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Pulse width in seconds for Pulse waveforms. The pulse width can be adjusted from 20 ns to the period minus 20 ns.</Description>
            </Property>
            <Property>
               <Name>RampSymmetry</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.RampSymmetry;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.RampSymmetry = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Symmetry percentage from 0% to 100% for Ramp waveform. Symmetry represents the amount of time per cycle that the ramp waveform is rising.</Description>
            </Property>
            <Property>
               <Name>RampSymmetry</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	propertyValue = comobj.RampSymmetry;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj.RampSymmetry = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Symmetry percentage from 0% to 100% for Ramp waveform. Symmetry represents the amount of time per cycle that the ramp waveform is rising.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Reset</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveformGenerator2;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restores the waveform generator factory default settings-1 kHz sine wave, 500 mVpp, 0 V offset.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>WaveformGenerator2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveformGenerator2;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restores the waveform generator factory default settings-1 kHz sine wave, 500 mVpp, 0 V offset.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveformGenerator2Arbitrary</Name>
         <Description>IAgInfiniiVisionWaveformGenerator2Arbitrary interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformGenerator2Arbitrary1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ByteOrder</Name>
               <Location>WaveformGenerator2Arbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj = comobj.Arbitrary;
	propertyValue = comobj.ByteOrder;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj = comobj.Arbitrary;
	comobj.ByteOrder = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorArbitraryByteOrderLSBFirst" Value="AgInfiniiVisionWaveformGeneratorArbitraryByteOrderLSBFirst"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorArbitraryByteOrderMSBFirst" Value="AgInfiniiVisionWaveformGeneratorArbitraryByteOrderMSBFirst"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the byte order for binary transfers.</Description>
            </Property>
            <Property>
               <Name>Interpolation</Name>
               <Location>WaveformGenerator2Arbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj = comobj.Arbitrary;
	propertyValue = comobj.Interpolation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj = comobj.Arbitrary;
	comobj.Interpolation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the Interpolation control.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Reset</Name>
               <Location>WaveformGenerator2Arbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveformGenerator2;
comobj = comobj.Arbitrary;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the Arbitrary waveform memory and loads it with the default waveform.</Description>
            </Method>
            <Method>
               <Name>SetData</Name>
               <Location>WaveformGenerator2Arbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetData(obj, Values)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveformGenerator2;
comobj = comobj.Arbitrary;
feature('COM_SafeArraySingleDim',1);
comobj.SetData(Values);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Downloads an arbitrary waveform in floating-point values format.</Description>
            </Method>
            <Method>
               <Name>SetDataDAC</Name>
               <Location>WaveformGenerator2Arbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDataDAC(obj, Values)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveformGenerator2;
comobj = comobj.Arbitrary;
feature('COM_SafeArraySingleDim',1);
comobj.SetDataDAC(int16(Values));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Downloads an arbitrary waveform in integer (DAC) values.</Description>
            </Method>
            <Method>
               <Name>Store</Name>
               <Location>WaveformGenerator2Arbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Store(obj, Source)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveformGenerator2;
comobj = comobj.Arbitrary;
feature('COM_SafeArraySingleDim',1);
comobj.Store(Source);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Stores the source's waveform (source can be any analog channel, or reference waveforms) into the Arbitrary waveform memory.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveformGenerator2ArbitraryAttribute</Name>
         <Description>IAgInfiniiVisionWaveformGenerator2ArbitraryAttribute interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformGenerator2ArbitraryAttribute1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>NumberOfPoints</Name>
               <Location>WaveformGenerator2ArbitraryAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveformGenerator2;
	comobj = comobj.Arbitrary;
	comobj = comobj.Attribute;
	propertyValue = comobj.NumberOfPoints;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Queries the number of points used by the current Arbitrary waveform.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>WaveGen</Name>
         <Description>IAgInfiniiVisionWaveGen interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveGen1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AdditionalNoise</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.AdditionalNoise;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.AdditionalNoise = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the amount of noise to add to the currently selected signal.</Description>
            </Property>
            <Property>
               <Name>AdditionalNoise</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.AdditionalNoise;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.AdditionalNoise = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the amount of noise to add to the currently selected signal.</Description>
            </Property>
            <Property>
               <Name>Amplitude</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Amplitude;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Amplitude = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Amplitude in volts for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>Amplitude</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Amplitude;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Amplitude = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Amplitude in volts for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>DutyCycle</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.DutyCycle;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.DutyCycle = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Square wave duty cycle(20% to 80%) for Square waveforms.</Description>
            </Property>
            <Property>
               <Name>DutyCycle</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.DutyCycle;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.DutyCycle = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Square wave duty cycle(20% to 80%) for Square waveforms.</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Frequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency for Sine, Square, Ramp, and Pulse waveforms</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Frequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Frequency for Sine, Square, Ramp, and Pulse waveforms</Description>
            </Property>
            <Property>
               <Name>Function</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Function;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Function = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSinusoid" Value="AgInfiniiVisionWaveformGeneratorFunctionSinusoid"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSquare" Value="AgInfiniiVisionWaveformGeneratorFunctionSquare"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionRamp" Value="AgInfiniiVisionWaveformGeneratorFunctionRamp"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionPulse" Value="AgInfiniiVisionWaveformGeneratorFunctionPulse"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionNoise" Value="AgInfiniiVisionWaveformGeneratorFunctionNoise"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionDC" Value="AgInfiniiVisionWaveformGeneratorFunctionDC"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSineCardinal" Value="AgInfiniiVisionWaveformGeneratorFunctionSineCardinal"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionExponentialRise" Value="AgInfiniiVisionWaveformGeneratorFunctionExponentialRise"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionExponentialFall" Value="AgInfiniiVisionWaveformGeneratorFunctionExponentialFall"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionCardiac" Value="AgInfiniiVisionWaveformGeneratorFunctionCardiac"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionGaussianPulse" Value="AgInfiniiVisionWaveformGeneratorFunctionGaussianPulse"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionArbitrary" Value="AgInfiniiVisionWaveformGeneratorFunctionArbitrary"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of waveform.</Description>
            </Property>
            <Property>
               <Name>Function</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Function;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Function = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSinusoid" Value="AgInfiniiVisionWaveformGeneratorFunctionSinusoid"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSquare" Value="AgInfiniiVisionWaveformGeneratorFunctionSquare"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionRamp" Value="AgInfiniiVisionWaveformGeneratorFunctionRamp"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionPulse" Value="AgInfiniiVisionWaveformGeneratorFunctionPulse"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionNoise" Value="AgInfiniiVisionWaveformGeneratorFunctionNoise"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionDC" Value="AgInfiniiVisionWaveformGeneratorFunctionDC"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionSineCardinal" Value="AgInfiniiVisionWaveformGeneratorFunctionSineCardinal"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionExponentialRise" Value="AgInfiniiVisionWaveformGeneratorFunctionExponentialRise"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionExponentialFall" Value="AgInfiniiVisionWaveformGeneratorFunctionExponentialFall"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionCardiac" Value="AgInfiniiVisionWaveformGeneratorFunctionCardiac"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionGaussianPulse" Value="AgInfiniiVisionWaveformGeneratorFunctionGaussianPulse"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorFunctionArbitrary" Value="AgInfiniiVisionWaveformGeneratorFunctionArbitrary"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Type of waveform.</Description>
            </Property>
            <Property>
               <Name>HighVoltage</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.HighVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.HighVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>High-level voltage for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>HighVoltage</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.HighVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.HighVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>High-level voltage for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>LowVoltage</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.LowVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.LowVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Low-level voltage for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>LowVoltage</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.LowVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.LowVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Low-level voltage for Sine, Square, Ramp, Pulse, and Noise waveforms.</Description>
            </Property>
            <Property>
               <Name>OffsetVoltage</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.OffsetVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.OffsetVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage offset for Sine, Square, Ramp, Pulse, and Noise waveforms</Description>
            </Property>
            <Property>
               <Name>OffsetVoltage</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.OffsetVoltage;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.OffsetVoltage = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Voltage offset for Sine, Square, Ramp, Pulse, and Noise waveforms</Description>
            </Property>
            <Property>
               <Name>OutputEnabled</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.OutputEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.OutputEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or Disables waveform generator signal output.</Description>
            </Property>
            <Property>
               <Name>OutputEnabled</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.OutputEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.OutputEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or Disables waveform generator signal output.</Description>
            </Property>
            <Property>
               <Name>OutputInverted</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.OutputInverted;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.OutputInverted = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the waveform generator output is inverted or not.</Description>
            </Property>
            <Property>
               <Name>OutputInverted</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.OutputInverted;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.OutputInverted = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the waveform generator output is inverted or not.</Description>
            </Property>
            <Property>
               <Name>OutputLoadImpedance</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.OutputLoadImpedance;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.OutputLoadImpedance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceOneMeg" Value="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceOneMeg"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceFifty" Value="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceFifty"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Expected output load impedance. The output load selection lets the waveform generator display the correct amplitude and offset levels for the expected output load.</Description>
            </Property>
            <Property>
               <Name>OutputLoadImpedance</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.OutputLoadImpedance;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.OutputLoadImpedance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceOneMeg" Value="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceOneMeg"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceFifty" Value="AgInfiniiVisionWaveformGeneratorOutputLoadImpedanceFifty"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Expected output load impedance. The output load selection lets the waveform generator display the correct amplitude and offset levels for the expected output load.</Description>
            </Property>
            <Property>
               <Name>Period</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Period;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Period = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Period in seconds for Sine, Square, Ramp, and Pulse waveforms</Description>
            </Property>
            <Property>
               <Name>Period</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Period;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Period = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Period in seconds for Sine, Square, Ramp, and Pulse waveforms</Description>
            </Property>
            <Property>
               <Name>PulseWidth</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.PulseWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.PulseWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Pulse width in seconds for Pulse waveforms. The pulse width can be adjusted from 20 ns to the period minus 20 ns.</Description>
            </Property>
            <Property>
               <Name>PulseWidth</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.PulseWidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.PulseWidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Pulse width in seconds for Pulse waveforms. The pulse width can be adjusted from 20 ns to the period minus 20 ns.</Description>
            </Property>
            <Property>
               <Name>RampSymmetry</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.RampSymmetry;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.RampSymmetry = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Symmetry percentage from 0% to 100% for Ramp waveform. Symmetry represents the amount of time per cycle that the ramp waveform is rising.</Description>
            </Property>
            <Property>
               <Name>RampSymmetry</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.RampSymmetry;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.RampSymmetry = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Symmetry percentage from 0% to 100% for Ramp waveform. Symmetry represents the amount of time per cycle that the ramp waveform is rising.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Reset</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restores the waveform generator factory default settings-1 kHz sine wave, 500 mVpp, 0 V offset.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>WaveGen</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restores the waveform generator factory default settings-1 kHz sine wave, 500 mVpp, 0 V offset.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveGenArbitrary</Name>
         <Description>IAgInfiniiVisionWaveformGenerator2Arbitrary interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveGenArbitrary1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ByteOrder</Name>
               <Location>WaveGenArbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Arbitrary;
	propertyValue = comobj.ByteOrder;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Arbitrary;
	comobj.ByteOrder = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorArbitraryByteOrderLSBFirst" Value="AgInfiniiVisionWaveformGeneratorArbitraryByteOrderLSBFirst"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorArbitraryByteOrderMSBFirst" Value="AgInfiniiVisionWaveformGeneratorArbitraryByteOrderMSBFirst"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the byte order for binary transfers.</Description>
            </Property>
            <Property>
               <Name>ByteOrder</Name>
               <Location>WaveGenArbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Arbitrary;
	propertyValue = comobj.ByteOrder;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Arbitrary;
	comobj.ByteOrder = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorArbitraryByteOrderLSBFirst" Value="AgInfiniiVisionWaveformGeneratorArbitraryByteOrderLSBFirst"/>
                     <Enum Name="AgInfiniiVisionWaveformGeneratorArbitraryByteOrderMSBFirst" Value="AgInfiniiVisionWaveformGeneratorArbitraryByteOrderMSBFirst"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the byte order for binary transfers.</Description>
            </Property>
            <Property>
               <Name>Interpolation</Name>
               <Location>WaveGenArbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Arbitrary;
	propertyValue = comobj.Interpolation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Arbitrary;
	comobj.Interpolation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the Interpolation control.</Description>
            </Property>
            <Property>
               <Name>Interpolation</Name>
               <Location>WaveGenArbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Arbitrary;
	propertyValue = comobj.Interpolation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Arbitrary;
	comobj.Interpolation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the Interpolation control.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Reset</Name>
               <Location>WaveGenArbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Arbitrary;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the Arbitrary waveform memory and loads it with the default waveform.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>WaveGenArbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Arbitrary;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the Arbitrary waveform memory and loads it with the default waveform.</Description>
            </Method>
            <Method>
               <Name>SetData</Name>
               <Location>WaveGenArbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetData(obj, Values)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Arbitrary;
feature('COM_SafeArraySingleDim',1);
comobj.SetData(Values);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Downloads an arbitrary waveform in floating-point values format.</Description>
            </Method>
            <Method>
               <Name>SetData</Name>
               <Location>WaveGenArbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetData(obj, Values)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Arbitrary;
feature('COM_SafeArraySingleDim',1);
comobj.SetData(Values);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Downloads an arbitrary waveform in floating-point values format.</Description>
            </Method>
            <Method>
               <Name>SetDataDAC</Name>
               <Location>WaveGenArbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDataDAC(obj, Values)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Arbitrary;
feature('COM_SafeArraySingleDim',1);
comobj.SetDataDAC(int16(Values));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Downloads an arbitrary waveform in integer (DAC) values.</Description>
            </Method>
            <Method>
               <Name>SetDataDAC</Name>
               <Location>WaveGenArbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDataDAC(obj, Values)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Arbitrary;
feature('COM_SafeArraySingleDim',1);
comobj.SetDataDAC(int16(Values));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Downloads an arbitrary waveform in integer (DAC) values.</Description>
            </Method>
            <Method>
               <Name>Store</Name>
               <Location>WaveGenArbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Store(obj, Source)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Arbitrary;
feature('COM_SafeArraySingleDim',1);
comobj.Store(Source);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Stores the source's waveform (source can be any analog channel, or reference waveforms) into the Arbitrary waveform memory.</Description>
            </Method>
            <Method>
               <Name>Store</Name>
               <Location>WaveGenArbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Store(obj, Source)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Arbitrary;
feature('COM_SafeArraySingleDim',1);
comobj.Store(Source);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Stores the source's waveform (source can be any analog channel, or reference waveforms) into the Arbitrary waveform memory.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveGenArbitraryAttribute</Name>
         <Description>IAgInfiniiVisionWaveformGenerator2ArbitraryAttribute interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveGenArbitraryAttribute1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>NumberOfPoints</Name>
               <Location>WaveGenArbitraryAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Arbitrary;
	comobj = comobj.Attribute;
	propertyValue = comobj.NumberOfPoints;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Queries the number of points used by the current Arbitrary waveform.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>WaveGenModulation</Name>
         <Description>IAgInfiniiVisionTrigger3Modulation interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveGenModulation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>WaveGenModulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables modulated waveform generator output.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>WaveGenModulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables modulated waveform generator output.</Description>
            </Property>
            <Property>
               <Name>Function</Name>
               <Location>WaveGenModulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	propertyValue = comobj.Function;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj.Function = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionModulationFunctionSinusoidal" Value="AgInfiniiVisionModulationFunctionSinusoidal"/>
                     <Enum Name="AgInfiniiVisionModulationFunctionSquare" Value="AgInfiniiVisionModulationFunctionSquare"/>
                     <Enum Name="AgInfiniiVisionModulationFunctionRamp" Value="AgInfiniiVisionModulationFunctionRamp"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the shape of the modulating signal.</Description>
            </Property>
            <Property>
               <Name>Function</Name>
               <Location>WaveGenModulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	propertyValue = comobj.Function;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj.Function = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionModulationFunctionSinusoidal" Value="AgInfiniiVisionModulationFunctionSinusoidal"/>
                     <Enum Name="AgInfiniiVisionModulationFunctionSquare" Value="AgInfiniiVisionModulationFunctionSquare"/>
                     <Enum Name="AgInfiniiVisionModulationFunctionRamp" Value="AgInfiniiVisionModulationFunctionRamp"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the shape of the modulating signal.</Description>
            </Property>
            <Property>
               <Name>RampSymmetry</Name>
               <Location>WaveGenModulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	propertyValue = comobj.RampSymmetry;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj.RampSymmetry = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the amount of time per cycle that the ramp waveform is rising.</Description>
            </Property>
            <Property>
               <Name>RampSymmetry</Name>
               <Location>WaveGenModulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	propertyValue = comobj.RampSymmetry;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj.RampSymmetry = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the amount of time per cycle that the ramp waveform is rising.</Description>
            </Property>
            <Property>
               <Name>WaveGenModulationType</Name>
               <Location>WaveGenModulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionModulationTypeAM" Value="AgInfiniiVisionModulationTypeAM"/>
                     <Enum Name="AgInfiniiVisionModulationTypeFM" Value="AgInfiniiVisionModulationTypeFM"/>
                     <Enum Name="AgInfiniiVisionModulationTypeFSK" Value="AgInfiniiVisionModulationTypeFSK"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the modulation type.</Description>
            </Property>
            <Property>
               <Name>WaveGenModulationType</Name>
               <Location>WaveGenModulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgInfiniiVisionModulationTypeAM" Value="AgInfiniiVisionModulationTypeAM"/>
                     <Enum Name="AgInfiniiVisionModulationTypeFM" Value="AgInfiniiVisionModulationTypeFM"/>
                     <Enum Name="AgInfiniiVisionModulationTypeFSK" Value="AgInfiniiVisionModulationTypeFSK"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the modulation type.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>WaveGenModulationAM</Name>
         <Description>IAgInfiniiVisionTrigger3ModulationAM interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveGenModulationAM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Depth</Name>
               <Location>WaveGenModulationAM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj = comobj.AM;
	propertyValue = comobj.Depth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj = comobj.AM;
	comobj.Depth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the amount of amplitude modulation.</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>WaveGenModulationAM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj = comobj.AM;
	propertyValue = comobj.Frequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj = comobj.AM;
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the frequency of the modulating signal. Frequency in Hz .</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>WaveGenModulationFM</Name>
         <Description>IAgInfiniiVisionTrigger3ModulationFM interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveGenModulationFM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Deviation</Name>
               <Location>WaveGenModulationFM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj = comobj.FM;
	propertyValue = comobj.Deviation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj = comobj.FM;
	comobj.Deviation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the frequency deviation from the original carrier signal frequency. Frequency deviation in Hz.</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>WaveGenModulationFM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj = comobj.FM;
	propertyValue = comobj.Frequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj = comobj.FM;
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the frequency of the modulating signal. Modulating waveform frequency in Hz.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>WaveGenModulationFSK</Name>
         <Description>IAgInfiniiVisionTrigger3ModulationFSK interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveGenModulationFSK1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Frequency</Name>
               <Location>WaveGenModulationFSK</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj = comobj.FSK;
	propertyValue = comobj.Frequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj = comobj.FSK;
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the "hop frequency". Hop frequency in Hz</Description>
            </Property>
            <Property>
               <Name>Rate</Name>
               <Location>WaveGenModulationFSK</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj = comobj.FSK;
	propertyValue = comobj.Rate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Modulation;
	comobj = comobj.FSK;
	comobj.Rate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the rate at which the output frequency "shifts". FSK modulation rate in Hz.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>WaveGens</Name>
         <Description>IAgInfiniiVisionWaveGens interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveGens1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>WaveGens</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of wavegens.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>WaveGens</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgInfiniiVisionWaveGen interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>WaveGens</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the wavegen name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveGenTracking</Name>
         <Description>IAgInfiniiVisionWaveGenTracking interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveGenTracking1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AmplitudeEnabled</Name>
               <Location>WaveGenTracking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Tracking;
	propertyValue = comobj.AmplitudeEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Tracking;
	comobj.AmplitudeEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, this property causes amplitude and offset adjustments to this waveform generator output signal to be tracked by the other waveform generator output.</Description>
            </Property>
            <Property>
               <Name>AmplitudeEnabled</Name>
               <Location>WaveGenTracking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Tracking;
	propertyValue = comobj.AmplitudeEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Tracking;
	comobj.AmplitudeEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, this property causes amplitude and offset adjustments to this waveform generator output signal to be tracked by the other waveform generator output.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>WaveGenTracking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Tracking;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Tracking;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, this property true, causes frequency, amplitude, offset, and duty cycle adjustments to this waveform generator output signal to be tracked by the other waveform generator output.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>WaveGenTracking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Tracking;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Tracking;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, this property true, causes frequency, amplitude, offset, and duty cycle adjustments to this waveform generator output signal to be tracked by the other waveform generator output.</Description>
            </Property>
            <Property>
               <Name>FrequencyEnabled</Name>
               <Location>WaveGenTracking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Tracking;
	propertyValue = comobj.FrequencyEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Tracking;
	comobj.FrequencyEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, this property causes frequency adjustments to this waveform generator output signal to be tracked by the other waveform generator output.</Description>
            </Property>
            <Property>
               <Name>FrequencyEnabled</Name>
               <Location>WaveGenTracking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Tracking;
	propertyValue = comobj.FrequencyEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.WaveGens;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Tracking;
	comobj.FrequencyEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, this property causes frequency adjustments to this waveform generator output signal to be tracked by the other waveform generator output.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>CopySignal</Name>
               <Location>WaveGenTracking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function CopySignal(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Tracking;
feature('COM_SafeArraySingleDim',1);
comobj.CopySignal();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the other waveform generator output to be identical to this waveform generator output (except that the shape of either output may be inverted).</Description>
            </Method>
            <Method>
               <Name>CopySignal</Name>
               <Location>WaveGenTracking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function CopySignal(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.WaveGens;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Tracking;
feature('COM_SafeArraySingleDim',1);
comobj.CopySignal();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the other waveform generator output to be identical to this waveform generator output (except that the shape of either output may be inverted).</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>